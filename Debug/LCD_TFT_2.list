
LCD_TFT_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064f0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002de30  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080344e4  080344e4  00050014  2**0
                  CONTENTS
  4 .ARM          00000008  080344e4  080344e4  000444e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080344ec  080344ec  00050014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080344ec  080344ec  000444ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080344f0  080344f0  000444f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080344f4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d4  20000014  08034508  00050014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08034508  000500e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011a1a  00000000  00000000  00050044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000203b  00000000  00000000  00061a5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  00063aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e40  00000000  00000000  00064a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a1f  00000000  00000000  00065870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cd1  00000000  00000000  0008628f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d132d  00000000  00000000  00096f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016828d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004040  00000000  00000000  001682e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000014 	.word	0x20000014
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800669c 	.word	0x0800669c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000018 	.word	0x20000018
 8000200:	0800669c 	.word	0x0800669c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000502:	f004 fa7b 	bl	80049fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000506:	f000 f8c7 	bl	8000698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050a:	f000 f9ad 	bl	8000868 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050e:	f000 f981 	bl	8000814 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000512:	f000 f92f 	bl	8000774 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


    tft_gpio_init(); //Inicializa os GPIOs do LCD (evita uso do CubeMX)
 8000516:	f004 f845 	bl	80045a4 <tft_gpio_init>
    HAL_TIM_Base_Start(&htim1); //Inicializa o Timer1 (base de tempo de us do LCD)
 800051a:	4855      	ldr	r0, [pc, #340]	; (8000670 <main+0x174>)
 800051c:	f005 fb96 	bl	8005c4c <HAL_TIM_Base_Start>
    HAL_Delay(100);
 8000520:	2064      	movs	r0, #100	; 0x64
 8000522:	f004 fadd 	bl	8004ae0 <HAL_Delay>
    tft_init(tft_readID()); //Inicializa o LCD de acordo com seu ID
 8000526:	f001 ff7f 	bl	8002428 <readID>
 800052a:	4603      	mov	r3, r0
 800052c:	4618      	mov	r0, r3
 800052e:	f001 fbf5 	bl	8001d1c <tft_init>
    setRotation(1); //Ajusta a orientação da tela
 8000532:	2001      	movs	r0, #1
 8000534:	f002 fea8 	bl	8003288 <setRotation>
    fillScreen(WHITE); //Preenche a tela em uma só cor
 8000538:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800053c:	f003 fc7a 	bl	8003e34 <fillScreen>
  /* USER CODE BEGIN WHILE */
  while (1)
 {


	  	  drawRGBBitmap(passo(), EixoY, usUm_48w70h , 48, 70);
 8000540:	f000 fa10 	bl	8000964 <passo>
 8000544:	4603      	mov	r3, r0
 8000546:	b218      	sxth	r0, r3
 8000548:	4b4a      	ldr	r3, [pc, #296]	; (8000674 <main+0x178>)
 800054a:	881b      	ldrh	r3, [r3, #0]
 800054c:	b219      	sxth	r1, r3
 800054e:	2346      	movs	r3, #70	; 0x46
 8000550:	9300      	str	r3, [sp, #0]
 8000552:	2330      	movs	r3, #48	; 0x30
 8000554:	4a48      	ldr	r2, [pc, #288]	; (8000678 <main+0x17c>)
 8000556:	f004 f897 	bl	8004688 <drawRGBBitmap>
	 	  drawRGBBitmap(EixoX, EixoY, usBranco_320w240h , 61, 100);
 800055a:	4b48      	ldr	r3, [pc, #288]	; (800067c <main+0x180>)
 800055c:	881b      	ldrh	r3, [r3, #0]
 800055e:	b218      	sxth	r0, r3
 8000560:	4b44      	ldr	r3, [pc, #272]	; (8000674 <main+0x178>)
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	b219      	sxth	r1, r3
 8000566:	2364      	movs	r3, #100	; 0x64
 8000568:	9300      	str	r3, [sp, #0]
 800056a:	233d      	movs	r3, #61	; 0x3d
 800056c:	4a44      	ldr	r2, [pc, #272]	; (8000680 <main+0x184>)
 800056e:	f004 f88b 	bl	8004688 <drawRGBBitmap>

	 	  drawRGBBitmap(passo(), EixoY, usDois_50w70h , 50, 70);
 8000572:	f000 f9f7 	bl	8000964 <passo>
 8000576:	4603      	mov	r3, r0
 8000578:	b218      	sxth	r0, r3
 800057a:	4b3e      	ldr	r3, [pc, #248]	; (8000674 <main+0x178>)
 800057c:	881b      	ldrh	r3, [r3, #0]
 800057e:	b219      	sxth	r1, r3
 8000580:	2346      	movs	r3, #70	; 0x46
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2332      	movs	r3, #50	; 0x32
 8000586:	4a3f      	ldr	r2, [pc, #252]	; (8000684 <main+0x188>)
 8000588:	f004 f87e 	bl	8004688 <drawRGBBitmap>
	 	  drawRGBBitmap(EixoX, EixoY, usBranco_320w240h , 61, 100);
 800058c:	4b3b      	ldr	r3, [pc, #236]	; (800067c <main+0x180>)
 800058e:	881b      	ldrh	r3, [r3, #0]
 8000590:	b218      	sxth	r0, r3
 8000592:	4b38      	ldr	r3, [pc, #224]	; (8000674 <main+0x178>)
 8000594:	881b      	ldrh	r3, [r3, #0]
 8000596:	b219      	sxth	r1, r3
 8000598:	2364      	movs	r3, #100	; 0x64
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	233d      	movs	r3, #61	; 0x3d
 800059e:	4a38      	ldr	r2, [pc, #224]	; (8000680 <main+0x184>)
 80005a0:	f004 f872 	bl	8004688 <drawRGBBitmap>

	 	  drawRGBBitmap(passo(), EixoY, usTres_37w70h, 37, 70);
 80005a4:	f000 f9de 	bl	8000964 <passo>
 80005a8:	4603      	mov	r3, r0
 80005aa:	b218      	sxth	r0, r3
 80005ac:	4b31      	ldr	r3, [pc, #196]	; (8000674 <main+0x178>)
 80005ae:	881b      	ldrh	r3, [r3, #0]
 80005b0:	b219      	sxth	r1, r3
 80005b2:	2346      	movs	r3, #70	; 0x46
 80005b4:	9300      	str	r3, [sp, #0]
 80005b6:	2325      	movs	r3, #37	; 0x25
 80005b8:	4a33      	ldr	r2, [pc, #204]	; (8000688 <main+0x18c>)
 80005ba:	f004 f865 	bl	8004688 <drawRGBBitmap>
	 	  drawRGBBitmap(EixoX, EixoY, usBranco_320w240h , 61, 100);
 80005be:	4b2f      	ldr	r3, [pc, #188]	; (800067c <main+0x180>)
 80005c0:	881b      	ldrh	r3, [r3, #0]
 80005c2:	b218      	sxth	r0, r3
 80005c4:	4b2b      	ldr	r3, [pc, #172]	; (8000674 <main+0x178>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	b219      	sxth	r1, r3
 80005ca:	2364      	movs	r3, #100	; 0x64
 80005cc:	9300      	str	r3, [sp, #0]
 80005ce:	233d      	movs	r3, #61	; 0x3d
 80005d0:	4a2b      	ldr	r2, [pc, #172]	; (8000680 <main+0x184>)
 80005d2:	f004 f859 	bl	8004688 <drawRGBBitmap>

	 	  drawRGBBitmap(passo(), EixoY, usQuatro_21w70h , 21, 70);
 80005d6:	f000 f9c5 	bl	8000964 <passo>
 80005da:	4603      	mov	r3, r0
 80005dc:	b218      	sxth	r0, r3
 80005de:	4b25      	ldr	r3, [pc, #148]	; (8000674 <main+0x178>)
 80005e0:	881b      	ldrh	r3, [r3, #0]
 80005e2:	b219      	sxth	r1, r3
 80005e4:	2346      	movs	r3, #70	; 0x46
 80005e6:	9300      	str	r3, [sp, #0]
 80005e8:	2315      	movs	r3, #21
 80005ea:	4a28      	ldr	r2, [pc, #160]	; (800068c <main+0x190>)
 80005ec:	f004 f84c 	bl	8004688 <drawRGBBitmap>
	 	  drawRGBBitmap(EixoX, EixoY,usBranco_320w240h , 61, 100);
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <main+0x180>)
 80005f2:	881b      	ldrh	r3, [r3, #0]
 80005f4:	b218      	sxth	r0, r3
 80005f6:	4b1f      	ldr	r3, [pc, #124]	; (8000674 <main+0x178>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	b219      	sxth	r1, r3
 80005fc:	2364      	movs	r3, #100	; 0x64
 80005fe:	9300      	str	r3, [sp, #0]
 8000600:	233d      	movs	r3, #61	; 0x3d
 8000602:	4a1f      	ldr	r2, [pc, #124]	; (8000680 <main+0x184>)
 8000604:	f004 f840 	bl	8004688 <drawRGBBitmap>

	 	  drawRGBBitmap(passo(), EixoY, usCinco_37w70h , 37, 70);
 8000608:	f000 f9ac 	bl	8000964 <passo>
 800060c:	4603      	mov	r3, r0
 800060e:	b218      	sxth	r0, r3
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <main+0x178>)
 8000612:	881b      	ldrh	r3, [r3, #0]
 8000614:	b219      	sxth	r1, r3
 8000616:	2346      	movs	r3, #70	; 0x46
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	2325      	movs	r3, #37	; 0x25
 800061c:	4a1c      	ldr	r2, [pc, #112]	; (8000690 <main+0x194>)
 800061e:	f004 f833 	bl	8004688 <drawRGBBitmap>
	 	  drawRGBBitmap(EixoX, EixoY, usBranco_320w240h , 61, 100);
 8000622:	4b16      	ldr	r3, [pc, #88]	; (800067c <main+0x180>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	b218      	sxth	r0, r3
 8000628:	4b12      	ldr	r3, [pc, #72]	; (8000674 <main+0x178>)
 800062a:	881b      	ldrh	r3, [r3, #0]
 800062c:	b219      	sxth	r1, r3
 800062e:	2364      	movs	r3, #100	; 0x64
 8000630:	9300      	str	r3, [sp, #0]
 8000632:	233d      	movs	r3, #61	; 0x3d
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <main+0x184>)
 8000636:	f004 f827 	bl	8004688 <drawRGBBitmap>

	 	  drawRGBBitmap(passo(), EixoY, usSeis_43w70h , 43, 70);
 800063a:	f000 f993 	bl	8000964 <passo>
 800063e:	4603      	mov	r3, r0
 8000640:	b218      	sxth	r0, r3
 8000642:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <main+0x178>)
 8000644:	881b      	ldrh	r3, [r3, #0]
 8000646:	b219      	sxth	r1, r3
 8000648:	2346      	movs	r3, #70	; 0x46
 800064a:	9300      	str	r3, [sp, #0]
 800064c:	232b      	movs	r3, #43	; 0x2b
 800064e:	4a11      	ldr	r2, [pc, #68]	; (8000694 <main+0x198>)
 8000650:	f004 f81a 	bl	8004688 <drawRGBBitmap>
	 	  drawRGBBitmap(EixoX, EixoY, usBranco_320w240h , 61, 100);
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <main+0x180>)
 8000656:	881b      	ldrh	r3, [r3, #0]
 8000658:	b218      	sxth	r0, r3
 800065a:	4b06      	ldr	r3, [pc, #24]	; (8000674 <main+0x178>)
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	b219      	sxth	r1, r3
 8000660:	2364      	movs	r3, #100	; 0x64
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	233d      	movs	r3, #61	; 0x3d
 8000666:	4a06      	ldr	r2, [pc, #24]	; (8000680 <main+0x184>)
 8000668:	f004 f80e 	bl	8004688 <drawRGBBitmap>
	  	  drawRGBBitmap(passo(), EixoY, usUm_48w70h , 48, 70);
 800066c:	e768      	b.n	8000540 <main+0x44>
 800066e:	bf00      	nop
 8000670:	2000003c 	.word	0x2000003c
 8000674:	20000000 	.word	0x20000000
 8000678:	08032aa4 	.word	0x08032aa4
 800067c:	20000030 	.word	0x20000030
 8000680:	08006bd4 	.word	0x08006bd4
 8000684:	0802d810 	.word	0x0802d810
 8000688:	08031668 	.word	0x08031668
 800068c:	0802f368 	.word	0x0802f368
 8000690:	0802c3d4 	.word	0x0802c3d4
 8000694:	0802fee4 	.word	0x0802fee4

08000698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b094      	sub	sp, #80	; 0x50
 800069c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069e:	f107 031c 	add.w	r3, r7, #28
 80006a2:	2234      	movs	r2, #52	; 0x34
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f005 fff0 	bl	800668c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006ac:	f107 0308 	add.w	r3, r7, #8
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]
 80006ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b2a      	ldr	r3, [pc, #168]	; (800076c <SystemClock_Config+0xd4>)
 80006c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c4:	4a29      	ldr	r2, [pc, #164]	; (800076c <SystemClock_Config+0xd4>)
 80006c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ca:	6413      	str	r3, [r2, #64]	; 0x40
 80006cc:	4b27      	ldr	r3, [pc, #156]	; (800076c <SystemClock_Config+0xd4>)
 80006ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006d8:	2300      	movs	r3, #0
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	4b24      	ldr	r3, [pc, #144]	; (8000770 <SystemClock_Config+0xd8>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006e4:	4a22      	ldr	r2, [pc, #136]	; (8000770 <SystemClock_Config+0xd8>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6013      	str	r3, [r2, #0]
 80006ec:	4b20      	ldr	r3, [pc, #128]	; (8000770 <SystemClock_Config+0xd8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006f8:	2302      	movs	r3, #2
 80006fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fc:	2301      	movs	r3, #1
 80006fe:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000700:	2310      	movs	r3, #16
 8000702:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000704:	2302      	movs	r3, #2
 8000706:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000708:	2300      	movs	r3, #0
 800070a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800070c:	2310      	movs	r3, #16
 800070e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000710:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000714:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000716:	2304      	movs	r3, #4
 8000718:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800071a:	2302      	movs	r3, #2
 800071c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800071e:	2302      	movs	r3, #2
 8000720:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4618      	mov	r0, r3
 8000728:	f004 ffa2 	bl	8005670 <HAL_RCC_OscConfig>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000732:	f000 f94d 	bl	80009d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000736:	230f      	movs	r3, #15
 8000738:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073a:	2302      	movs	r3, #2
 800073c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000746:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000748:	2300      	movs	r3, #0
 800074a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800074c:	f107 0308 	add.w	r3, r7, #8
 8000750:	2102      	movs	r1, #2
 8000752:	4618      	mov	r0, r3
 8000754:	f004 fcc0 	bl	80050d8 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075e:	f000 f937 	bl	80009d0 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000790:	4b1e      	ldr	r3, [pc, #120]	; (800080c <MX_TIM1_Init+0x98>)
 8000792:	4a1f      	ldr	r2, [pc, #124]	; (8000810 <MX_TIM1_Init+0x9c>)
 8000794:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8000796:	4b1d      	ldr	r3, [pc, #116]	; (800080c <MX_TIM1_Init+0x98>)
 8000798:	2253      	movs	r2, #83	; 0x53
 800079a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079c:	4b1b      	ldr	r3, [pc, #108]	; (800080c <MX_TIM1_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535-1;
 80007a2:	4b1a      	ldr	r3, [pc, #104]	; (800080c <MX_TIM1_Init+0x98>)
 80007a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80007a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_TIM1_Init+0x98>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b0:	4b16      	ldr	r3, [pc, #88]	; (800080c <MX_TIM1_Init+0x98>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_TIM1_Init+0x98>)
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007bc:	4813      	ldr	r0, [pc, #76]	; (800080c <MX_TIM1_Init+0x98>)
 80007be:	f005 f9f5 	bl	8005bac <HAL_TIM_Base_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007c8:	f000 f902 	bl	80009d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4619      	mov	r1, r3
 80007d8:	480c      	ldr	r0, [pc, #48]	; (800080c <MX_TIM1_Init+0x98>)
 80007da:	f005 fa9f 	bl	8005d1c <HAL_TIM_ConfigClockSource>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007e4:	f000 f8f4 	bl	80009d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e8:	2300      	movs	r3, #0
 80007ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ec:	2300      	movs	r3, #0
 80007ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007f0:	463b      	mov	r3, r7
 80007f2:	4619      	mov	r1, r3
 80007f4:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_TIM1_Init+0x98>)
 80007f6:	f005 fc93 	bl	8006120 <HAL_TIMEx_MasterConfigSynchronization>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000800:	f000 f8e6 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	3718      	adds	r7, #24
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	2000003c 	.word	0x2000003c
 8000810:	40010000 	.word	0x40010000

08000814 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800081a:	4a12      	ldr	r2, [pc, #72]	; (8000864 <MX_USART2_UART_Init+0x50>)
 800081c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000820:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000824:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000826:	4b0e      	ldr	r3, [pc, #56]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800082c:	4b0c      	ldr	r3, [pc, #48]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800082e:	2200      	movs	r2, #0
 8000830:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000832:	4b0b      	ldr	r3, [pc, #44]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000838:	4b09      	ldr	r3, [pc, #36]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800083a:	220c      	movs	r2, #12
 800083c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800083e:	4b08      	ldr	r3, [pc, #32]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000844:	4b06      	ldr	r3, [pc, #24]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 8000846:	2200      	movs	r2, #0
 8000848:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800084a:	4805      	ldr	r0, [pc, #20]	; (8000860 <MX_USART2_UART_Init+0x4c>)
 800084c:	f005 fce4 	bl	8006218 <HAL_UART_Init>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000856:	f000 f8bb 	bl	80009d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000084 	.word	0x20000084
 8000864:	40004400 	.word	0x40004400

08000868 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b08a      	sub	sp, #40	; 0x28
 800086c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086e:	f107 0314 	add.w	r3, r7, #20
 8000872:	2200      	movs	r2, #0
 8000874:	601a      	str	r2, [r3, #0]
 8000876:	605a      	str	r2, [r3, #4]
 8000878:	609a      	str	r2, [r3, #8]
 800087a:	60da      	str	r2, [r3, #12]
 800087c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b35      	ldr	r3, [pc, #212]	; (8000958 <MX_GPIO_Init+0xf0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a34      	ldr	r2, [pc, #208]	; (8000958 <MX_GPIO_Init+0xf0>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b32      	ldr	r3, [pc, #200]	; (8000958 <MX_GPIO_Init+0xf0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60fb      	str	r3, [r7, #12]
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a2d      	ldr	r2, [pc, #180]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
 80008ba:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a26      	ldr	r2, [pc, #152]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008c0:	f043 0301 	orr.w	r3, r3, #1
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0301 	and.w	r3, r3, #1
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	607b      	str	r3, [r7, #4]
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a1f      	ldr	r2, [pc, #124]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008dc:	f043 0302 	orr.w	r3, r3, #2
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_GPIO_Init+0xf0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0302 	and.w	r3, r3, #2
 80008ea:	607b      	str	r3, [r7, #4]
 80008ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2120      	movs	r1, #32
 80008f2:	481a      	ldr	r0, [pc, #104]	; (800095c <MX_GPIO_Init+0xf4>)
 80008f4:	f004 fbbe 	bl	8005074 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Down_Pin Up_Pin */
  GPIO_InitStruct.Pin = Down_Pin|Up_Pin;
 80008f8:	230c      	movs	r3, #12
 80008fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008fc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000902:	2301      	movs	r3, #1
 8000904:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	4619      	mov	r1, r3
 800090c:	4814      	ldr	r0, [pc, #80]	; (8000960 <MX_GPIO_Init+0xf8>)
 800090e:	f004 fa1d 	bl	8004d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000912:	2320      	movs	r3, #32
 8000914:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	4619      	mov	r1, r3
 8000928:	480c      	ldr	r0, [pc, #48]	; (800095c <MX_GPIO_Init+0xf4>)
 800092a:	f004 fa0f 	bl	8004d4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800092e:	2200      	movs	r2, #0
 8000930:	2100      	movs	r1, #0
 8000932:	2008      	movs	r0, #8
 8000934:	f004 f9d3 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000938:	2008      	movs	r0, #8
 800093a:	f004 f9ec 	bl	8004d16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2009      	movs	r0, #9
 8000944:	f004 f9cb 	bl	8004cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000948:	2009      	movs	r0, #9
 800094a:	f004 f9e4 	bl	8004d16 <HAL_NVIC_EnableIRQ>

}
 800094e:	bf00      	nop
 8000950:	3728      	adds	r7, #40	; 0x28
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800
 800095c:	40020000 	.word	0x40020000
 8000960:	40020800 	.word	0x40020800

08000964 <passo>:

/* Função para fazer o corredor se deslocar na tela
*/

uint16_t passo()
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
	if (EixoX >= 320)
 8000968:	4b0b      	ldr	r3, [pc, #44]	; (8000998 <passo+0x34>)
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000970:	d305      	bcc.n	800097e <passo+0x1a>
	{
		EixoX = 0;
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <passo+0x34>)
 8000974:	2200      	movs	r2, #0
 8000976:	801a      	strh	r2, [r3, #0]
		return EixoX;
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <passo+0x34>)
 800097a:	881b      	ldrh	r3, [r3, #0]
 800097c:	e007      	b.n	800098e <passo+0x2a>
	}
	else
	{
		EixoX +=20;
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <passo+0x34>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	3314      	adds	r3, #20
 8000984:	b29a      	uxth	r2, r3
 8000986:	4b04      	ldr	r3, [pc, #16]	; (8000998 <passo+0x34>)
 8000988:	801a      	strh	r2, [r3, #0]
		return EixoX;
 800098a:	4b03      	ldr	r3, [pc, #12]	; (8000998 <passo+0x34>)
 800098c:	881b      	ldrh	r3, [r3, #0]
	}

}
 800098e:	4618      	mov	r0, r3
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr
 8000998:	20000030 	.word	0x20000030

0800099c <HAL_GPIO_EXTI_Callback>:

}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	80fb      	strh	r3, [r7, #6]


	if(GPIO_Pin == 0x4) EixoY = 200;
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d103      	bne.n	80009b4 <HAL_GPIO_EXTI_Callback+0x18>
 80009ac:	4b07      	ldr	r3, [pc, #28]	; (80009cc <HAL_GPIO_EXTI_Callback+0x30>)
 80009ae:	22c8      	movs	r2, #200	; 0xc8
 80009b0:	801a      	strh	r2, [r3, #0]

	else if (GPIO_Pin == 0x8) EixoY = 100;


}
 80009b2:	e005      	b.n	80009c0 <HAL_GPIO_EXTI_Callback+0x24>
	else if (GPIO_Pin == 0x8) EixoY = 100;
 80009b4:	88fb      	ldrh	r3, [r7, #6]
 80009b6:	2b08      	cmp	r3, #8
 80009b8:	d102      	bne.n	80009c0 <HAL_GPIO_EXTI_Callback+0x24>
 80009ba:	4b04      	ldr	r3, [pc, #16]	; (80009cc <HAL_GPIO_EXTI_Callback+0x30>)
 80009bc:	2264      	movs	r2, #100	; 0x64
 80009be:	801a      	strh	r2, [r3, #0]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	20000000 	.word	0x20000000

080009d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d4:	b672      	cpsid	i
}
 80009d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <Error_Handler+0x8>
	...

080009dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b10      	ldr	r3, [pc, #64]	; (8000a28 <HAL_MspInit+0x4c>)
 80009e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009ea:	4a0f      	ldr	r2, [pc, #60]	; (8000a28 <HAL_MspInit+0x4c>)
 80009ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f0:	6453      	str	r3, [r2, #68]	; 0x44
 80009f2:	4b0d      	ldr	r3, [pc, #52]	; (8000a28 <HAL_MspInit+0x4c>)
 80009f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	603b      	str	r3, [r7, #0]
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x4c>)
 8000a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a1a:	2007      	movs	r0, #7
 8000a1c:	f004 f954 	bl	8004cc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800

08000a2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <HAL_TIM_Base_MspInit+0x3c>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d10d      	bne.n	8000a5a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
 8000a42:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <HAL_TIM_Base_MspInit+0x40>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <HAL_TIM_Base_MspInit+0x40>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4e:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <HAL_TIM_Base_MspInit+0x40>)
 8000a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	60fb      	str	r3, [r7, #12]
 8000a58:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a5a:	bf00      	nop
 8000a5c:	3714      	adds	r7, #20
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop
 8000a68:	40010000 	.word	0x40010000
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a19      	ldr	r2, [pc, #100]	; (8000af4 <HAL_UART_MspInit+0x84>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d12b      	bne.n	8000aea <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b18      	ldr	r3, [pc, #96]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a17      	ldr	r2, [pc, #92]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000a9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a10      	ldr	r2, [pc, #64]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_UART_MspInit+0x88>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000aca:	230c      	movs	r3, #12
 8000acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad6:	2303      	movs	r3, #3
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ada:	2307      	movs	r3, #7
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ade:	f107 0314 	add.w	r3, r7, #20
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4805      	ldr	r0, [pc, #20]	; (8000afc <HAL_UART_MspInit+0x8c>)
 8000ae6:	f004 f931 	bl	8004d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000aea:	bf00      	nop
 8000aec:	3728      	adds	r7, #40	; 0x28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	40004400 	.word	0x40004400
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40020000 	.word	0x40020000

08000b00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b04:	e7fe      	b.n	8000b04 <NMI_Handler+0x4>

08000b06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b06:	b480      	push	{r7}
 8000b08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b0a:	e7fe      	b.n	8000b0a <HardFault_Handler+0x4>

08000b0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b10:	e7fe      	b.n	8000b10 <MemManage_Handler+0x4>

08000b12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b12:	b480      	push	{r7}
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b16:	e7fe      	b.n	8000b16 <BusFault_Handler+0x4>

08000b18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <UsageFault_Handler+0x4>

08000b1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b1e:	b480      	push	{r7}
 8000b20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr

08000b2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b30:	bf00      	nop
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr

08000b3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b4c:	f003 ffa8 	bl	8004aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}

08000b54 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000b58:	2004      	movs	r0, #4
 8000b5a:	f004 faa5 	bl	80050a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line 3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000b62:	b580      	push	{r7, lr}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000b66:	2008      	movs	r0, #8
 8000b68:	f004 fa9e 	bl	80050a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <PIN_LOW>:

/********************************************** NO CHNAGES AFTER THIS ************************************************/


void PIN_LOW (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8000ba0:	887b      	ldrh	r3, [r7, #2]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	6878      	ldr	r0, [r7, #4]
 8000ba8:	f004 fa64 	bl	8005074 <HAL_GPIO_WritePin>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <PIN_HIGH>:

void PIN_HIGH (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	6878      	ldr	r0, [r7, #4]
 8000bc8:	f004 fa54 	bl	8005074 <HAL_GPIO_WritePin>
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <PIN_INPUT>:

void PIN_INPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b088      	sub	sp, #32
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000be0:	887b      	ldrh	r3, [r7, #2]
 8000be2:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	617b      	str	r3, [r7, #20]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	6878      	ldr	r0, [r7, #4]
 8000bf4:	f004 f8aa 	bl	8004d4c <HAL_GPIO_Init>
}
 8000bf8:	bf00      	nop
 8000bfa:	3720      	adds	r7, #32
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}

08000c00 <PIN_OUTPUT>:

void PIN_OUTPUT (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	460b      	mov	r3, r1
 8000c0a:	807b      	strh	r3, [r7, #2]
	 GPIO_InitTypeDef GPIO_InitStruct;

	  GPIO_InitStruct.Pin = GPIO_Pin;
 8000c0c:	887b      	ldrh	r3, [r7, #2]
 8000c0e:	60fb      	str	r3, [r7, #12]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	61bb      	str	r3, [r7, #24]
	  HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	4619      	mov	r1, r3
 8000c22:	6878      	ldr	r0, [r7, #4]
 8000c24:	f004 f892 	bl	8004d4c <HAL_GPIO_Init>
}
 8000c28:	bf00      	nop
 8000c2a:	3720      	adds	r7, #32
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <width>:

uint16_t _width    = WIDTH;
uint16_t _height   = HEIGHT;

uint16_t width(void)
{ return _width; }
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	4b03      	ldr	r3, [pc, #12]	; (8000c44 <width+0x14>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000008 	.word	0x20000008

08000c48 <height>:

uint16_t height(void)
{ return _height; }
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <height+0x14>)
 8000c4e:	881b      	ldrh	r3, [r3, #0]
 8000c50:	4618      	mov	r0, r3
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	2000000a 	.word	0x2000000a

08000c60 <color565_to_555>:
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h);

void setReadDir (void);
void setWriteDir (void);
static uint8_t done_reset, is8347, is555, is9797;
static uint16_t color565_to_555(uint16_t color) {
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	4603      	mov	r3, r0
 8000c68:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x1F) << 1) | ((color & 0x01));  //lose Green LSB, extend Blue LSB
 8000c6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c6e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000c72:	b21a      	sxth	r2, r3
 8000c74:	88fb      	ldrh	r3, [r7, #6]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	b21b      	sxth	r3, r3
 8000c7a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8000c7e:	b21b      	sxth	r3, r3
 8000c80:	4313      	orrs	r3, r2
 8000c82:	b21a      	sxth	r2, r3
 8000c84:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000c88:	f003 0301 	and.w	r3, r3, #1
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	b29b      	uxth	r3, r3
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <color555_to_565>:
static uint16_t color555_to_565(uint16_t color) {
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	80fb      	strh	r3, [r7, #6]
    return (color & 0xFFC0) | ((color & 0x0400) >> 5) | ((color & 0x3F) >> 1); //extend Green LSB
 8000caa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000cae:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000cb2:	b21a      	sxth	r2, r3
 8000cb4:	88fb      	ldrh	r3, [r7, #6]
 8000cb6:	115b      	asrs	r3, r3, #5
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	f003 0320 	and.w	r3, r3, #32
 8000cbe:	b21b      	sxth	r3, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	b21a      	sxth	r2, r3
 8000cc4:	88fb      	ldrh	r3, [r7, #6]
 8000cc6:	105b      	asrs	r3, r3, #1
 8000cc8:	b21b      	sxth	r3, r3
 8000cca:	f003 031f 	and.w	r3, r3, #31
 8000cce:	b21b      	sxth	r3, r3
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	b29b      	uxth	r3, r3
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr

08000ce2 <color565_to_r>:
static uint8_t color565_to_r(uint16_t color) {
 8000ce2:	b480      	push	{r7}
 8000ce4:	b083      	sub	sp, #12
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	80fb      	strh	r3, [r7, #6]
    return ((color & 0xF800) >> 8);  // transform to rrrrrxxx
 8000cec:	88fb      	ldrh	r3, [r7, #6]
 8000cee:	121b      	asrs	r3, r3, #8
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	f023 0307 	bic.w	r3, r3, #7
 8000cf6:	b2db      	uxtb	r3, r3
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <color565_to_g>:
static uint8_t color565_to_g(uint16_t color) {
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x07E0) >> 3);  // transform to ggggggxx
 8000d0e:	88fb      	ldrh	r3, [r7, #6]
 8000d10:	10db      	asrs	r3, r3, #3
 8000d12:	b2db      	uxtb	r3, r3
 8000d14:	f023 0303 	bic.w	r3, r3, #3
 8000d18:	b2db      	uxtb	r3, r3
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr

08000d26 <color565_to_b>:
static uint8_t color565_to_b(uint16_t color) {
 8000d26:	b480      	push	{r7}
 8000d28:	b083      	sub	sp, #12
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	80fb      	strh	r3, [r7, #6]
    return ((color & 0x001F) << 3);  // transform to bbbbbxxx
 8000d30:	88fb      	ldrh	r3, [r7, #6]
 8000d32:	00db      	lsls	r3, r3, #3
 8000d34:	b2db      	uxtb	r3, r3
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	370c      	adds	r7, #12
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <color565>:

uint16_t color565(uint8_t r, uint8_t g, uint8_t b) { return ((r & 0xF8) << 8) | ((g & 0xFC) << 3) | ((b & 0xF8) >> 3); }
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	71bb      	strb	r3, [r7, #6]
 8000d50:	4613      	mov	r3, r2
 8000d52:	717b      	strb	r3, [r7, #5]
 8000d54:	79fb      	ldrb	r3, [r7, #7]
 8000d56:	021b      	lsls	r3, r3, #8
 8000d58:	b21b      	sxth	r3, r3
 8000d5a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8000d5e:	f023 0307 	bic.w	r3, r3, #7
 8000d62:	b21a      	sxth	r2, r3
 8000d64:	79bb      	ldrb	r3, [r7, #6]
 8000d66:	00db      	lsls	r3, r3, #3
 8000d68:	b21b      	sxth	r3, r3
 8000d6a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8000d6e:	b21b      	sxth	r3, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	b21a      	sxth	r2, r3
 8000d74:	797b      	ldrb	r3, [r7, #5]
 8000d76:	08db      	lsrs	r3, r3, #3
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	b21b      	sxth	r3, r3
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <readPixel>:
uint16_t readPixel(int16_t x, int16_t y) { uint16_t color; readGRAM(x, y, &color, 1, 1); return color; }
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b086      	sub	sp, #24
 8000d92:	af02      	add	r7, sp, #8
 8000d94:	4603      	mov	r3, r0
 8000d96:	460a      	mov	r2, r1
 8000d98:	80fb      	strh	r3, [r7, #6]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	80bb      	strh	r3, [r7, #4]
 8000d9e:	f107 020e 	add.w	r2, r7, #14
 8000da2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000da6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000daa:	2301      	movs	r3, #1
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2301      	movs	r3, #1
 8000db0:	f001 fc7a 	bl	80026a8 <readGRAM>
 8000db4:	89fb      	ldrh	r3, [r7, #14]
 8000db6:	4618      	mov	r0, r3
 8000db8:	3710      	adds	r7, #16
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <WriteCmdData>:

static void write24(uint16_t color);

static void writecmddata(uint16_t cmd, uint16_t dat);

void WriteCmdData(uint16_t cmd, uint16_t dat) { writecmddata(cmd, dat); }
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	460a      	mov	r2, r1
 8000dc8:	80fb      	strh	r3, [r7, #6]
 8000dca:	4613      	mov	r3, r2
 8000dcc:	80bb      	strh	r3, [r7, #4]
 8000dce:	88ba      	ldrh	r2, [r7, #4]
 8000dd0:	88fb      	ldrh	r3, [r7, #6]
 8000dd2:	4611      	mov	r1, r2
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f973 	bl	80010c0 <writecmddata>
 8000dda:	bf00      	nop
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <pushCommand>:

static void init_table(const void *table, int16_t size);

static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block);

void pushCommand(uint16_t cmd, uint8_t * block, int8_t N) { WriteCmdParamN(cmd, N, block); }
 8000de2:	b580      	push	{r7, lr}
 8000de4:	b082      	sub	sp, #8
 8000de6:	af00      	add	r7, sp, #0
 8000de8:	4603      	mov	r3, r0
 8000dea:	6039      	str	r1, [r7, #0]
 8000dec:	80fb      	strh	r3, [r7, #6]
 8000dee:	4613      	mov	r3, r2
 8000df0:	717b      	strb	r3, [r7, #5]
 8000df2:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f000 fab6 	bl	800136c <WriteCmdParamN>
 8000e00:	bf00      	nop
 8000e02:	3708      	adds	r7, #8
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <setReadDir>:
uint16_t _lcd_ID, _lcd_rev, _lcd_madctl, _lcd_drivOut, _MC, _MP, _MW, _SC, _EC, _SP, _EP;

//extern GFXfont *gfxFont;

void setReadDir (void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
	PIN_INPUT(D0_PORT, D0_PIN);
 8000e0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e10:	4811      	ldr	r0, [pc, #68]	; (8000e58 <setReadDir+0x50>)
 8000e12:	f7ff fedf 	bl	8000bd4 <PIN_INPUT>
	PIN_INPUT(D1_PORT, D1_PIN);
 8000e16:	2180      	movs	r1, #128	; 0x80
 8000e18:	4810      	ldr	r0, [pc, #64]	; (8000e5c <setReadDir+0x54>)
 8000e1a:	f7ff fedb 	bl	8000bd4 <PIN_INPUT>
	PIN_INPUT(D2_PORT, D2_PIN);
 8000e1e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e22:	480d      	ldr	r0, [pc, #52]	; (8000e58 <setReadDir+0x50>)
 8000e24:	f7ff fed6 	bl	8000bd4 <PIN_INPUT>
	PIN_INPUT(D3_PORT, D3_PIN);
 8000e28:	2108      	movs	r1, #8
 8000e2a:	480d      	ldr	r0, [pc, #52]	; (8000e60 <setReadDir+0x58>)
 8000e2c:	f7ff fed2 	bl	8000bd4 <PIN_INPUT>
	PIN_INPUT(D4_PORT, D4_PIN);
 8000e30:	2120      	movs	r1, #32
 8000e32:	480b      	ldr	r0, [pc, #44]	; (8000e60 <setReadDir+0x58>)
 8000e34:	f7ff fece 	bl	8000bd4 <PIN_INPUT>
	PIN_INPUT(D5_PORT, D5_PIN);
 8000e38:	2110      	movs	r1, #16
 8000e3a:	4809      	ldr	r0, [pc, #36]	; (8000e60 <setReadDir+0x58>)
 8000e3c:	f7ff feca 	bl	8000bd4 <PIN_INPUT>
	PIN_INPUT(D6_PORT, D6_PIN);
 8000e40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e44:	4806      	ldr	r0, [pc, #24]	; (8000e60 <setReadDir+0x58>)
 8000e46:	f7ff fec5 	bl	8000bd4 <PIN_INPUT>
	PIN_INPUT(D7_PORT, D7_PIN);
 8000e4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e4e:	4802      	ldr	r0, [pc, #8]	; (8000e58 <setReadDir+0x50>)
 8000e50:	f7ff fec0 	bl	8000bd4 <PIN_INPUT>
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40020000 	.word	0x40020000
 8000e5c:	40020800 	.word	0x40020800
 8000e60:	40020400 	.word	0x40020400

08000e64 <setWriteDir>:

void setWriteDir (void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
	PIN_OUTPUT(D0_PORT, D0_PIN);
 8000e68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e6c:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <setWriteDir+0x50>)
 8000e6e:	f7ff fec7 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8000e72:	2180      	movs	r1, #128	; 0x80
 8000e74:	4810      	ldr	r0, [pc, #64]	; (8000eb8 <setWriteDir+0x54>)
 8000e76:	f7ff fec3 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8000e7a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e7e:	480d      	ldr	r0, [pc, #52]	; (8000eb4 <setWriteDir+0x50>)
 8000e80:	f7ff febe 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8000e84:	2108      	movs	r1, #8
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <setWriteDir+0x58>)
 8000e88:	f7ff feba 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 8000e8c:	2120      	movs	r1, #32
 8000e8e:	480b      	ldr	r0, [pc, #44]	; (8000ebc <setWriteDir+0x58>)
 8000e90:	f7ff feb6 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8000e94:	2110      	movs	r1, #16
 8000e96:	4809      	ldr	r0, [pc, #36]	; (8000ebc <setWriteDir+0x58>)
 8000e98:	f7ff feb2 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 8000e9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea0:	4806      	ldr	r0, [pc, #24]	; (8000ebc <setWriteDir+0x58>)
 8000ea2:	f7ff fead 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8000ea6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eaa:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <setWriteDir+0x50>)
 8000eac:	f7ff fea8 	bl	8000c00 <PIN_OUTPUT>
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020800 	.word	0x40020800
 8000ebc:	40020400 	.word	0x40020400

08000ec0 <write24>:
    CS_IDLE;
}


static void write24(uint16_t color)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	80fb      	strh	r3, [r7, #6]
    uint8_t r = color565_to_r(color);
 8000eca:	88fb      	ldrh	r3, [r7, #6]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff ff08 	bl	8000ce2 <color565_to_r>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	73fb      	strb	r3, [r7, #15]
    uint8_t g = color565_to_g(color);
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff13 	bl	8000d04 <color565_to_g>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	73bb      	strb	r3, [r7, #14]
    uint8_t b = color565_to_b(color);
 8000ee2:	88fb      	ldrh	r3, [r7, #6]
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff ff1e 	bl	8000d26 <color565_to_b>
 8000eea:	4603      	mov	r3, r0
 8000eec:	737b      	strb	r3, [r7, #13]
    write8(r);
 8000eee:	4b71      	ldr	r3, [pc, #452]	; (80010b4 <write24+0x1f4>)
 8000ef0:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000ef4:	619a      	str	r2, [r3, #24]
 8000ef6:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <write24+0x1f8>)
 8000ef8:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000efc:	619a      	str	r2, [r3, #24]
 8000efe:	4b6f      	ldr	r3, [pc, #444]	; (80010bc <write24+0x1fc>)
 8000f00:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f04:	619a      	str	r2, [r3, #24]
 8000f06:	7bfb      	ldrb	r3, [r7, #15]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	021b      	lsls	r3, r3, #8
 8000f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f16:	431a      	orrs	r2, r3
 8000f18:	7bfb      	ldrb	r3, [r7, #15]
 8000f1a:	025b      	lsls	r3, r3, #9
 8000f1c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f20:	431a      	orrs	r2, r3
 8000f22:	4b64      	ldr	r3, [pc, #400]	; (80010b4 <write24+0x1f4>)
 8000f24:	619a      	str	r2, [r3, #24]
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	011b      	lsls	r3, r3, #4
 8000f2a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000f2e:	7bfb      	ldrb	r3, [r7, #15]
 8000f30:	105b      	asrs	r3, r3, #1
 8000f32:	f003 0310 	and.w	r3, r3, #16
 8000f36:	431a      	orrs	r2, r3
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	f003 0320 	and.w	r3, r3, #32
 8000f40:	431a      	orrs	r2, r3
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	f003 0308 	and.w	r3, r3, #8
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	4b5b      	ldr	r3, [pc, #364]	; (80010b8 <write24+0x1f8>)
 8000f4c:	619a      	str	r2, [r3, #24]
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	019b      	lsls	r3, r3, #6
 8000f52:	4a5a      	ldr	r2, [pc, #360]	; (80010bc <write24+0x1fc>)
 8000f54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f58:	6193      	str	r3, [r2, #24]
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	4855      	ldr	r0, [pc, #340]	; (80010b4 <write24+0x1f4>)
 8000f5e:	f7ff fe19 	bl	8000b94 <PIN_LOW>
 8000f62:	2102      	movs	r1, #2
 8000f64:	4853      	ldr	r0, [pc, #332]	; (80010b4 <write24+0x1f4>)
 8000f66:	f7ff fe15 	bl	8000b94 <PIN_LOW>
 8000f6a:	2102      	movs	r1, #2
 8000f6c:	4851      	ldr	r0, [pc, #324]	; (80010b4 <write24+0x1f4>)
 8000f6e:	f7ff fe11 	bl	8000b94 <PIN_LOW>
 8000f72:	2102      	movs	r1, #2
 8000f74:	484f      	ldr	r0, [pc, #316]	; (80010b4 <write24+0x1f4>)
 8000f76:	f7ff fe1d 	bl	8000bb4 <PIN_HIGH>
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	484d      	ldr	r0, [pc, #308]	; (80010b4 <write24+0x1f4>)
 8000f7e:	f7ff fe19 	bl	8000bb4 <PIN_HIGH>
    write8(g);
 8000f82:	4b4c      	ldr	r3, [pc, #304]	; (80010b4 <write24+0x1f4>)
 8000f84:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8000f88:	619a      	str	r2, [r3, #24]
 8000f8a:	4b4b      	ldr	r3, [pc, #300]	; (80010b8 <write24+0x1f8>)
 8000f8c:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8000f90:	619a      	str	r2, [r3, #24]
 8000f92:	4b4a      	ldr	r3, [pc, #296]	; (80010bc <write24+0x1fc>)
 8000f94:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f98:	619a      	str	r2, [r3, #24]
 8000f9a:	7bbb      	ldrb	r3, [r7, #14]
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8000fa2:	7bbb      	ldrb	r3, [r7, #14]
 8000fa4:	021b      	lsls	r3, r3, #8
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000faa:	431a      	orrs	r2, r3
 8000fac:	7bbb      	ldrb	r3, [r7, #14]
 8000fae:	025b      	lsls	r3, r3, #9
 8000fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	4b3f      	ldr	r3, [pc, #252]	; (80010b4 <write24+0x1f4>)
 8000fb8:	619a      	str	r2, [r3, #24]
 8000fba:	7bbb      	ldrb	r3, [r7, #14]
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8000fc2:	7bbb      	ldrb	r3, [r7, #14]
 8000fc4:	105b      	asrs	r3, r3, #1
 8000fc6:	f003 0310 	and.w	r3, r3, #16
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	7bbb      	ldrb	r3, [r7, #14]
 8000fce:	005b      	lsls	r3, r3, #1
 8000fd0:	f003 0320 	and.w	r3, r3, #32
 8000fd4:	431a      	orrs	r2, r3
 8000fd6:	7bbb      	ldrb	r3, [r7, #14]
 8000fd8:	f003 0308 	and.w	r3, r3, #8
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <write24+0x1f8>)
 8000fe0:	619a      	str	r2, [r3, #24]
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	019b      	lsls	r3, r3, #6
 8000fe6:	4a35      	ldr	r2, [pc, #212]	; (80010bc <write24+0x1fc>)
 8000fe8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fec:	6193      	str	r3, [r2, #24]
 8000fee:	2102      	movs	r1, #2
 8000ff0:	4830      	ldr	r0, [pc, #192]	; (80010b4 <write24+0x1f4>)
 8000ff2:	f7ff fdcf 	bl	8000b94 <PIN_LOW>
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	482e      	ldr	r0, [pc, #184]	; (80010b4 <write24+0x1f4>)
 8000ffa:	f7ff fdcb 	bl	8000b94 <PIN_LOW>
 8000ffe:	2102      	movs	r1, #2
 8001000:	482c      	ldr	r0, [pc, #176]	; (80010b4 <write24+0x1f4>)
 8001002:	f7ff fdc7 	bl	8000b94 <PIN_LOW>
 8001006:	2102      	movs	r1, #2
 8001008:	482a      	ldr	r0, [pc, #168]	; (80010b4 <write24+0x1f4>)
 800100a:	f7ff fdd3 	bl	8000bb4 <PIN_HIGH>
 800100e:	2102      	movs	r1, #2
 8001010:	4828      	ldr	r0, [pc, #160]	; (80010b4 <write24+0x1f4>)
 8001012:	f7ff fdcf 	bl	8000bb4 <PIN_HIGH>
    write8(b);
 8001016:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <write24+0x1f4>)
 8001018:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800101c:	619a      	str	r2, [r3, #24]
 800101e:	4b26      	ldr	r3, [pc, #152]	; (80010b8 <write24+0x1f8>)
 8001020:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001024:	619a      	str	r2, [r3, #24]
 8001026:	4b25      	ldr	r3, [pc, #148]	; (80010bc <write24+0x1fc>)
 8001028:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800102c:	619a      	str	r2, [r3, #24]
 800102e:	7b7b      	ldrb	r3, [r7, #13]
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001036:	7b7b      	ldrb	r3, [r7, #13]
 8001038:	021b      	lsls	r3, r3, #8
 800103a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800103e:	431a      	orrs	r2, r3
 8001040:	7b7b      	ldrb	r3, [r7, #13]
 8001042:	025b      	lsls	r3, r3, #9
 8001044:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001048:	431a      	orrs	r2, r3
 800104a:	4b1a      	ldr	r3, [pc, #104]	; (80010b4 <write24+0x1f4>)
 800104c:	619a      	str	r2, [r3, #24]
 800104e:	7b7b      	ldrb	r3, [r7, #13]
 8001050:	011b      	lsls	r3, r3, #4
 8001052:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001056:	7b7b      	ldrb	r3, [r7, #13]
 8001058:	105b      	asrs	r3, r3, #1
 800105a:	f003 0310 	and.w	r3, r3, #16
 800105e:	431a      	orrs	r2, r3
 8001060:	7b7b      	ldrb	r3, [r7, #13]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	f003 0320 	and.w	r3, r3, #32
 8001068:	431a      	orrs	r2, r3
 800106a:	7b7b      	ldrb	r3, [r7, #13]
 800106c:	f003 0308 	and.w	r3, r3, #8
 8001070:	431a      	orrs	r2, r3
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <write24+0x1f8>)
 8001074:	619a      	str	r2, [r3, #24]
 8001076:	7b7b      	ldrb	r3, [r7, #13]
 8001078:	019b      	lsls	r3, r3, #6
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <write24+0x1fc>)
 800107c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001080:	6193      	str	r3, [r2, #24]
 8001082:	2102      	movs	r1, #2
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <write24+0x1f4>)
 8001086:	f7ff fd85 	bl	8000b94 <PIN_LOW>
 800108a:	2102      	movs	r1, #2
 800108c:	4809      	ldr	r0, [pc, #36]	; (80010b4 <write24+0x1f4>)
 800108e:	f7ff fd81 	bl	8000b94 <PIN_LOW>
 8001092:	2102      	movs	r1, #2
 8001094:	4807      	ldr	r0, [pc, #28]	; (80010b4 <write24+0x1f4>)
 8001096:	f7ff fd7d 	bl	8000b94 <PIN_LOW>
 800109a:	2102      	movs	r1, #2
 800109c:	4805      	ldr	r0, [pc, #20]	; (80010b4 <write24+0x1f4>)
 800109e:	f7ff fd89 	bl	8000bb4 <PIN_HIGH>
 80010a2:	2102      	movs	r1, #2
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <write24+0x1f4>)
 80010a6:	f7ff fd85 	bl	8000bb4 <PIN_HIGH>
}
 80010aa:	bf00      	nop
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40020000 	.word	0x40020000
 80010b8:	40020400 	.word	0x40020400
 80010bc:	40020800 	.word	0x40020800

080010c0 <writecmddata>:


static void writecmddata(uint16_t cmd, uint16_t dat)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	460a      	mov	r2, r1
 80010ca:	80fb      	strh	r3, [r7, #6]
 80010cc:	4613      	mov	r3, r2
 80010ce:	80bb      	strh	r3, [r7, #4]
    CS_ACTIVE;
 80010d0:	2101      	movs	r1, #1
 80010d2:	48a3      	ldr	r0, [pc, #652]	; (8001360 <writecmddata+0x2a0>)
 80010d4:	f7ff fd5e 	bl	8000b94 <PIN_LOW>
    WriteCmd(cmd);
 80010d8:	2110      	movs	r1, #16
 80010da:	48a2      	ldr	r0, [pc, #648]	; (8001364 <writecmddata+0x2a4>)
 80010dc:	f7ff fd5a 	bl	8000b94 <PIN_LOW>
 80010e0:	88fb      	ldrh	r3, [r7, #6]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	88fb      	ldrh	r3, [r7, #6]
 80010ea:	73bb      	strb	r3, [r7, #14]
 80010ec:	4b9d      	ldr	r3, [pc, #628]	; (8001364 <writecmddata+0x2a4>)
 80010ee:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80010f2:	619a      	str	r2, [r3, #24]
 80010f4:	4b9a      	ldr	r3, [pc, #616]	; (8001360 <writecmddata+0x2a0>)
 80010f6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80010fa:	619a      	str	r2, [r3, #24]
 80010fc:	4b9a      	ldr	r3, [pc, #616]	; (8001368 <writecmddata+0x2a8>)
 80010fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001102:	619a      	str	r2, [r3, #24]
 8001104:	7bfb      	ldrb	r3, [r7, #15]
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800110c:	7bfb      	ldrb	r3, [r7, #15]
 800110e:	021b      	lsls	r3, r3, #8
 8001110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001114:	431a      	orrs	r2, r3
 8001116:	7bfb      	ldrb	r3, [r7, #15]
 8001118:	025b      	lsls	r3, r3, #9
 800111a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800111e:	431a      	orrs	r2, r3
 8001120:	4b90      	ldr	r3, [pc, #576]	; (8001364 <writecmddata+0x2a4>)
 8001122:	619a      	str	r2, [r3, #24]
 8001124:	7bfb      	ldrb	r3, [r7, #15]
 8001126:	011b      	lsls	r3, r3, #4
 8001128:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	105b      	asrs	r3, r3, #1
 8001130:	f003 0310 	and.w	r3, r3, #16
 8001134:	431a      	orrs	r2, r3
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	f003 0320 	and.w	r3, r3, #32
 800113e:	431a      	orrs	r2, r3
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	431a      	orrs	r2, r3
 8001148:	4b85      	ldr	r3, [pc, #532]	; (8001360 <writecmddata+0x2a0>)
 800114a:	619a      	str	r2, [r3, #24]
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	019b      	lsls	r3, r3, #6
 8001150:	4a85      	ldr	r2, [pc, #532]	; (8001368 <writecmddata+0x2a8>)
 8001152:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001156:	6193      	str	r3, [r2, #24]
 8001158:	2102      	movs	r1, #2
 800115a:	4882      	ldr	r0, [pc, #520]	; (8001364 <writecmddata+0x2a4>)
 800115c:	f7ff fd1a 	bl	8000b94 <PIN_LOW>
 8001160:	2102      	movs	r1, #2
 8001162:	4880      	ldr	r0, [pc, #512]	; (8001364 <writecmddata+0x2a4>)
 8001164:	f7ff fd16 	bl	8000b94 <PIN_LOW>
 8001168:	2102      	movs	r1, #2
 800116a:	487e      	ldr	r0, [pc, #504]	; (8001364 <writecmddata+0x2a4>)
 800116c:	f7ff fd12 	bl	8000b94 <PIN_LOW>
 8001170:	2102      	movs	r1, #2
 8001172:	487c      	ldr	r0, [pc, #496]	; (8001364 <writecmddata+0x2a4>)
 8001174:	f7ff fd1e 	bl	8000bb4 <PIN_HIGH>
 8001178:	2102      	movs	r1, #2
 800117a:	487a      	ldr	r0, [pc, #488]	; (8001364 <writecmddata+0x2a4>)
 800117c:	f7ff fd1a 	bl	8000bb4 <PIN_HIGH>
 8001180:	4b78      	ldr	r3, [pc, #480]	; (8001364 <writecmddata+0x2a4>)
 8001182:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001186:	619a      	str	r2, [r3, #24]
 8001188:	4b75      	ldr	r3, [pc, #468]	; (8001360 <writecmddata+0x2a0>)
 800118a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800118e:	619a      	str	r2, [r3, #24]
 8001190:	4b75      	ldr	r3, [pc, #468]	; (8001368 <writecmddata+0x2a8>)
 8001192:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001196:	619a      	str	r2, [r3, #24]
 8001198:	7bbb      	ldrb	r3, [r7, #14]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80011a0:	7bbb      	ldrb	r3, [r7, #14]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011a8:	431a      	orrs	r2, r3
 80011aa:	7bbb      	ldrb	r3, [r7, #14]
 80011ac:	025b      	lsls	r3, r3, #9
 80011ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011b2:	431a      	orrs	r2, r3
 80011b4:	4b6b      	ldr	r3, [pc, #428]	; (8001364 <writecmddata+0x2a4>)
 80011b6:	619a      	str	r2, [r3, #24]
 80011b8:	7bbb      	ldrb	r3, [r7, #14]
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	105b      	asrs	r3, r3, #1
 80011c4:	f003 0310 	and.w	r3, r3, #16
 80011c8:	431a      	orrs	r2, r3
 80011ca:	7bbb      	ldrb	r3, [r7, #14]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	f003 0320 	and.w	r3, r3, #32
 80011d2:	431a      	orrs	r2, r3
 80011d4:	7bbb      	ldrb	r3, [r7, #14]
 80011d6:	f003 0308 	and.w	r3, r3, #8
 80011da:	431a      	orrs	r2, r3
 80011dc:	4b60      	ldr	r3, [pc, #384]	; (8001360 <writecmddata+0x2a0>)
 80011de:	619a      	str	r2, [r3, #24]
 80011e0:	7bbb      	ldrb	r3, [r7, #14]
 80011e2:	019b      	lsls	r3, r3, #6
 80011e4:	4a60      	ldr	r2, [pc, #384]	; (8001368 <writecmddata+0x2a8>)
 80011e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	2102      	movs	r1, #2
 80011ee:	485d      	ldr	r0, [pc, #372]	; (8001364 <writecmddata+0x2a4>)
 80011f0:	f7ff fcd0 	bl	8000b94 <PIN_LOW>
 80011f4:	2102      	movs	r1, #2
 80011f6:	485b      	ldr	r0, [pc, #364]	; (8001364 <writecmddata+0x2a4>)
 80011f8:	f7ff fccc 	bl	8000b94 <PIN_LOW>
 80011fc:	2102      	movs	r1, #2
 80011fe:	4859      	ldr	r0, [pc, #356]	; (8001364 <writecmddata+0x2a4>)
 8001200:	f7ff fcc8 	bl	8000b94 <PIN_LOW>
 8001204:	2102      	movs	r1, #2
 8001206:	4857      	ldr	r0, [pc, #348]	; (8001364 <writecmddata+0x2a4>)
 8001208:	f7ff fcd4 	bl	8000bb4 <PIN_HIGH>
 800120c:	2102      	movs	r1, #2
 800120e:	4855      	ldr	r0, [pc, #340]	; (8001364 <writecmddata+0x2a4>)
 8001210:	f7ff fcd0 	bl	8000bb4 <PIN_HIGH>
 8001214:	2110      	movs	r1, #16
 8001216:	4853      	ldr	r0, [pc, #332]	; (8001364 <writecmddata+0x2a4>)
 8001218:	f7ff fccc 	bl	8000bb4 <PIN_HIGH>
    WriteData(dat);
 800121c:	88bb      	ldrh	r3, [r7, #4]
 800121e:	0a1b      	lsrs	r3, r3, #8
 8001220:	b29b      	uxth	r3, r3
 8001222:	737b      	strb	r3, [r7, #13]
 8001224:	88bb      	ldrh	r3, [r7, #4]
 8001226:	733b      	strb	r3, [r7, #12]
 8001228:	4b4e      	ldr	r3, [pc, #312]	; (8001364 <writecmddata+0x2a4>)
 800122a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800122e:	619a      	str	r2, [r3, #24]
 8001230:	4b4b      	ldr	r3, [pc, #300]	; (8001360 <writecmddata+0x2a0>)
 8001232:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001236:	619a      	str	r2, [r3, #24]
 8001238:	4b4b      	ldr	r3, [pc, #300]	; (8001368 <writecmddata+0x2a8>)
 800123a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800123e:	619a      	str	r2, [r3, #24]
 8001240:	7b7b      	ldrb	r3, [r7, #13]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001248:	7b7b      	ldrb	r3, [r7, #13]
 800124a:	021b      	lsls	r3, r3, #8
 800124c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001250:	431a      	orrs	r2, r3
 8001252:	7b7b      	ldrb	r3, [r7, #13]
 8001254:	025b      	lsls	r3, r3, #9
 8001256:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800125a:	431a      	orrs	r2, r3
 800125c:	4b41      	ldr	r3, [pc, #260]	; (8001364 <writecmddata+0x2a4>)
 800125e:	619a      	str	r2, [r3, #24]
 8001260:	7b7b      	ldrb	r3, [r7, #13]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001268:	7b7b      	ldrb	r3, [r7, #13]
 800126a:	105b      	asrs	r3, r3, #1
 800126c:	f003 0310 	and.w	r3, r3, #16
 8001270:	431a      	orrs	r2, r3
 8001272:	7b7b      	ldrb	r3, [r7, #13]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	431a      	orrs	r2, r3
 800127c:	7b7b      	ldrb	r3, [r7, #13]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	431a      	orrs	r2, r3
 8001284:	4b36      	ldr	r3, [pc, #216]	; (8001360 <writecmddata+0x2a0>)
 8001286:	619a      	str	r2, [r3, #24]
 8001288:	7b7b      	ldrb	r3, [r7, #13]
 800128a:	019b      	lsls	r3, r3, #6
 800128c:	4a36      	ldr	r2, [pc, #216]	; (8001368 <writecmddata+0x2a8>)
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	6193      	str	r3, [r2, #24]
 8001294:	2102      	movs	r1, #2
 8001296:	4833      	ldr	r0, [pc, #204]	; (8001364 <writecmddata+0x2a4>)
 8001298:	f7ff fc7c 	bl	8000b94 <PIN_LOW>
 800129c:	2102      	movs	r1, #2
 800129e:	4831      	ldr	r0, [pc, #196]	; (8001364 <writecmddata+0x2a4>)
 80012a0:	f7ff fc78 	bl	8000b94 <PIN_LOW>
 80012a4:	2102      	movs	r1, #2
 80012a6:	482f      	ldr	r0, [pc, #188]	; (8001364 <writecmddata+0x2a4>)
 80012a8:	f7ff fc74 	bl	8000b94 <PIN_LOW>
 80012ac:	2102      	movs	r1, #2
 80012ae:	482d      	ldr	r0, [pc, #180]	; (8001364 <writecmddata+0x2a4>)
 80012b0:	f7ff fc80 	bl	8000bb4 <PIN_HIGH>
 80012b4:	2102      	movs	r1, #2
 80012b6:	482b      	ldr	r0, [pc, #172]	; (8001364 <writecmddata+0x2a4>)
 80012b8:	f7ff fc7c 	bl	8000bb4 <PIN_HIGH>
 80012bc:	4b29      	ldr	r3, [pc, #164]	; (8001364 <writecmddata+0x2a4>)
 80012be:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80012c2:	619a      	str	r2, [r3, #24]
 80012c4:	4b26      	ldr	r3, [pc, #152]	; (8001360 <writecmddata+0x2a0>)
 80012c6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80012ca:	619a      	str	r2, [r3, #24]
 80012cc:	4b26      	ldr	r3, [pc, #152]	; (8001368 <writecmddata+0x2a8>)
 80012ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80012d2:	619a      	str	r2, [r3, #24]
 80012d4:	7b3b      	ldrb	r3, [r7, #12]
 80012d6:	005b      	lsls	r3, r3, #1
 80012d8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80012dc:	7b3b      	ldrb	r3, [r7, #12]
 80012de:	021b      	lsls	r3, r3, #8
 80012e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012e4:	431a      	orrs	r2, r3
 80012e6:	7b3b      	ldrb	r3, [r7, #12]
 80012e8:	025b      	lsls	r3, r3, #9
 80012ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ee:	431a      	orrs	r2, r3
 80012f0:	4b1c      	ldr	r3, [pc, #112]	; (8001364 <writecmddata+0x2a4>)
 80012f2:	619a      	str	r2, [r3, #24]
 80012f4:	7b3b      	ldrb	r3, [r7, #12]
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80012fc:	7b3b      	ldrb	r3, [r7, #12]
 80012fe:	105b      	asrs	r3, r3, #1
 8001300:	f003 0310 	and.w	r3, r3, #16
 8001304:	431a      	orrs	r2, r3
 8001306:	7b3b      	ldrb	r3, [r7, #12]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	f003 0320 	and.w	r3, r3, #32
 800130e:	431a      	orrs	r2, r3
 8001310:	7b3b      	ldrb	r3, [r7, #12]
 8001312:	f003 0308 	and.w	r3, r3, #8
 8001316:	431a      	orrs	r2, r3
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <writecmddata+0x2a0>)
 800131a:	619a      	str	r2, [r3, #24]
 800131c:	7b3b      	ldrb	r3, [r7, #12]
 800131e:	019b      	lsls	r3, r3, #6
 8001320:	4a11      	ldr	r2, [pc, #68]	; (8001368 <writecmddata+0x2a8>)
 8001322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001326:	6193      	str	r3, [r2, #24]
 8001328:	2102      	movs	r1, #2
 800132a:	480e      	ldr	r0, [pc, #56]	; (8001364 <writecmddata+0x2a4>)
 800132c:	f7ff fc32 	bl	8000b94 <PIN_LOW>
 8001330:	2102      	movs	r1, #2
 8001332:	480c      	ldr	r0, [pc, #48]	; (8001364 <writecmddata+0x2a4>)
 8001334:	f7ff fc2e 	bl	8000b94 <PIN_LOW>
 8001338:	2102      	movs	r1, #2
 800133a:	480a      	ldr	r0, [pc, #40]	; (8001364 <writecmddata+0x2a4>)
 800133c:	f7ff fc2a 	bl	8000b94 <PIN_LOW>
 8001340:	2102      	movs	r1, #2
 8001342:	4808      	ldr	r0, [pc, #32]	; (8001364 <writecmddata+0x2a4>)
 8001344:	f7ff fc36 	bl	8000bb4 <PIN_HIGH>
 8001348:	2102      	movs	r1, #2
 800134a:	4806      	ldr	r0, [pc, #24]	; (8001364 <writecmddata+0x2a4>)
 800134c:	f7ff fc32 	bl	8000bb4 <PIN_HIGH>
    CS_IDLE;
 8001350:	2101      	movs	r1, #1
 8001352:	4803      	ldr	r0, [pc, #12]	; (8001360 <writecmddata+0x2a0>)
 8001354:	f7ff fc2e 	bl	8000bb4 <PIN_HIGH>
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40020400 	.word	0x40020400
 8001364:	40020000 	.word	0x40020000
 8001368:	40020800 	.word	0x40020800

0800136c <WriteCmdParamN>:


static void WriteCmdParamN(uint16_t cmd, int8_t N, uint8_t * block)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	603a      	str	r2, [r7, #0]
 8001376:	80fb      	strh	r3, [r7, #6]
 8001378:	460b      	mov	r3, r1
 800137a:	717b      	strb	r3, [r7, #5]
    CS_ACTIVE;
 800137c:	2101      	movs	r1, #1
 800137e:	4853      	ldr	r0, [pc, #332]	; (80014cc <WriteCmdParamN+0x160>)
 8001380:	f7ff fc08 	bl	8000b94 <PIN_LOW>
    WriteCmd(cmd);
 8001384:	2110      	movs	r1, #16
 8001386:	4852      	ldr	r0, [pc, #328]	; (80014d0 <WriteCmdParamN+0x164>)
 8001388:	f7ff fc04 	bl	8000b94 <PIN_LOW>
 800138c:	88fb      	ldrh	r3, [r7, #6]
 800138e:	0a1b      	lsrs	r3, r3, #8
 8001390:	b29b      	uxth	r3, r3
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	88fb      	ldrh	r3, [r7, #6]
 8001396:	73bb      	strb	r3, [r7, #14]
 8001398:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <WriteCmdParamN+0x164>)
 800139a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800139e:	619a      	str	r2, [r3, #24]
 80013a0:	4b4a      	ldr	r3, [pc, #296]	; (80014cc <WriteCmdParamN+0x160>)
 80013a2:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80013a6:	619a      	str	r2, [r3, #24]
 80013a8:	4b4a      	ldr	r3, [pc, #296]	; (80014d4 <WriteCmdParamN+0x168>)
 80013aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013ae:	619a      	str	r2, [r3, #24]
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80013b8:	7bfb      	ldrb	r3, [r7, #15]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013c0:	431a      	orrs	r2, r3
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	025b      	lsls	r3, r3, #9
 80013c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ca:	431a      	orrs	r2, r3
 80013cc:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <WriteCmdParamN+0x164>)
 80013ce:	619a      	str	r2, [r3, #24]
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	011b      	lsls	r3, r3, #4
 80013d4:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	105b      	asrs	r3, r3, #1
 80013dc:	f003 0310 	and.w	r3, r3, #16
 80013e0:	431a      	orrs	r2, r3
 80013e2:	7bfb      	ldrb	r3, [r7, #15]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	f003 0320 	and.w	r3, r3, #32
 80013ea:	431a      	orrs	r2, r3
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	431a      	orrs	r2, r3
 80013f4:	4b35      	ldr	r3, [pc, #212]	; (80014cc <WriteCmdParamN+0x160>)
 80013f6:	619a      	str	r2, [r3, #24]
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	019b      	lsls	r3, r3, #6
 80013fc:	4a35      	ldr	r2, [pc, #212]	; (80014d4 <WriteCmdParamN+0x168>)
 80013fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001402:	6193      	str	r3, [r2, #24]
 8001404:	2102      	movs	r1, #2
 8001406:	4832      	ldr	r0, [pc, #200]	; (80014d0 <WriteCmdParamN+0x164>)
 8001408:	f7ff fbc4 	bl	8000b94 <PIN_LOW>
 800140c:	2102      	movs	r1, #2
 800140e:	4830      	ldr	r0, [pc, #192]	; (80014d0 <WriteCmdParamN+0x164>)
 8001410:	f7ff fbc0 	bl	8000b94 <PIN_LOW>
 8001414:	2102      	movs	r1, #2
 8001416:	482e      	ldr	r0, [pc, #184]	; (80014d0 <WriteCmdParamN+0x164>)
 8001418:	f7ff fbbc 	bl	8000b94 <PIN_LOW>
 800141c:	2102      	movs	r1, #2
 800141e:	482c      	ldr	r0, [pc, #176]	; (80014d0 <WriteCmdParamN+0x164>)
 8001420:	f7ff fbc8 	bl	8000bb4 <PIN_HIGH>
 8001424:	2102      	movs	r1, #2
 8001426:	482a      	ldr	r0, [pc, #168]	; (80014d0 <WriteCmdParamN+0x164>)
 8001428:	f7ff fbc4 	bl	8000bb4 <PIN_HIGH>
 800142c:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <WriteCmdParamN+0x164>)
 800142e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001432:	619a      	str	r2, [r3, #24]
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <WriteCmdParamN+0x160>)
 8001436:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800143a:	619a      	str	r2, [r3, #24]
 800143c:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <WriteCmdParamN+0x168>)
 800143e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001442:	619a      	str	r2, [r3, #24]
 8001444:	7bbb      	ldrb	r3, [r7, #14]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800144c:	7bbb      	ldrb	r3, [r7, #14]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001454:	431a      	orrs	r2, r3
 8001456:	7bbb      	ldrb	r3, [r7, #14]
 8001458:	025b      	lsls	r3, r3, #9
 800145a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800145e:	431a      	orrs	r2, r3
 8001460:	4b1b      	ldr	r3, [pc, #108]	; (80014d0 <WriteCmdParamN+0x164>)
 8001462:	619a      	str	r2, [r3, #24]
 8001464:	7bbb      	ldrb	r3, [r7, #14]
 8001466:	011b      	lsls	r3, r3, #4
 8001468:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	105b      	asrs	r3, r3, #1
 8001470:	f003 0310 	and.w	r3, r3, #16
 8001474:	431a      	orrs	r2, r3
 8001476:	7bbb      	ldrb	r3, [r7, #14]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	431a      	orrs	r2, r3
 8001480:	7bbb      	ldrb	r3, [r7, #14]
 8001482:	f003 0308 	and.w	r3, r3, #8
 8001486:	431a      	orrs	r2, r3
 8001488:	4b10      	ldr	r3, [pc, #64]	; (80014cc <WriteCmdParamN+0x160>)
 800148a:	619a      	str	r2, [r3, #24]
 800148c:	7bbb      	ldrb	r3, [r7, #14]
 800148e:	019b      	lsls	r3, r3, #6
 8001490:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <WriteCmdParamN+0x168>)
 8001492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001496:	6193      	str	r3, [r2, #24]
 8001498:	2102      	movs	r1, #2
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <WriteCmdParamN+0x164>)
 800149c:	f7ff fb7a 	bl	8000b94 <PIN_LOW>
 80014a0:	2102      	movs	r1, #2
 80014a2:	480b      	ldr	r0, [pc, #44]	; (80014d0 <WriteCmdParamN+0x164>)
 80014a4:	f7ff fb76 	bl	8000b94 <PIN_LOW>
 80014a8:	2102      	movs	r1, #2
 80014aa:	4809      	ldr	r0, [pc, #36]	; (80014d0 <WriteCmdParamN+0x164>)
 80014ac:	f7ff fb72 	bl	8000b94 <PIN_LOW>
 80014b0:	2102      	movs	r1, #2
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <WriteCmdParamN+0x164>)
 80014b4:	f7ff fb7e 	bl	8000bb4 <PIN_HIGH>
 80014b8:	2102      	movs	r1, #2
 80014ba:	4805      	ldr	r0, [pc, #20]	; (80014d0 <WriteCmdParamN+0x164>)
 80014bc:	f7ff fb7a 	bl	8000bb4 <PIN_HIGH>
 80014c0:	2110      	movs	r1, #16
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <WriteCmdParamN+0x164>)
 80014c4:	f7ff fb76 	bl	8000bb4 <PIN_HIGH>
    while (N-- > 0) {
 80014c8:	e104      	b.n	80016d4 <WriteCmdParamN+0x368>
 80014ca:	bf00      	nop
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40020000 	.word	0x40020000
 80014d4:	40020800 	.word	0x40020800
        uint8_t u8 = *block++;
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	1c5a      	adds	r2, r3, #1
 80014dc:	603a      	str	r2, [r7, #0]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	737b      	strb	r3, [r7, #13]
        write8(u8);
 80014e2:	4b85      	ldr	r3, [pc, #532]	; (80016f8 <WriteCmdParamN+0x38c>)
 80014e4:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80014e8:	619a      	str	r2, [r3, #24]
 80014ea:	4b84      	ldr	r3, [pc, #528]	; (80016fc <WriteCmdParamN+0x390>)
 80014ec:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80014f0:	619a      	str	r2, [r3, #24]
 80014f2:	4b83      	ldr	r3, [pc, #524]	; (8001700 <WriteCmdParamN+0x394>)
 80014f4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80014f8:	619a      	str	r2, [r3, #24]
 80014fa:	7b7b      	ldrb	r3, [r7, #13]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001502:	7b7b      	ldrb	r3, [r7, #13]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800150a:	431a      	orrs	r2, r3
 800150c:	7b7b      	ldrb	r3, [r7, #13]
 800150e:	025b      	lsls	r3, r3, #9
 8001510:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001514:	431a      	orrs	r2, r3
 8001516:	4b78      	ldr	r3, [pc, #480]	; (80016f8 <WriteCmdParamN+0x38c>)
 8001518:	619a      	str	r2, [r3, #24]
 800151a:	7b7b      	ldrb	r3, [r7, #13]
 800151c:	011b      	lsls	r3, r3, #4
 800151e:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001522:	7b7b      	ldrb	r3, [r7, #13]
 8001524:	105b      	asrs	r3, r3, #1
 8001526:	f003 0310 	and.w	r3, r3, #16
 800152a:	431a      	orrs	r2, r3
 800152c:	7b7b      	ldrb	r3, [r7, #13]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	f003 0320 	and.w	r3, r3, #32
 8001534:	431a      	orrs	r2, r3
 8001536:	7b7b      	ldrb	r3, [r7, #13]
 8001538:	f003 0308 	and.w	r3, r3, #8
 800153c:	431a      	orrs	r2, r3
 800153e:	4b6f      	ldr	r3, [pc, #444]	; (80016fc <WriteCmdParamN+0x390>)
 8001540:	619a      	str	r2, [r3, #24]
 8001542:	7b7b      	ldrb	r3, [r7, #13]
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	4a6e      	ldr	r2, [pc, #440]	; (8001700 <WriteCmdParamN+0x394>)
 8001548:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154c:	6193      	str	r3, [r2, #24]
 800154e:	2102      	movs	r1, #2
 8001550:	4869      	ldr	r0, [pc, #420]	; (80016f8 <WriteCmdParamN+0x38c>)
 8001552:	f7ff fb1f 	bl	8000b94 <PIN_LOW>
 8001556:	2102      	movs	r1, #2
 8001558:	4867      	ldr	r0, [pc, #412]	; (80016f8 <WriteCmdParamN+0x38c>)
 800155a:	f7ff fb1b 	bl	8000b94 <PIN_LOW>
 800155e:	2102      	movs	r1, #2
 8001560:	4865      	ldr	r0, [pc, #404]	; (80016f8 <WriteCmdParamN+0x38c>)
 8001562:	f7ff fb17 	bl	8000b94 <PIN_LOW>
 8001566:	2102      	movs	r1, #2
 8001568:	4863      	ldr	r0, [pc, #396]	; (80016f8 <WriteCmdParamN+0x38c>)
 800156a:	f7ff fb23 	bl	8000bb4 <PIN_HIGH>
 800156e:	2102      	movs	r1, #2
 8001570:	4861      	ldr	r0, [pc, #388]	; (80016f8 <WriteCmdParamN+0x38c>)
 8001572:	f7ff fb1f 	bl	8000bb4 <PIN_HIGH>
        if (N && is8347) {
 8001576:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800157a:	2b00      	cmp	r3, #0
 800157c:	f000 80aa 	beq.w	80016d4 <WriteCmdParamN+0x368>
 8001580:	4b60      	ldr	r3, [pc, #384]	; (8001704 <WriteCmdParamN+0x398>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	f000 80a5 	beq.w	80016d4 <WriteCmdParamN+0x368>
            cmd++;
 800158a:	88fb      	ldrh	r3, [r7, #6]
 800158c:	3301      	adds	r3, #1
 800158e:	80fb      	strh	r3, [r7, #6]
            WriteCmd(cmd);
 8001590:	2110      	movs	r1, #16
 8001592:	4859      	ldr	r0, [pc, #356]	; (80016f8 <WriteCmdParamN+0x38c>)
 8001594:	f7ff fafe 	bl	8000b94 <PIN_LOW>
 8001598:	88fb      	ldrh	r3, [r7, #6]
 800159a:	0a1b      	lsrs	r3, r3, #8
 800159c:	b29b      	uxth	r3, r3
 800159e:	733b      	strb	r3, [r7, #12]
 80015a0:	88fb      	ldrh	r3, [r7, #6]
 80015a2:	72fb      	strb	r3, [r7, #11]
 80015a4:	4b54      	ldr	r3, [pc, #336]	; (80016f8 <WriteCmdParamN+0x38c>)
 80015a6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80015aa:	619a      	str	r2, [r3, #24]
 80015ac:	4b53      	ldr	r3, [pc, #332]	; (80016fc <WriteCmdParamN+0x390>)
 80015ae:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80015b2:	619a      	str	r2, [r3, #24]
 80015b4:	4b52      	ldr	r3, [pc, #328]	; (8001700 <WriteCmdParamN+0x394>)
 80015b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015ba:	619a      	str	r2, [r3, #24]
 80015bc:	7b3b      	ldrb	r3, [r7, #12]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80015c4:	7b3b      	ldrb	r3, [r7, #12]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015cc:	431a      	orrs	r2, r3
 80015ce:	7b3b      	ldrb	r3, [r7, #12]
 80015d0:	025b      	lsls	r3, r3, #9
 80015d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015d6:	431a      	orrs	r2, r3
 80015d8:	4b47      	ldr	r3, [pc, #284]	; (80016f8 <WriteCmdParamN+0x38c>)
 80015da:	619a      	str	r2, [r3, #24]
 80015dc:	7b3b      	ldrb	r3, [r7, #12]
 80015de:	011b      	lsls	r3, r3, #4
 80015e0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	105b      	asrs	r3, r3, #1
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	431a      	orrs	r2, r3
 80015ee:	7b3b      	ldrb	r3, [r7, #12]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	f003 0320 	and.w	r3, r3, #32
 80015f6:	431a      	orrs	r2, r3
 80015f8:	7b3b      	ldrb	r3, [r7, #12]
 80015fa:	f003 0308 	and.w	r3, r3, #8
 80015fe:	431a      	orrs	r2, r3
 8001600:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <WriteCmdParamN+0x390>)
 8001602:	619a      	str	r2, [r3, #24]
 8001604:	7b3b      	ldrb	r3, [r7, #12]
 8001606:	019b      	lsls	r3, r3, #6
 8001608:	4a3d      	ldr	r2, [pc, #244]	; (8001700 <WriteCmdParamN+0x394>)
 800160a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160e:	6193      	str	r3, [r2, #24]
 8001610:	2102      	movs	r1, #2
 8001612:	4839      	ldr	r0, [pc, #228]	; (80016f8 <WriteCmdParamN+0x38c>)
 8001614:	f7ff fabe 	bl	8000b94 <PIN_LOW>
 8001618:	2102      	movs	r1, #2
 800161a:	4837      	ldr	r0, [pc, #220]	; (80016f8 <WriteCmdParamN+0x38c>)
 800161c:	f7ff faba 	bl	8000b94 <PIN_LOW>
 8001620:	2102      	movs	r1, #2
 8001622:	4835      	ldr	r0, [pc, #212]	; (80016f8 <WriteCmdParamN+0x38c>)
 8001624:	f7ff fab6 	bl	8000b94 <PIN_LOW>
 8001628:	2102      	movs	r1, #2
 800162a:	4833      	ldr	r0, [pc, #204]	; (80016f8 <WriteCmdParamN+0x38c>)
 800162c:	f7ff fac2 	bl	8000bb4 <PIN_HIGH>
 8001630:	2102      	movs	r1, #2
 8001632:	4831      	ldr	r0, [pc, #196]	; (80016f8 <WriteCmdParamN+0x38c>)
 8001634:	f7ff fabe 	bl	8000bb4 <PIN_HIGH>
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <WriteCmdParamN+0x38c>)
 800163a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800163e:	619a      	str	r2, [r3, #24]
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <WriteCmdParamN+0x390>)
 8001642:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001646:	619a      	str	r2, [r3, #24]
 8001648:	4b2d      	ldr	r3, [pc, #180]	; (8001700 <WriteCmdParamN+0x394>)
 800164a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800164e:	619a      	str	r2, [r3, #24]
 8001650:	7afb      	ldrb	r3, [r7, #11]
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001658:	7afb      	ldrb	r3, [r7, #11]
 800165a:	021b      	lsls	r3, r3, #8
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	431a      	orrs	r2, r3
 8001662:	7afb      	ldrb	r3, [r7, #11]
 8001664:	025b      	lsls	r3, r3, #9
 8001666:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800166a:	431a      	orrs	r2, r3
 800166c:	4b22      	ldr	r3, [pc, #136]	; (80016f8 <WriteCmdParamN+0x38c>)
 800166e:	619a      	str	r2, [r3, #24]
 8001670:	7afb      	ldrb	r3, [r7, #11]
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	105b      	asrs	r3, r3, #1
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	431a      	orrs	r2, r3
 8001682:	7afb      	ldrb	r3, [r7, #11]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	431a      	orrs	r2, r3
 800168c:	7afb      	ldrb	r3, [r7, #11]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	431a      	orrs	r2, r3
 8001694:	4b19      	ldr	r3, [pc, #100]	; (80016fc <WriteCmdParamN+0x390>)
 8001696:	619a      	str	r2, [r3, #24]
 8001698:	7afb      	ldrb	r3, [r7, #11]
 800169a:	019b      	lsls	r3, r3, #6
 800169c:	4a18      	ldr	r2, [pc, #96]	; (8001700 <WriteCmdParamN+0x394>)
 800169e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016a2:	6193      	str	r3, [r2, #24]
 80016a4:	2102      	movs	r1, #2
 80016a6:	4814      	ldr	r0, [pc, #80]	; (80016f8 <WriteCmdParamN+0x38c>)
 80016a8:	f7ff fa74 	bl	8000b94 <PIN_LOW>
 80016ac:	2102      	movs	r1, #2
 80016ae:	4812      	ldr	r0, [pc, #72]	; (80016f8 <WriteCmdParamN+0x38c>)
 80016b0:	f7ff fa70 	bl	8000b94 <PIN_LOW>
 80016b4:	2102      	movs	r1, #2
 80016b6:	4810      	ldr	r0, [pc, #64]	; (80016f8 <WriteCmdParamN+0x38c>)
 80016b8:	f7ff fa6c 	bl	8000b94 <PIN_LOW>
 80016bc:	2102      	movs	r1, #2
 80016be:	480e      	ldr	r0, [pc, #56]	; (80016f8 <WriteCmdParamN+0x38c>)
 80016c0:	f7ff fa78 	bl	8000bb4 <PIN_HIGH>
 80016c4:	2102      	movs	r1, #2
 80016c6:	480c      	ldr	r0, [pc, #48]	; (80016f8 <WriteCmdParamN+0x38c>)
 80016c8:	f7ff fa74 	bl	8000bb4 <PIN_HIGH>
 80016cc:	2110      	movs	r1, #16
 80016ce:	480a      	ldr	r0, [pc, #40]	; (80016f8 <WriteCmdParamN+0x38c>)
 80016d0:	f7ff fa70 	bl	8000bb4 <PIN_HIGH>
    while (N-- > 0) {
 80016d4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	3a01      	subs	r2, #1
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	717a      	strb	r2, [r7, #5]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f73f aef9 	bgt.w	80014d8 <WriteCmdParamN+0x16c>
        }
    }
    CS_IDLE;
 80016e6:	2101      	movs	r1, #1
 80016e8:	4804      	ldr	r0, [pc, #16]	; (80016fc <WriteCmdParamN+0x390>)
 80016ea:	f7ff fa63 	bl	8000bb4 <PIN_HIGH>
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40020000 	.word	0x40020000
 80016fc:	40020400 	.word	0x40020400
 8001700:	40020800 	.word	0x40020800
 8001704:	20000033 	.word	0x20000033

08001708 <WriteCmdParam4>:


static inline void WriteCmdParam4(uint8_t cmd, uint8_t d1, uint8_t d2, uint8_t d3, uint8_t d4)
{
 8001708:	b590      	push	{r4, r7, lr}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	4604      	mov	r4, r0
 8001710:	4608      	mov	r0, r1
 8001712:	4611      	mov	r1, r2
 8001714:	461a      	mov	r2, r3
 8001716:	4623      	mov	r3, r4
 8001718:	71fb      	strb	r3, [r7, #7]
 800171a:	4603      	mov	r3, r0
 800171c:	71bb      	strb	r3, [r7, #6]
 800171e:	460b      	mov	r3, r1
 8001720:	717b      	strb	r3, [r7, #5]
 8001722:	4613      	mov	r3, r2
 8001724:	713b      	strb	r3, [r7, #4]
    uint8_t d[4];
    d[0] = d1, d[1] = d2, d[2] = d3, d[3] = d4;
 8001726:	79bb      	ldrb	r3, [r7, #6]
 8001728:	733b      	strb	r3, [r7, #12]
 800172a:	797b      	ldrb	r3, [r7, #5]
 800172c:	737b      	strb	r3, [r7, #13]
 800172e:	793b      	ldrb	r3, [r7, #4]
 8001730:	73bb      	strb	r3, [r7, #14]
 8001732:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001736:	73fb      	strb	r3, [r7, #15]
    WriteCmdParamN(cmd, 4, d);
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	b29b      	uxth	r3, r3
 800173c:	f107 020c 	add.w	r2, r7, #12
 8001740:	2104      	movs	r1, #4
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fe12 	bl	800136c <WriteCmdParamN>
}
 8001748:	bf00      	nop
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	bd90      	pop	{r4, r7, pc}

08001750 <init_table>:

#define TFTLCD_DELAY 0xFFFF
#define TFTLCD_DELAY8 0x7F

static void init_table(const void *table, int16_t size)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]

    uint8_t *p = (uint8_t *) table, dat[24];            //R61526 has GAMMA[22]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	627b      	str	r3, [r7, #36]	; 0x24

    while (size > 0)
 8001760:	e046      	b.n	80017f0 <init_table+0xa0>
    {
        uint8_t cmd = pgm_read_byte(p++);
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	1c5a      	adds	r2, r3, #1
 8001766:	627a      	str	r2, [r7, #36]	; 0x24
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        uint8_t len = pgm_read_byte(p++);
 800176e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	627a      	str	r2, [r7, #36]	; 0x24
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        if (cmd == TFTLCD_DELAY8)
 800177a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800177e:	2b7f      	cmp	r3, #127	; 0x7f
 8001780:	d108      	bne.n	8001794 <init_table+0x44>
        {
            delay(len);
 8001782:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001786:	4618      	mov	r0, r3
 8001788:	f002 fe38 	bl	80043fc <delay>
            len = 0;
 800178c:	2300      	movs	r3, #0
 800178e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001792:	e024      	b.n	80017de <init_table+0x8e>
        }
        else
        {
            for (uint8_t i = 0; i < len; i++)
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800179a:	e010      	b.n	80017be <init_table+0x6e>
                dat[i] = pgm_read_byte(p++);
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	1c5a      	adds	r2, r3, #1
 80017a0:	627a      	str	r2, [r7, #36]	; 0x24
 80017a2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80017a6:	7819      	ldrb	r1, [r3, #0]
 80017a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ac:	4413      	add	r3, r2
 80017ae:	460a      	mov	r2, r1
 80017b0:	f803 2c20 	strb.w	r2, [r3, #-32]
            for (uint8_t i = 0; i < len; i++)
 80017b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80017b8:	3301      	adds	r3, #1
 80017ba:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80017be:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80017c2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d3e8      	bcc.n	800179c <init_table+0x4c>
            WriteCmdParamN(cmd, len, dat);
 80017ca:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	f997 1023 	ldrsb.w	r1, [r7, #35]	; 0x23
 80017d4:	f107 0208 	add.w	r2, r7, #8
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fdc7 	bl	800136c <WriteCmdParamN>
        }
        size -= len + 2;
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	3b02      	subs	r3, #2
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	807b      	strh	r3, [r7, #2]
    while (size > 0)
 80017f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	dcb4      	bgt.n	8001762 <init_table+0x12>
    }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3728      	adds	r7, #40	; 0x28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <init_table16>:


static void init_table16(const void *table, int16_t size)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b084      	sub	sp, #16
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	807b      	strh	r3, [r7, #2]
    uint16_t *p = (uint16_t *) table;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	60fb      	str	r3, [r7, #12]
    while (size > 0) {
 8001812:	e01d      	b.n	8001850 <init_table16+0x4e>
        uint16_t cmd = pgm_read_word(p++);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	1c9a      	adds	r2, r3, #2
 8001818:	60fa      	str	r2, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	817b      	strh	r3, [r7, #10]
        uint16_t d = pgm_read_word(p++);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	1c9a      	adds	r2, r3, #2
 8001822:	60fa      	str	r2, [r7, #12]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	813b      	strh	r3, [r7, #8]
        if (cmd == TFTLCD_DELAY)
 8001828:	897b      	ldrh	r3, [r7, #10]
 800182a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182e:	4293      	cmp	r3, r2
 8001830:	d104      	bne.n	800183c <init_table16+0x3a>
            delay(d);
 8001832:	893b      	ldrh	r3, [r7, #8]
 8001834:	4618      	mov	r0, r3
 8001836:	f002 fde1 	bl	80043fc <delay>
 800183a:	e005      	b.n	8001848 <init_table16+0x46>
        else {
			writecmddata(cmd, d);                      //static function
 800183c:	893a      	ldrh	r2, [r7, #8]
 800183e:	897b      	ldrh	r3, [r7, #10]
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff fc3c 	bl	80010c0 <writecmddata>
        }
        size -= 2 * sizeof(int16_t);
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	3b04      	subs	r3, #4
 800184c:	b29b      	uxth	r3, r3
 800184e:	807b      	strh	r3, [r7, #2]
    while (size > 0) {
 8001850:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001854:	2b00      	cmp	r3, #0
 8001856:	dcdd      	bgt.n	8001814 <init_table16+0x12>
    }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
	...

08001864 <reset>:


void reset(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
    done_reset = 1;
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <reset+0x88>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
    setWriteDir();
 800186e:	f7ff faf9 	bl	8000e64 <setWriteDir>
    CTL_INIT();
 8001872:	2101      	movs	r1, #1
 8001874:	481e      	ldr	r0, [pc, #120]	; (80018f0 <reset+0x8c>)
 8001876:	f7ff f9c3 	bl	8000c00 <PIN_OUTPUT>
 800187a:	2102      	movs	r1, #2
 800187c:	481c      	ldr	r0, [pc, #112]	; (80018f0 <reset+0x8c>)
 800187e:	f7ff f9bf 	bl	8000c00 <PIN_OUTPUT>
 8001882:	2110      	movs	r1, #16
 8001884:	481a      	ldr	r0, [pc, #104]	; (80018f0 <reset+0x8c>)
 8001886:	f7ff f9bb 	bl	8000c00 <PIN_OUTPUT>
 800188a:	2101      	movs	r1, #1
 800188c:	4819      	ldr	r0, [pc, #100]	; (80018f4 <reset+0x90>)
 800188e:	f7ff f9b7 	bl	8000c00 <PIN_OUTPUT>
 8001892:	2102      	movs	r1, #2
 8001894:	4818      	ldr	r0, [pc, #96]	; (80018f8 <reset+0x94>)
 8001896:	f7ff f9b3 	bl	8000c00 <PIN_OUTPUT>
    CS_IDLE;
 800189a:	2101      	movs	r1, #1
 800189c:	4815      	ldr	r0, [pc, #84]	; (80018f4 <reset+0x90>)
 800189e:	f7ff f989 	bl	8000bb4 <PIN_HIGH>
    RD_IDLE;
 80018a2:	2101      	movs	r1, #1
 80018a4:	4812      	ldr	r0, [pc, #72]	; (80018f0 <reset+0x8c>)
 80018a6:	f7ff f985 	bl	8000bb4 <PIN_HIGH>
    WR_IDLE;
 80018aa:	2102      	movs	r1, #2
 80018ac:	4810      	ldr	r0, [pc, #64]	; (80018f0 <reset+0x8c>)
 80018ae:	f7ff f981 	bl	8000bb4 <PIN_HIGH>
    RESET_IDLE;
 80018b2:	2102      	movs	r1, #2
 80018b4:	4810      	ldr	r0, [pc, #64]	; (80018f8 <reset+0x94>)
 80018b6:	f7ff f97d 	bl	8000bb4 <PIN_HIGH>
    delay(50);
 80018ba:	2032      	movs	r0, #50	; 0x32
 80018bc:	f002 fd9e 	bl	80043fc <delay>
    RESET_ACTIVE;
 80018c0:	2102      	movs	r1, #2
 80018c2:	480d      	ldr	r0, [pc, #52]	; (80018f8 <reset+0x94>)
 80018c4:	f7ff f966 	bl	8000b94 <PIN_LOW>
    delay(100);
 80018c8:	2064      	movs	r0, #100	; 0x64
 80018ca:	f002 fd97 	bl	80043fc <delay>
    RESET_IDLE;
 80018ce:	2102      	movs	r1, #2
 80018d0:	4809      	ldr	r0, [pc, #36]	; (80018f8 <reset+0x94>)
 80018d2:	f7ff f96f 	bl	8000bb4 <PIN_HIGH>
    delay(1000);	//delay(100);	Poloni (28/05) Vide manual ILI9340 pg. 220
 80018d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80018da:	f002 fd8f 	bl	80043fc <delay>
	WriteCmdData(0xB0, 0x0000);   //R61520 needs this to read ID
 80018de:	2100      	movs	r1, #0
 80018e0:	20b0      	movs	r0, #176	; 0xb0
 80018e2:	f7ff fa6c 	bl	8000dbe <WriteCmdData>
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000032 	.word	0x20000032
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020400 	.word	0x40020400
 80018f8:	40020800 	.word	0x40020800

080018fc <read16bits>:


static uint16_t read16bits(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
    uint16_t ret;
    uint8_t lo;
    READ_8(ret);
 8001902:	2101      	movs	r1, #1
 8001904:	4873      	ldr	r0, [pc, #460]	; (8001ad4 <read16bits+0x1d8>)
 8001906:	f7ff f955 	bl	8000bb4 <PIN_HIGH>
 800190a:	2101      	movs	r1, #1
 800190c:	4871      	ldr	r0, [pc, #452]	; (8001ad4 <read16bits+0x1d8>)
 800190e:	f7ff f941 	bl	8000b94 <PIN_LOW>
 8001912:	2101      	movs	r1, #1
 8001914:	486f      	ldr	r0, [pc, #444]	; (8001ad4 <read16bits+0x1d8>)
 8001916:	f7ff f93d 	bl	8000b94 <PIN_LOW>
 800191a:	2101      	movs	r1, #1
 800191c:	486d      	ldr	r0, [pc, #436]	; (8001ad4 <read16bits+0x1d8>)
 800191e:	f7ff f939 	bl	8000b94 <PIN_LOW>
 8001922:	2101      	movs	r1, #1
 8001924:	486b      	ldr	r0, [pc, #428]	; (8001ad4 <read16bits+0x1d8>)
 8001926:	f7ff f935 	bl	8000b94 <PIN_LOW>
 800192a:	2101      	movs	r1, #1
 800192c:	4869      	ldr	r0, [pc, #420]	; (8001ad4 <read16bits+0x1d8>)
 800192e:	f7ff f931 	bl	8000b94 <PIN_LOW>
 8001932:	2101      	movs	r1, #1
 8001934:	4867      	ldr	r0, [pc, #412]	; (8001ad4 <read16bits+0x1d8>)
 8001936:	f7ff f92d 	bl	8000b94 <PIN_LOW>
 800193a:	2101      	movs	r1, #1
 800193c:	4865      	ldr	r0, [pc, #404]	; (8001ad4 <read16bits+0x1d8>)
 800193e:	f7ff f929 	bl	8000b94 <PIN_LOW>
 8001942:	4b64      	ldr	r3, [pc, #400]	; (8001ad4 <read16bits+0x1d8>)
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	085b      	lsrs	r3, r3, #1
 8001948:	b29b      	uxth	r3, r3
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	b29a      	uxth	r2, r3
 8001950:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <read16bits+0x1dc>)
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	091b      	lsrs	r3, r3, #4
 8001956:	b29b      	uxth	r3, r3
 8001958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800195c:	b29b      	uxth	r3, r3
 800195e:	4313      	orrs	r3, r2
 8001960:	b29a      	uxth	r2, r3
 8001962:	4b5d      	ldr	r3, [pc, #372]	; (8001ad8 <read16bits+0x1dc>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	b29b      	uxth	r3, r3
 8001968:	005b      	lsls	r3, r3, #1
 800196a:	b29b      	uxth	r3, r3
 800196c:	f003 0320 	and.w	r3, r3, #32
 8001970:	b29b      	uxth	r3, r3
 8001972:	4313      	orrs	r3, r2
 8001974:	b29a      	uxth	r2, r3
 8001976:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <read16bits+0x1dc>)
 8001978:	691b      	ldr	r3, [r3, #16]
 800197a:	085b      	lsrs	r3, r3, #1
 800197c:	b29b      	uxth	r3, r3
 800197e:	f003 0310 	and.w	r3, r3, #16
 8001982:	b29b      	uxth	r3, r3
 8001984:	4313      	orrs	r3, r2
 8001986:	b29a      	uxth	r2, r3
 8001988:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <read16bits+0x1dc>)
 800198a:	691b      	ldr	r3, [r3, #16]
 800198c:	b29b      	uxth	r3, r3
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	b29b      	uxth	r3, r3
 8001994:	4313      	orrs	r3, r2
 8001996:	b29a      	uxth	r2, r3
 8001998:	4b4e      	ldr	r3, [pc, #312]	; (8001ad4 <read16bits+0x1d8>)
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	0a1b      	lsrs	r3, r3, #8
 800199e:	b29b      	uxth	r3, r3
 80019a0:	f003 0304 	and.w	r3, r3, #4
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4313      	orrs	r3, r2
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <read16bits+0x1e0>)
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	099b      	lsrs	r3, r3, #6
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	4313      	orrs	r3, r2
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	4b45      	ldr	r3, [pc, #276]	; (8001ad4 <read16bits+0x1d8>)
 80019be:	691b      	ldr	r3, [r3, #16]
 80019c0:	0a5b      	lsrs	r3, r3, #9
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	f003 0301 	and.w	r3, r3, #1
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	4313      	orrs	r3, r2
 80019cc:	80fb      	strh	r3, [r7, #6]
 80019ce:	2101      	movs	r1, #1
 80019d0:	4840      	ldr	r0, [pc, #256]	; (8001ad4 <read16bits+0x1d8>)
 80019d2:	f7ff f8ef 	bl	8000bb4 <PIN_HIGH>
 80019d6:	2101      	movs	r1, #1
 80019d8:	483e      	ldr	r0, [pc, #248]	; (8001ad4 <read16bits+0x1d8>)
 80019da:	f7ff f8eb 	bl	8000bb4 <PIN_HIGH>
    READ_8(lo);
 80019de:	2101      	movs	r1, #1
 80019e0:	483c      	ldr	r0, [pc, #240]	; (8001ad4 <read16bits+0x1d8>)
 80019e2:	f7ff f8e7 	bl	8000bb4 <PIN_HIGH>
 80019e6:	2101      	movs	r1, #1
 80019e8:	483a      	ldr	r0, [pc, #232]	; (8001ad4 <read16bits+0x1d8>)
 80019ea:	f7ff f8d3 	bl	8000b94 <PIN_LOW>
 80019ee:	2101      	movs	r1, #1
 80019f0:	4838      	ldr	r0, [pc, #224]	; (8001ad4 <read16bits+0x1d8>)
 80019f2:	f7ff f8cf 	bl	8000b94 <PIN_LOW>
 80019f6:	2101      	movs	r1, #1
 80019f8:	4836      	ldr	r0, [pc, #216]	; (8001ad4 <read16bits+0x1d8>)
 80019fa:	f7ff f8cb 	bl	8000b94 <PIN_LOW>
 80019fe:	2101      	movs	r1, #1
 8001a00:	4834      	ldr	r0, [pc, #208]	; (8001ad4 <read16bits+0x1d8>)
 8001a02:	f7ff f8c7 	bl	8000b94 <PIN_LOW>
 8001a06:	2101      	movs	r1, #1
 8001a08:	4832      	ldr	r0, [pc, #200]	; (8001ad4 <read16bits+0x1d8>)
 8001a0a:	f7ff f8c3 	bl	8000b94 <PIN_LOW>
 8001a0e:	2101      	movs	r1, #1
 8001a10:	4830      	ldr	r0, [pc, #192]	; (8001ad4 <read16bits+0x1d8>)
 8001a12:	f7ff f8bf 	bl	8000b94 <PIN_LOW>
 8001a16:	2101      	movs	r1, #1
 8001a18:	482e      	ldr	r0, [pc, #184]	; (8001ad4 <read16bits+0x1d8>)
 8001a1a:	f7ff f8bb 	bl	8000b94 <PIN_LOW>
 8001a1e:	4b2d      	ldr	r3, [pc, #180]	; (8001ad4 <read16bits+0x1d8>)
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	4b2a      	ldr	r3, [pc, #168]	; (8001ad8 <read16bits+0x1dc>)
 8001a2e:	691b      	ldr	r3, [r3, #16]
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b2da      	uxtb	r2, r3
 8001a3e:	4b26      	ldr	r3, [pc, #152]	; (8001ad8 <read16bits+0x1dc>)
 8001a40:	691b      	ldr	r3, [r3, #16]
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	f003 0320 	and.w	r3, r3, #32
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b2da      	uxtb	r2, r3
 8001a52:	4b21      	ldr	r3, [pc, #132]	; (8001ad8 <read16bits+0x1dc>)
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	085b      	lsrs	r3, r3, #1
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	f003 0310 	and.w	r3, r3, #16
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	4313      	orrs	r3, r2
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	4b1c      	ldr	r3, [pc, #112]	; (8001ad8 <read16bits+0x1dc>)
 8001a66:	691b      	ldr	r3, [r3, #16]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b2da      	uxtb	r2, r3
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <read16bits+0x1d8>)
 8001a76:	691b      	ldr	r3, [r3, #16]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	4313      	orrs	r3, r2
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <read16bits+0x1e0>)
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	099b      	lsrs	r3, r3, #6
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	4313      	orrs	r3, r2
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <read16bits+0x1d8>)
 8001a9a:	691b      	ldr	r3, [r3, #16]
 8001a9c:	0a5b      	lsrs	r3, r3, #9
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	717b      	strb	r3, [r7, #5]
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4809      	ldr	r0, [pc, #36]	; (8001ad4 <read16bits+0x1d8>)
 8001aae:	f7ff f881 	bl	8000bb4 <PIN_HIGH>
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	4807      	ldr	r0, [pc, #28]	; (8001ad4 <read16bits+0x1d8>)
 8001ab6:	f7ff f87d 	bl	8000bb4 <PIN_HIGH>
    return (ret << 8) | lo;
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	021b      	lsls	r3, r3, #8
 8001abe:	b21a      	sxth	r2, r3
 8001ac0:	797b      	ldrb	r3, [r7, #5]
 8001ac2:	b21b      	sxth	r3, r3
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	b21b      	sxth	r3, r3
 8001ac8:	b29b      	uxth	r3, r3
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40020000 	.word	0x40020000
 8001ad8:	40020400 	.word	0x40020400
 8001adc:	40020800 	.word	0x40020800

08001ae0 <readReg>:


uint16_t readReg(uint16_t reg, int8_t index)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	460a      	mov	r2, r1
 8001aea:	80fb      	strh	r3, [r7, #6]
 8001aec:	4613      	mov	r3, r2
 8001aee:	717b      	strb	r3, [r7, #5]
    uint16_t ret;
    uint8_t lo;
    if (!done_reset)
 8001af0:	4b65      	ldr	r3, [pc, #404]	; (8001c88 <readReg+0x1a8>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <readReg+0x1c>
        reset();
 8001af8:	f7ff feb4 	bl	8001864 <reset>
    CS_ACTIVE;
 8001afc:	2101      	movs	r1, #1
 8001afe:	4863      	ldr	r0, [pc, #396]	; (8001c8c <readReg+0x1ac>)
 8001b00:	f7ff f848 	bl	8000b94 <PIN_LOW>
    WriteCmd(reg);
 8001b04:	2110      	movs	r1, #16
 8001b06:	4862      	ldr	r0, [pc, #392]	; (8001c90 <readReg+0x1b0>)
 8001b08:	f7ff f844 	bl	8000b94 <PIN_LOW>
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	0a1b      	lsrs	r3, r3, #8
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	73bb      	strb	r3, [r7, #14]
 8001b18:	4b5d      	ldr	r3, [pc, #372]	; (8001c90 <readReg+0x1b0>)
 8001b1a:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001b1e:	619a      	str	r2, [r3, #24]
 8001b20:	4b5a      	ldr	r3, [pc, #360]	; (8001c8c <readReg+0x1ac>)
 8001b22:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001b26:	619a      	str	r2, [r3, #24]
 8001b28:	4b5a      	ldr	r3, [pc, #360]	; (8001c94 <readReg+0x1b4>)
 8001b2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b2e:	619a      	str	r2, [r3, #24]
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	021b      	lsls	r3, r3, #8
 8001b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b40:	431a      	orrs	r2, r3
 8001b42:	7bfb      	ldrb	r3, [r7, #15]
 8001b44:	025b      	lsls	r3, r3, #9
 8001b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b4a:	431a      	orrs	r2, r3
 8001b4c:	4b50      	ldr	r3, [pc, #320]	; (8001c90 <readReg+0x1b0>)
 8001b4e:	619a      	str	r2, [r3, #24]
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	105b      	asrs	r3, r3, #1
 8001b5c:	f003 0310 	and.w	r3, r3, #16
 8001b60:	431a      	orrs	r2, r3
 8001b62:	7bfb      	ldrb	r3, [r7, #15]
 8001b64:	005b      	lsls	r3, r3, #1
 8001b66:	f003 0320 	and.w	r3, r3, #32
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	7bfb      	ldrb	r3, [r7, #15]
 8001b6e:	f003 0308 	and.w	r3, r3, #8
 8001b72:	431a      	orrs	r2, r3
 8001b74:	4b45      	ldr	r3, [pc, #276]	; (8001c8c <readReg+0x1ac>)
 8001b76:	619a      	str	r2, [r3, #24]
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	019b      	lsls	r3, r3, #6
 8001b7c:	4a45      	ldr	r2, [pc, #276]	; (8001c94 <readReg+0x1b4>)
 8001b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b82:	6193      	str	r3, [r2, #24]
 8001b84:	2102      	movs	r1, #2
 8001b86:	4842      	ldr	r0, [pc, #264]	; (8001c90 <readReg+0x1b0>)
 8001b88:	f7ff f804 	bl	8000b94 <PIN_LOW>
 8001b8c:	2102      	movs	r1, #2
 8001b8e:	4840      	ldr	r0, [pc, #256]	; (8001c90 <readReg+0x1b0>)
 8001b90:	f7ff f800 	bl	8000b94 <PIN_LOW>
 8001b94:	2102      	movs	r1, #2
 8001b96:	483e      	ldr	r0, [pc, #248]	; (8001c90 <readReg+0x1b0>)
 8001b98:	f7fe fffc 	bl	8000b94 <PIN_LOW>
 8001b9c:	2102      	movs	r1, #2
 8001b9e:	483c      	ldr	r0, [pc, #240]	; (8001c90 <readReg+0x1b0>)
 8001ba0:	f7ff f808 	bl	8000bb4 <PIN_HIGH>
 8001ba4:	2102      	movs	r1, #2
 8001ba6:	483a      	ldr	r0, [pc, #232]	; (8001c90 <readReg+0x1b0>)
 8001ba8:	f7ff f804 	bl	8000bb4 <PIN_HIGH>
 8001bac:	4b38      	ldr	r3, [pc, #224]	; (8001c90 <readReg+0x1b0>)
 8001bae:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8001bb2:	619a      	str	r2, [r3, #24]
 8001bb4:	4b35      	ldr	r3, [pc, #212]	; (8001c8c <readReg+0x1ac>)
 8001bb6:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8001bba:	619a      	str	r2, [r3, #24]
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <readReg+0x1b4>)
 8001bbe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001bc2:	619a      	str	r2, [r3, #24]
 8001bc4:	7bbb      	ldrb	r3, [r7, #14]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8001bcc:	7bbb      	ldrb	r3, [r7, #14]
 8001bce:	021b      	lsls	r3, r3, #8
 8001bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd4:	431a      	orrs	r2, r3
 8001bd6:	7bbb      	ldrb	r3, [r7, #14]
 8001bd8:	025b      	lsls	r3, r3, #9
 8001bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bde:	431a      	orrs	r2, r3
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <readReg+0x1b0>)
 8001be2:	619a      	str	r2, [r3, #24]
 8001be4:	7bbb      	ldrb	r3, [r7, #14]
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8001bec:	7bbb      	ldrb	r3, [r7, #14]
 8001bee:	105b      	asrs	r3, r3, #1
 8001bf0:	f003 0310 	and.w	r3, r3, #16
 8001bf4:	431a      	orrs	r2, r3
 8001bf6:	7bbb      	ldrb	r3, [r7, #14]
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	f003 0320 	and.w	r3, r3, #32
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	7bbb      	ldrb	r3, [r7, #14]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	431a      	orrs	r2, r3
 8001c08:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <readReg+0x1ac>)
 8001c0a:	619a      	str	r2, [r3, #24]
 8001c0c:	7bbb      	ldrb	r3, [r7, #14]
 8001c0e:	019b      	lsls	r3, r3, #6
 8001c10:	4a20      	ldr	r2, [pc, #128]	; (8001c94 <readReg+0x1b4>)
 8001c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c16:	6193      	str	r3, [r2, #24]
 8001c18:	2102      	movs	r1, #2
 8001c1a:	481d      	ldr	r0, [pc, #116]	; (8001c90 <readReg+0x1b0>)
 8001c1c:	f7fe ffba 	bl	8000b94 <PIN_LOW>
 8001c20:	2102      	movs	r1, #2
 8001c22:	481b      	ldr	r0, [pc, #108]	; (8001c90 <readReg+0x1b0>)
 8001c24:	f7fe ffb6 	bl	8000b94 <PIN_LOW>
 8001c28:	2102      	movs	r1, #2
 8001c2a:	4819      	ldr	r0, [pc, #100]	; (8001c90 <readReg+0x1b0>)
 8001c2c:	f7fe ffb2 	bl	8000b94 <PIN_LOW>
 8001c30:	2102      	movs	r1, #2
 8001c32:	4817      	ldr	r0, [pc, #92]	; (8001c90 <readReg+0x1b0>)
 8001c34:	f7fe ffbe 	bl	8000bb4 <PIN_HIGH>
 8001c38:	2102      	movs	r1, #2
 8001c3a:	4815      	ldr	r0, [pc, #84]	; (8001c90 <readReg+0x1b0>)
 8001c3c:	f7fe ffba 	bl	8000bb4 <PIN_HIGH>
 8001c40:	2110      	movs	r1, #16
 8001c42:	4813      	ldr	r0, [pc, #76]	; (8001c90 <readReg+0x1b0>)
 8001c44:	f7fe ffb6 	bl	8000bb4 <PIN_HIGH>
    setReadDir();
 8001c48:	f7ff f8de 	bl	8000e08 <setReadDir>
    delay(1);    //1us should be adequate
 8001c4c:	2001      	movs	r0, #1
 8001c4e:	f002 fbd5 	bl	80043fc <delay>
    //    READ_16(ret);
    do { ret = read16bits(); }while (--index >= 0);  //need to test with SSD1963
 8001c52:	f7ff fe53 	bl	80018fc <read16bits>
 8001c56:	4603      	mov	r3, r0
 8001c58:	81bb      	strh	r3, [r7, #12]
 8001c5a:	797b      	ldrb	r3, [r7, #5]
 8001c5c:	3b01      	subs	r3, #1
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	717b      	strb	r3, [r7, #5]
 8001c62:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	daf3      	bge.n	8001c52 <readReg+0x172>
    RD_IDLE;
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	4808      	ldr	r0, [pc, #32]	; (8001c90 <readReg+0x1b0>)
 8001c6e:	f7fe ffa1 	bl	8000bb4 <PIN_HIGH>
    CS_IDLE;
 8001c72:	2101      	movs	r1, #1
 8001c74:	4805      	ldr	r0, [pc, #20]	; (8001c8c <readReg+0x1ac>)
 8001c76:	f7fe ff9d 	bl	8000bb4 <PIN_HIGH>
    setWriteDir();
 8001c7a:	f7ff f8f3 	bl	8000e64 <setWriteDir>
    return ret;
 8001c7e:	89bb      	ldrh	r3, [r7, #12]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3710      	adds	r7, #16
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	20000032 	.word	0x20000032
 8001c8c:	40020400 	.word	0x40020400
 8001c90:	40020000 	.word	0x40020000
 8001c94:	40020800 	.word	0x40020800

08001c98 <readReg32>:


uint32_t readReg32(uint16_t reg)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff ff1a 	bl	8001ae0 <readReg>
 8001cac:	4603      	mov	r3, r0
 8001cae:	81fb      	strh	r3, [r7, #14]
    uint16_t l = readReg(reg, 1);
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff13 	bl	8001ae0 <readReg>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	81bb      	strh	r3, [r7, #12]
    return ((uint32_t) h << 16) | (l);
 8001cbe:	89fb      	ldrh	r3, [r7, #14]
 8001cc0:	041a      	lsls	r2, r3, #16
 8001cc2:	89bb      	ldrh	r3, [r7, #12]
 8001cc4:	4313      	orrs	r3, r2
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3710      	adds	r7, #16
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <readReg40>:


uint32_t readReg40(uint16_t reg)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	80fb      	strh	r3, [r7, #6]
    uint16_t h = readReg(reg, 0);
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	2100      	movs	r1, #0
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff feff 	bl	8001ae0 <readReg>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	81fb      	strh	r3, [r7, #14]
    uint16_t m = readReg(reg, 1);
 8001ce6:	88fb      	ldrh	r3, [r7, #6]
 8001ce8:	2101      	movs	r1, #1
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff fef8 	bl	8001ae0 <readReg>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	81bb      	strh	r3, [r7, #12]
    uint16_t l = readReg(reg, 2);
 8001cf4:	88fb      	ldrh	r3, [r7, #6]
 8001cf6:	2102      	movs	r1, #2
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fef1 	bl	8001ae0 <readReg>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	817b      	strh	r3, [r7, #10]
    return ((uint32_t) h << 24) | (m << 8) | (l >> 8);
 8001d02:	89fb      	ldrh	r3, [r7, #14]
 8001d04:	061b      	lsls	r3, r3, #24
 8001d06:	89ba      	ldrh	r2, [r7, #12]
 8001d08:	0212      	lsls	r2, r2, #8
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	897a      	ldrh	r2, [r7, #10]
 8001d0e:	0a12      	lsrs	r2, r2, #8
 8001d10:	b292      	uxth	r2, r2
 8001d12:	4313      	orrs	r3, r2
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <tft_init>:


void tft_init(uint16_t ID)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
	int dummy=0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
    int16_t *p16;               //so we can "write" to a const protected variable.
    const uint8_t *table8_ads = NULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    int16_t table_size;
    _lcd_xor = 0;
 8001d2e:	4be1      	ldr	r3, [pc, #900]	; (80020b4 <tft_init+0x398>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	801a      	strh	r2, [r3, #0]
    switch (_lcd_ID = ID) {
 8001d34:	4ae0      	ldr	r2, [pc, #896]	; (80020b8 <tft_init+0x39c>)
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	8013      	strh	r3, [r2, #0]
 8001d3a:	4bdf      	ldr	r3, [pc, #892]	; (80020b8 <tft_init+0x39c>)
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	f24c 5205 	movw	r2, #50437	; 0xc505
 8001d42:	4293      	cmp	r3, r2
 8001d44:	f000 82cc 	beq.w	80022e0 <tft_init+0x5c4>
 8001d48:	f24c 5205 	movw	r2, #50437	; 0xc505
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	f300 8303 	bgt.w	8002358 <tft_init+0x63c>
 8001d52:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001d56:	4293      	cmp	r3, r2
 8001d58:	f000 82cb 	beq.w	80022f2 <tft_init+0x5d6>
 8001d5c:	f24b 5209 	movw	r2, #46345	; 0xb509
 8001d60:	4293      	cmp	r3, r2
 8001d62:	f300 82f9 	bgt.w	8002358 <tft_init+0x63c>
 8001d66:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	f000 82b8 	beq.w	80022e0 <tft_init+0x5c4>
 8001d70:	f24b 5205 	movw	r2, #46341	; 0xb505
 8001d74:	4293      	cmp	r3, r2
 8001d76:	f300 82ef 	bgt.w	8002358 <tft_init+0x63c>
 8001d7a:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	f000 8239 	beq.w	80021f6 <tft_init+0x4da>
 8001d84:	f64a 4211 	movw	r2, #44049	; 0xac11
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	f300 82e5 	bgt.w	8002358 <tft_init+0x63c>
 8001d8e:	f249 4288 	movw	r2, #38024	; 0x9488
 8001d92:	4293      	cmp	r3, r2
 8001d94:	f300 82e0 	bgt.w	8002358 <tft_init+0x63c>
 8001d98:	f249 4287 	movw	r2, #38023	; 0x9487
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	f280 8288 	bge.w	80022b2 <tft_init+0x596>
 8001da2:	f249 4286 	movw	r2, #38022	; 0x9486
 8001da6:	4293      	cmp	r3, r2
 8001da8:	f000 8269 	beq.w	800227e <tft_init+0x562>
 8001dac:	f249 4286 	movw	r2, #38022	; 0x9486
 8001db0:	4293      	cmp	r3, r2
 8001db2:	f300 82d1 	bgt.w	8002358 <tft_init+0x63c>
 8001db6:	f249 4281 	movw	r2, #38017	; 0x9481
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	f000 8248 	beq.w	8002250 <tft_init+0x534>
 8001dc0:	f249 4281 	movw	r2, #38017	; 0x9481
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	f300 82c7 	bgt.w	8002358 <tft_init+0x63c>
 8001dca:	f249 3241 	movw	r2, #37697	; 0x9341
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	f300 82c2 	bgt.w	8002358 <tft_init+0x63c>
 8001dd4:	f249 3202 	movw	r2, #37634	; 0x9302
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	f280 80a5 	bge.w	8001f28 <tft_init+0x20c>
 8001dde:	f249 0290 	movw	r2, #37008	; 0x9090
 8001de2:	4293      	cmp	r3, r2
 8001de4:	f000 818f 	beq.w	8002106 <tft_init+0x3ea>
 8001de8:	f249 0290 	movw	r2, #37008	; 0x9090
 8001dec:	4293      	cmp	r3, r2
 8001dee:	f300 82b3 	bgt.w	8002358 <tft_init+0x63c>
 8001df2:	f248 3257 	movw	r2, #33623	; 0x8357
 8001df6:	4293      	cmp	r3, r2
 8001df8:	f000 8180 	beq.w	80020fc <tft_init+0x3e0>
 8001dfc:	f248 3257 	movw	r2, #33623	; 0x8357
 8001e00:	4293      	cmp	r3, r2
 8001e02:	f300 82a9 	bgt.w	8002358 <tft_init+0x63c>
 8001e06:	f248 0231 	movw	r2, #32817	; 0x8031
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	f000 816d 	beq.w	80020ea <tft_init+0x3ce>
 8001e10:	f248 0231 	movw	r2, #32817	; 0x8031
 8001e14:	4293      	cmp	r3, r2
 8001e16:	f300 829f 	bgt.w	8002358 <tft_init+0x63c>
 8001e1a:	f247 7296 	movw	r2, #30614	; 0x7796
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	f000 8242 	beq.w	80022a8 <tft_init+0x58c>
 8001e24:	f247 7296 	movw	r2, #30614	; 0x7796
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	f300 8295 	bgt.w	8002358 <tft_init+0x63c>
 8001e2e:	f247 7293 	movw	r2, #30611	; 0x7793
 8001e32:	4293      	cmp	r3, r2
 8001e34:	f000 825d 	beq.w	80022f2 <tft_init+0x5d6>
 8001e38:	f247 7293 	movw	r2, #30611	; 0x7793
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	f300 828b 	bgt.w	8002358 <tft_init+0x63c>
 8001e42:	f247 7289 	movw	r2, #30601	; 0x7789
 8001e46:	4293      	cmp	r3, r2
 8001e48:	f000 8146 	beq.w	80020d8 <tft_init+0x3bc>
 8001e4c:	f247 7289 	movw	r2, #30601	; 0x7789
 8001e50:	4293      	cmp	r3, r2
 8001e52:	f300 8281 	bgt.w	8002358 <tft_init+0x63c>
 8001e56:	f646 0209 	movw	r2, #26633	; 0x6809
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	f000 8194 	beq.w	8002188 <tft_init+0x46c>
 8001e60:	f646 0209 	movw	r2, #26633	; 0x6809
 8001e64:	4293      	cmp	r3, r2
 8001e66:	f300 8277 	bgt.w	8002358 <tft_init+0x63c>
 8001e6a:	f245 4208 	movw	r2, #21512	; 0x5408
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	f000 817a 	beq.w	8002168 <tft_init+0x44c>
 8001e74:	f245 4208 	movw	r2, #21512	; 0x5408
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	f300 826d 	bgt.w	8002358 <tft_init+0x63c>
 8001e7e:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e82:	4293      	cmp	r3, r2
 8001e84:	f000 8100 	beq.w	8002088 <tft_init+0x36c>
 8001e88:	f245 3210 	movw	r2, #21264	; 0x5310
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	f300 8263 	bgt.w	8002358 <tft_init+0x63c>
 8001e92:	f242 0253 	movw	r2, #8275	; 0x2053
 8001e96:	4293      	cmp	r3, r2
 8001e98:	f000 81a8 	beq.w	80021ec <tft_init+0x4d0>
 8001e9c:	f242 0253 	movw	r2, #8275	; 0x2053
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	f300 8259 	bgt.w	8002358 <tft_init+0x63c>
 8001ea6:	f241 6202 	movw	r2, #5634	; 0x1602
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	f000 8195 	beq.w	80021da <tft_init+0x4be>
 8001eb0:	f241 6202 	movw	r2, #5634	; 0x1602
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	f300 824f 	bgt.w	8002358 <tft_init+0x63c>
 8001eba:	f241 5281 	movw	r2, #5505	; 0x1581
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	f000 81c1 	beq.w	8002246 <tft_init+0x52a>
 8001ec4:	f241 5281 	movw	r2, #5505	; 0x1581
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	f300 8245 	bgt.w	8002358 <tft_init+0x63c>
 8001ece:	f241 5226 	movw	r2, #5414	; 0x1526
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	f000 80cf 	beq.w	8002076 <tft_init+0x35a>
 8001ed8:	f241 5226 	movw	r2, #5414	; 0x1526
 8001edc:	4293      	cmp	r3, r2
 8001ede:	f300 823b 	bgt.w	8002358 <tft_init+0x63c>
 8001ee2:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001ee6:	f000 80bd 	beq.w	8002064 <tft_init+0x348>
 8001eea:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 8001eee:	f300 8233 	bgt.w	8002358 <tft_init+0x63c>
 8001ef2:	f241 5211 	movw	r2, #5393	; 0x1511
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	f000 80a0 	beq.w	800203c <tft_init+0x320>
 8001efc:	f241 5211 	movw	r2, #5393	; 0x1511
 8001f00:	4293      	cmp	r3, r2
 8001f02:	f300 8229 	bgt.w	8002358 <tft_init+0x63c>
 8001f06:	f241 5205 	movw	r2, #5381	; 0x1505
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	f000 8131 	beq.w	8002172 <tft_init+0x456>
 8001f10:	f241 5205 	movw	r2, #5381	; 0x1505
 8001f14:	4293      	cmp	r3, r2
 8001f16:	f300 821f 	bgt.w	8002358 <tft_init+0x63c>
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	f000 811f 	beq.w	800215e <tft_init+0x442>
 8001f20:	2b99      	cmp	r3, #153	; 0x99
 8001f22:	f000 8107 	beq.w	8002134 <tft_init+0x418>
 8001f26:	e217      	b.n	8002358 <tft_init+0x63c>
 8001f28:	f5a3 4313 	sub.w	r3, r3, #37632	; 0x9300
 8001f2c:	3b02      	subs	r3, #2
 8001f2e:	2b3f      	cmp	r3, #63	; 0x3f
 8001f30:	f200 8212 	bhi.w	8002358 <tft_init+0x63c>
 8001f34:	a201      	add	r2, pc, #4	; (adr r2, 8001f3c <tft_init+0x220>)
 8001f36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3a:	bf00      	nop
 8001f3c:	08002201 	.word	0x08002201
 8001f40:	08002359 	.word	0x08002359
 8001f44:	08002359 	.word	0x08002359
 8001f48:	08002359 	.word	0x08002359
 8001f4c:	08002359 	.word	0x08002359
 8001f50:	08002359 	.word	0x08002359
 8001f54:	08002359 	.word	0x08002359
 8001f58:	08002359 	.word	0x08002359
 8001f5c:	08002359 	.word	0x08002359
 8001f60:	08002359 	.word	0x08002359
 8001f64:	08002359 	.word	0x08002359
 8001f68:	08002359 	.word	0x08002359
 8001f6c:	08002359 	.word	0x08002359
 8001f70:	08002359 	.word	0x08002359
 8001f74:	08002359 	.word	0x08002359
 8001f78:	08002359 	.word	0x08002359
 8001f7c:	08002359 	.word	0x08002359
 8001f80:	08002359 	.word	0x08002359
 8001f84:	08002359 	.word	0x08002359
 8001f88:	08002359 	.word	0x08002359
 8001f8c:	08002359 	.word	0x08002359
 8001f90:	08002359 	.word	0x08002359
 8001f94:	08002359 	.word	0x08002359
 8001f98:	08002359 	.word	0x08002359
 8001f9c:	08002359 	.word	0x08002359
 8001fa0:	08002359 	.word	0x08002359
 8001fa4:	08002359 	.word	0x08002359
 8001fa8:	08002359 	.word	0x08002359
 8001fac:	08002359 	.word	0x08002359
 8001fb0:	08002359 	.word	0x08002359
 8001fb4:	08002173 	.word	0x08002173
 8001fb8:	08002359 	.word	0x08002359
 8001fbc:	08002359 	.word	0x08002359
 8001fc0:	08002359 	.word	0x08002359
 8001fc4:	08002359 	.word	0x08002359
 8001fc8:	08002193 	.word	0x08002193
 8001fcc:	08002359 	.word	0x08002359
 8001fd0:	080021b3 	.word	0x080021b3
 8001fd4:	08002193 	.word	0x08002193
 8001fd8:	08002215 	.word	0x08002215
 8001fdc:	08002359 	.word	0x08002359
 8001fe0:	08002359 	.word	0x08002359
 8001fe4:	08002359 	.word	0x08002359
 8001fe8:	08002359 	.word	0x08002359
 8001fec:	08002359 	.word	0x08002359
 8001ff0:	08002359 	.word	0x08002359
 8001ff4:	08002359 	.word	0x08002359
 8001ff8:	0800219d 	.word	0x0800219d
 8001ffc:	08002359 	.word	0x08002359
 8002000:	08002359 	.word	0x08002359
 8002004:	08002359 	.word	0x08002359
 8002008:	0800219d 	.word	0x0800219d
 800200c:	08002359 	.word	0x08002359
 8002010:	08002359 	.word	0x08002359
 8002014:	0800220b 	.word	0x0800220b
 8002018:	08002359 	.word	0x08002359
 800201c:	08002359 	.word	0x08002359
 8002020:	08002359 	.word	0x08002359
 8002024:	08002359 	.word	0x08002359
 8002028:	08002359 	.word	0x08002359
 800202c:	08002359 	.word	0x08002359
 8002030:	08002359 	.word	0x08002359
 8002034:	0800222b 	.word	0x0800222b
 8002038:	08002235 	.word	0x08002235
        init_table16(SSD1289_regValues, sizeof(SSD1289_regValues));
        break;
#endif

    case 0x1511:                // Unknown from Levy
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1;   //extra read_8(dummy)
 800203c:	4b1f      	ldr	r3, [pc, #124]	; (80020bc <tft_init+0x3a0>)
 800203e:	2203      	movs	r2, #3
 8002040:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61511_regValues[]  = {
			0xB0, 1, 0x00,       //Command Access Protect
        };
        table8_ads = R61511_regValues, table_size = sizeof(R61511_regValues);
 8002042:	4b1f      	ldr	r3, [pc, #124]	; (80020c0 <tft_init+0x3a4>)
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	2303      	movs	r3, #3
 8002048:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800204a:	4b1e      	ldr	r3, [pc, #120]	; (80020c4 <tft_init+0x3a8>)
 800204c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002054:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <tft_init+0x3ac>)
 8002058:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002060:	801a      	strh	r2, [r3, #0]
        break;
 8002062:	e17f      	b.n	8002364 <tft_init+0x648>

    case 0x1520:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002064:	4b15      	ldr	r3, [pc, #84]	; (80020bc <tft_init+0x3a0>)
 8002066:	f240 4213 	movw	r2, #1043	; 0x413
 800206a:	801a      	strh	r2, [r3, #0]
        static const uint8_t R61520_regValues[]  = {
            0xB0, 1, 0x00,      //Command Access Protect
            0xC0, 1, 0x0A,      //DM=1, BGR=1
        };
        table8_ads = R61520_regValues, table_size = sizeof(R61520_regValues);
 800206c:	4b17      	ldr	r3, [pc, #92]	; (80020cc <tft_init+0x3b0>)
 800206e:	61fb      	str	r3, [r7, #28]
 8002070:	2306      	movs	r3, #6
 8002072:	837b      	strh	r3, [r7, #26]
        break;
 8002074:	e176      	b.n	8002364 <tft_init+0x648>

	case 0x1526:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002076:	4b11      	ldr	r3, [pc, #68]	; (80020bc <tft_init+0x3a0>)
 8002078:	f240 4213 	movw	r2, #1043	; 0x413
 800207c:	801a      	strh	r2, [r3, #0]
            0xB0, 1, 0x03,      //Command Access
            0xE2, 1, 0x3F,      //Command Write Access
            0xC0, 1, 0x22,      //REV=0, BGR=1, SS=0
            0xE2, 1, 0x00,      //Command Write Protect
        };
        table8_ads = R61526_regValues, table_size = sizeof(R61526_regValues);
 800207e:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <tft_init+0x3b4>)
 8002080:	61fb      	str	r3, [r7, #28]
 8002082:	230c      	movs	r3, #12
 8002084:	837b      	strh	r3, [r7, #26]
        break;
 8002086:	e16d      	b.n	8002364 <tft_init+0x648>
        init_table16(LGDP4535_regValues, sizeof(LGDP4535_regValues));
        break;
#endif

    case 0x5310:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | INVERT_RGB | READ_24BITS;
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <tft_init+0x3a0>)
 800208a:	f640 6213 	movw	r2, #3603	; 0xe13
 800208e:	801a      	strh	r2, [r3, #0]
        static const uint8_t NT35310_regValues[]  = {        //
            TFTLCD_DELAY8, 10,    //just some dummy
        };
        table8_ads = NT35310_regValues, table_size = sizeof(NT35310_regValues);
 8002090:	4b10      	ldr	r3, [pc, #64]	; (80020d4 <tft_init+0x3b8>)
 8002092:	61fb      	str	r3, [r7, #28]
 8002094:	2302      	movs	r3, #2
 8002096:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002098:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <tft_init+0x3a8>)
 800209a:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80020a2:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <tft_init+0x3ac>)
 80020a6:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80020ae:	801a      	strh	r2, [r3, #0]
        break;
 80020b0:	e158      	b.n	8002364 <tft_init+0x648>
 80020b2:	bf00      	nop
 80020b4:	200000dc 	.word	0x200000dc
 80020b8:	200000da 	.word	0x200000da
 80020bc:	200000cc 	.word	0x200000cc
 80020c0:	080066d0 	.word	0x080066d0
 80020c4:	08000c49 	.word	0x08000c49
 80020c8:	08000c31 	.word	0x08000c31
 80020cc:	080066d4 	.word	0x080066d4
 80020d0:	080066dc 	.word	0x080066dc
 80020d4:	080066e8 	.word	0x080066e8
        init_table16(ST7781_regValues, sizeof(ST7781_regValues));
        break;
#endif

    case 0x7789:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80020d8:	4b8d      	ldr	r3, [pc, #564]	; (8002310 <tft_init+0x5f4>)
 80020da:	f240 4213 	movw	r2, #1043	; 0x413
 80020de:	801a      	strh	r2, [r3, #0]
            (0x55), 1, 0x90,    //WRCACE  [00]
            (0xD0), 2, 0xA4, 0xA1,      //PWCTRL1: Power Control 1 [A4 A1]
            (0xE0), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x2A, 0x3C, 0x55, 0x4B, 0x08, 0x16, 0x14, 0x19, 0x20,     //PVGAMCTRL: Positive Voltage Gamma control
            (0xE1), 14, 0xD0, 0x00, 0x06, 0x09, 0x0B, 0x29, 0x36, 0x54, 0x4B, 0x0D, 0x16, 0x14, 0x21, 0x20,     //NVGAMCTRL: Negative Voltage Gamma control
        };
        table8_ads = ST7789_regValues, table_size = sizeof(ST7789_regValues); //
 80020e0:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <tft_init+0x5f8>)
 80020e2:	61fb      	str	r3, [r7, #28]
 80020e4:	2341      	movs	r3, #65	; 0x41
 80020e6:	837b      	strh	r3, [r7, #26]
        break;
 80020e8:	e13c      	b.n	8002364 <tft_init+0x648>

    case 0x8031:      //Unknown BangGood thanks PrinceCharles
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 80020ea:	4b89      	ldr	r3, [pc, #548]	; (8002310 <tft_init+0x5f4>)
 80020ec:	f241 4213 	movw	r2, #5139	; 0x1413
 80020f0:	801a      	strh	r2, [r3, #0]
        static const uint8_t FK8031_regValues[]  = {
            // 0xF2:8.2 = SM, 0xF2:8.0 = REV. invertDisplay(), vertScroll() do not work
            0xF2,11, 0x16, 0x16, 0x03, 0x08, 0x08, 0x08, 0x08, 0x10, 0x04, 0x16, 0x16, // f.k. 0xF2:8.2 SM=1
            0xFD, 3, 0x11, 0x02, 0x35,     //f.k 0xFD:1.1 creates contiguous scan lins
        };
        table8_ads = FK8031_regValues, table_size = sizeof(FK8031_regValues);
 80020f2:	4b89      	ldr	r3, [pc, #548]	; (8002318 <tft_init+0x5fc>)
 80020f4:	61fb      	str	r3, [r7, #28]
 80020f6:	2312      	movs	r3, #18
 80020f8:	837b      	strh	r3, [r7, #26]
        break;
 80020fa:	e133      	b.n	8002364 <tft_init+0x648>
        //        init_table(HX8347G_2_regValues, sizeof(HX8347G_2_regValues));
        break;
#endif

    case 0x8357:                //BIG CHANGE: HX8357-B is now 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN;
 80020fc:	4b84      	ldr	r3, [pc, #528]	; (8002310 <tft_init+0x5f4>)
 80020fe:	f241 4203 	movw	r2, #5123	; 0x1403
 8002102:	801a      	strh	r2, [r3, #0]
        goto common_8357;
 8002104:	e003      	b.n	800210e <tft_init+0x3f2>
    case 0x9090:                //BIG CHANGE: HX8357-D was 0x8357
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8002106:	4b82      	ldr	r3, [pc, #520]	; (8002310 <tft_init+0x5f4>)
 8002108:	f241 4213 	movw	r2, #5139	; 0x1413
 800210c:	801a      	strh	r2, [r3, #0]
      common_8357:
	  	dummy=1;
 800210e:	2301      	movs	r3, #1
 8002110:	617b      	str	r3, [r7, #20]
        static const uint8_t HX8357C_regValues[]  = {
            TFTLCD_DELAY8, 1,  //dummy table
        };
        table8_ads = HX8357C_regValues, table_size = sizeof(HX8357C_regValues);
 8002112:	4b82      	ldr	r3, [pc, #520]	; (800231c <tft_init+0x600>)
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	2302      	movs	r3, #2
 8002118:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800211a:	4b81      	ldr	r3, [pc, #516]	; (8002320 <tft_init+0x604>)
 800211c:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002124:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002126:	4b7f      	ldr	r3, [pc, #508]	; (8002324 <tft_init+0x608>)
 8002128:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002130:	801a      	strh	r2, [r3, #0]
        break;
 8002132:	e117      	b.n	8002364 <tft_init+0x648>

    case 0x0099:                //HX8357-D matches datasheet
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | REV_SCREEN | READ_24BITS;
 8002134:	4b76      	ldr	r3, [pc, #472]	; (8002310 <tft_init+0x5f4>)
 8002136:	f241 4213 	movw	r2, #5139	; 0x1413
 800213a:	801a      	strh	r2, [r3, #0]
#ifdef SUPPORT_8357D_GAMMA
            // HX8357D_SETGAMMA [0B 0C 11 1D 25 37 43 4B 4E 47 41 39 35 31 2E 21 1C 1D 1D 26 31 44 4E 56 44 3F 39 33 31 2E 28 1D E0 01]
            (0xE0),34, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x02, 0x0A, 0x11, 0x1D, 0x23, 0x35, 0x41, 0x4B, 0x4B, 0x42, 0x3A, 0x27, 0x1B, 0x08, 0x09, 0x03, 0x00, 0x01,
#endif
        };
        table8_ads = HX8357_99_regValues, table_size = sizeof(HX8357_99_regValues);
 800213c:	4b7a      	ldr	r3, [pc, #488]	; (8002328 <tft_init+0x60c>)
 800213e:	61fb      	str	r3, [r7, #28]
 8002140:	231d      	movs	r3, #29
 8002142:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 8002144:	4b76      	ldr	r3, [pc, #472]	; (8002320 <tft_init+0x604>)
 8002146:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800214e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002150:	4b74      	ldr	r3, [pc, #464]	; (8002324 <tft_init+0x608>)
 8002152:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800215a:	801a      	strh	r2, [r3, #0]
        break;
 800215c:	e102      	b.n	8002364 <tft_init+0x648>
        *p16 = 176;
        break;
#endif

    case 0x0001:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS; //no RGB bug. thanks Ivo_Deshev
 800215e:	4b6c      	ldr	r3, [pc, #432]	; (8002310 <tft_init+0x5f4>)
 8002160:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8002164:	801a      	strh	r2, [r3, #0]
        goto common_9320;
 8002166:	e008      	b.n	800217a <tft_init+0x45e>
    case 0x5408:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR; //Red 2.4" thanks jorgenv, Ardlab_Gent
 8002168:	4b69      	ldr	r3, [pc, #420]	; (8002310 <tft_init+0x5f4>)
 800216a:	f241 0204 	movw	r2, #4100	; 0x1004
 800216e:	801a      	strh	r2, [r3, #0]
//        _lcd_capable = 0 | REV_SCREEN | READ_BGR | INVERT_GS; //Blue 2.8" might be different
        goto common_9320;
 8002170:	e003      	b.n	800217a <tft_init+0x45e>
    case 0x1505:                //R61505 thanks Ravi_kanchan2004. R61505V, R61505W different
    case 0x9320:
        _lcd_capable = 0 | REV_SCREEN | READ_BGR;
 8002172:	4b67      	ldr	r3, [pc, #412]	; (8002310 <tft_init+0x5f4>)
 8002174:	f241 0204 	movw	r2, #4100	; 0x1004
 8002178:	801a      	strh	r2, [r3, #0]
      common_9320:
	    dummy=1;
 800217a:	2301      	movs	r3, #1
 800217c:	617b      	str	r3, [r7, #20]
            0x0098, 0x0000,
            //-----Display on-----------------------
            0x0007, 0x0173,
            TFTLCD_DELAY, 50,
        };
        init_table16(ILI9320_regValues, sizeof(ILI9320_regValues));
 800217e:	21d8      	movs	r1, #216	; 0xd8
 8002180:	486a      	ldr	r0, [pc, #424]	; (800232c <tft_init+0x610>)
 8002182:	f7ff fb3e 	bl	8001802 <init_table16>
        break;
 8002186:	e0ed      	b.n	8002364 <tft_init+0x648>
    case 0x6809:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS | AUTO_READINC;
 8002188:	4b61      	ldr	r3, [pc, #388]	; (8002310 <tft_init+0x5f4>)
 800218a:	f241 1202 	movw	r2, #4354	; 0x1102
 800218e:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 8002190:	e008      	b.n	80021a4 <tft_init+0x488>
    case 0x9328:
    case 0x9325:
        _lcd_capable = 0 | REV_SCREEN | INVERT_GS;
 8002192:	4b5f      	ldr	r3, [pc, #380]	; (8002310 <tft_init+0x5f4>)
 8002194:	f44f 5288 	mov.w	r2, #4352	; 0x1100
 8002198:	801a      	strh	r2, [r3, #0]
        goto common_93x5;
 800219a:	e003      	b.n	80021a4 <tft_init+0x488>
    case 0x9331:
    case 0x9335:
        _lcd_capable = 0 | REV_SCREEN;
 800219c:	4b5c      	ldr	r3, [pc, #368]	; (8002310 <tft_init+0x5f4>)
 800219e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021a2:	801a      	strh	r2, [r3, #0]
      common_93x5:
	    dummy=1;
 80021a4:	2301      	movs	r3, #1
 80021a6:	617b      	str	r3, [r7, #20]
            //-------------- Panel Control -------------------//
            0x0090, 0x0010,
            0x0092, 0x0000,
            0x0007, 0x0133,     // 262K color and display ON
        };
        init_table16(ILI9325_regValues, sizeof(ILI9325_regValues));
 80021a8:	21cc      	movs	r1, #204	; 0xcc
 80021aa:	4861      	ldr	r0, [pc, #388]	; (8002330 <tft_init+0x614>)
 80021ac:	f7ff fb29 	bl	8001802 <init_table16>
        break;
 80021b0:	e0d8      	b.n	8002364 <tft_init+0x648>
        *p16 = 240;
        break;
#endif

    case 0x9327:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 80021b2:	4b57      	ldr	r3, [pc, #348]	; (8002310 <tft_init+0x5f4>)
 80021b4:	f240 4203 	movw	r2, #1027	; 0x403
 80021b8:	801a      	strh	r2, [r3, #0]
            //            0xC8, 15, 0x00, 0x77, 0x77, 0x04, 0x04, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
            0xCA, 1, 0x00,      //DGC LUT ???
            0xEA, 1, 0x80,      //3-Gamma Function Enable
            //                     0xB0, 1, 0x03,      //Enable Protect
        };
        table8_ads = ILI9327_regValues, table_size = sizeof(ILI9327_regValues);
 80021ba:	4b5e      	ldr	r3, [pc, #376]	; (8002334 <tft_init+0x618>)
 80021bc:	61fb      	str	r3, [r7, #28]
 80021be:	231e      	movs	r3, #30
 80021c0:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80021c2:	4b57      	ldr	r3, [pc, #348]	; (8002320 <tft_init+0x604>)
 80021c4:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 80021c6:	693b      	ldr	r3, [r7, #16]
 80021c8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80021cc:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80021ce:	4b55      	ldr	r3, [pc, #340]	; (8002324 <tft_init+0x608>)
 80021d0:	613b      	str	r3, [r7, #16]
        *p16 = 240;
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	22f0      	movs	r2, #240	; 0xf0
 80021d6:	801a      	strh	r2, [r3, #0]
        break;
 80021d8:	e0c4      	b.n	8002364 <tft_init+0x648>
    case 0x1602:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //does not readGRAM
 80021da:	4b4d      	ldr	r3, [pc, #308]	; (8002310 <tft_init+0x5f4>)
 80021dc:	f240 4203 	movw	r2, #1027	; 0x403
 80021e0:	801a      	strh	r2, [r3, #0]
        static const uint8_t XX1602_regValues[]  = {
            0xB8, 1, 0x01,      //GS [00]
            0xC0, 1, 0x0E,      //??Power [0A]
        };
        table8_ads = XX1602_regValues, table_size = sizeof(XX1602_regValues);
 80021e2:	4b55      	ldr	r3, [pc, #340]	; (8002338 <tft_init+0x61c>)
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	2306      	movs	r3, #6
 80021e8:	837b      	strh	r3, [r7, #26]
        break;
 80021ea:	e0bb      	b.n	8002364 <tft_init+0x648>

    case 0x2053:    //weird from BangGood
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN | READ_BGR;
 80021ec:	4b48      	ldr	r3, [pc, #288]	; (8002310 <tft_init+0x5f4>)
 80021ee:	f241 4217 	movw	r2, #5143	; 0x1417
 80021f2:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80021f4:	e012      	b.n	800221c <tft_init+0x500>
    case 0xAC11:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN; //thanks viliam
 80021f6:	4b46      	ldr	r3, [pc, #280]	; (8002310 <tft_init+0x5f4>)
 80021f8:	f241 4213 	movw	r2, #5139	; 0x1413
 80021fc:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 80021fe:	e00d      	b.n	800221c <tft_init+0x500>
    case 0x9302:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;
 8002200:	4b43      	ldr	r3, [pc, #268]	; (8002310 <tft_init+0x5f4>)
 8002202:	f240 4203 	movw	r2, #1027	; 0x403
 8002206:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8002208:	e008      	b.n	800221c <tft_init+0x500>
    case 0x9338:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 800220a:	4b41      	ldr	r3, [pc, #260]	; (8002310 <tft_init+0x5f4>)
 800220c:	f240 4213 	movw	r2, #1043	; 0x413
 8002210:	801a      	strh	r2, [r3, #0]
		goto common_9329;
 8002212:	e003      	b.n	800221c <tft_init+0x500>
    case 0x9329:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | INVERT_SS | REV_SCREEN;
 8002214:	4b3e      	ldr	r3, [pc, #248]	; (8002310 <tft_init+0x5f4>)
 8002216:	f241 6203 	movw	r2, #5635	; 0x1603
 800221a:	801a      	strh	r2, [r3, #0]
	  common_9329:
	    dummy=1;
 800221c:	2301      	movs	r3, #1
 800221e:	617b      	str	r3, [r7, #20]
//            0xF6, 3, 0x01, 0x01, 0x00,  //Interface Control needs EXTC=1 MX_EOR=1, TM=0, RIM=0
//            0xB6, 3, 0x0A, 0x82, 0x27,  //Display Function [0A 82 27]
//            0xB7, 1, 0x06,      //Entry Mode Set [06]
            0x36, 1, 0x00,      //Memory Access [00] pointless but stops an empty array
        };
        table8_ads = ILI9329_regValues, table_size = sizeof(ILI9329_regValues);
 8002220:	4b46      	ldr	r3, [pc, #280]	; (800233c <tft_init+0x620>)
 8002222:	61fb      	str	r3, [r7, #28]
 8002224:	2303      	movs	r3, #3
 8002226:	837b      	strh	r3, [r7, #26]
        break;
 8002228:	e09c      	b.n	8002364 <tft_init+0x648>

    case 0x9340:                //ILI9340 thanks Ravi_kanchan2004.
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS | REV_SCREEN;
 800222a:	4b39      	ldr	r3, [pc, #228]	; (8002310 <tft_init+0x5f4>)
 800222c:	f241 4213 	movw	r2, #5139	; 0x1413
 8002230:	801a      	strh	r2, [r3, #0]
        goto common_9341;
 8002232:	bf00      	nop
    case 0x9341:
      common_9341:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 8002234:	4b36      	ldr	r3, [pc, #216]	; (8002310 <tft_init+0x5f4>)
 8002236:	f240 4213 	movw	r2, #1043	; 0x413
 800223a:	801a      	strh	r2, [r3, #0]
            0xC7, 1, 0xC0,      //VCOM 2 [C0]
            0x36, 1, 0x88,      //Memory Access [00]
            0xB1, 2, 0x00, 0x1B,        //Frame Control [00 1B]
            0xB7, 1, 0x07,      //Entry Mode [00]
        };
        table8_ads = ILI9341_regValues_2_4, table_size = sizeof(ILI9341_regValues_2_4);   //
 800223c:	4b40      	ldr	r3, [pc, #256]	; (8002340 <tft_init+0x624>)
 800223e:	61fb      	str	r3, [r7, #28]
 8002240:	2365      	movs	r3, #101	; 0x65
 8002242:	837b      	strh	r3, [r7, #26]
        break;
 8002244:	e08e      	b.n	8002364 <tft_init+0x648>
        p16 = (int16_t *) & width;
        *p16 = 320;
        break;
#endif
    case 0x1581:                        //no BGR in MADCTL.  set BGR in Panel Control
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS; //thanks zdravke
 8002246:	4b32      	ldr	r3, [pc, #200]	; (8002310 <tft_init+0x5f4>)
 8002248:	f240 4213 	movw	r2, #1043	; 0x413
 800224c:	801a      	strh	r2, [r3, #0]
		goto common_9481;
 800224e:	e003      	b.n	8002258 <tft_init+0x53c>
    case 0x9481:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_BGR;
 8002250:	4b2f      	ldr	r3, [pc, #188]	; (8002310 <tft_init+0x5f4>)
 8002252:	f240 4207 	movw	r2, #1031	; 0x407
 8002256:	801a      	strh	r2, [r3, #0]
	  common_9481:
	    dummy=1;
 8002258:	2301      	movs	r3, #1
 800225a:	617b      	str	r3, [r7, #20]
            0x0C, 2, 0x00, 0x55, //RDCOLMOD
			0xB4, 1, 0x00,      //SETDISPLAY
//			0xB3, 4, 0x00, 0x01, 0x06, 0x01,  //SETGRAM simple example
			0xB3, 4, 0x00, 0x01, 0x06, 0x30,  //jpegs example
        };
        table8_ads = ILI9481_regValues, table_size = sizeof(ILI9481_regValues);
 800225c:	4b39      	ldr	r3, [pc, #228]	; (8002344 <tft_init+0x628>)
 800225e:	61fb      	str	r3, [r7, #28]
 8002260:	2345      	movs	r3, #69	; 0x45
 8002262:	837b      	strh	r3, [r7, #26]
//        table8_ads = ILI9481_CPT29_regValues, table_size = sizeof(ILI9481_CPT29_regValues);
//        table8_ads = ILI9481_PVI35_regValues, table_size = sizeof(ILI9481_PVI35_regValues);
//        table8_ads = ILI9481_AUO317_regValues, table_size = sizeof(ILI9481_AUO317_regValues);
//        table8_ads = ILI9481_CMO35_regValues, table_size = sizeof(ILI9481_CMO35_regValues);
//        table8_ads = ILI9481_RGB_regValues, table_size = sizeof(ILI9481_RGB_regValues);
        p16 = (int16_t *) & height;
 8002264:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <tft_init+0x604>)
 8002266:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800226e:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 8002270:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <tft_init+0x608>)
 8002272:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800227a:	801a      	strh	r2, [r3, #0]
        break;
 800227c:	e072      	b.n	8002364 <tft_init+0x648>
    case 0x9486:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS; //Red 3.5", Blue 3.5"
 800227e:	4b24      	ldr	r3, [pc, #144]	; (8002310 <tft_init+0x5f4>)
 8002280:	f240 4203 	movw	r2, #1027	; 0x403
 8002284:	801a      	strh	r2, [r3, #0]
            // 4.2 WTK 3.5 Inch Initial Code too white
			0xE0, 15, 0x0F, 0x10, 0x08, 0x05, 0x09, 0x05, 0x37, 0x98, 0x26, 0x07, 0x0F, 0x02, 0x09, 0x07, 0x00,
			0xE1, 15, 0x0F, 0x38, 0x36, 0x0D, 0x10, 0x08, 0x59, 0x76, 0x48, 0x0A, 0x16, 0x0A, 0x37, 0x2F, 0x00,
#endif
        };
        table8_ads = ILI9486_regValues, table_size = sizeof(ILI9486_regValues);
 8002286:	4b30      	ldr	r3, [pc, #192]	; (8002348 <tft_init+0x62c>)
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	233b      	movs	r3, #59	; 0x3b
 800228c:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 800228e:	4b24      	ldr	r3, [pc, #144]	; (8002320 <tft_init+0x604>)
 8002290:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002298:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 800229a:	4b22      	ldr	r3, [pc, #136]	; (8002324 <tft_init+0x608>)
 800229c:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022a4:	801a      	strh	r2, [r3, #0]
        break;
 80022a6:	e05d      	b.n	8002364 <tft_init+0x648>
    case 0x7796:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS;   //thanks to safari1
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <tft_init+0x5f4>)
 80022aa:	f240 4203 	movw	r2, #1027	; 0x403
 80022ae:	801a      	strh	r2, [r3, #0]
        goto common_9488;
 80022b0:	e003      	b.n	80022ba <tft_init+0x59e>
    case 0x9487:                //with thanks to Charlyf
    case 0x9488:
        _lcd_capable = AUTO_READINC | MIPI_DCS_REV1 | MV_AXIS | READ_24BITS;
 80022b2:	4b17      	ldr	r3, [pc, #92]	; (8002310 <tft_init+0x5f4>)
 80022b4:	f240 4213 	movw	r2, #1043	; 0x413
 80022b8:	801a      	strh	r2, [r3, #0]
      common_9488:
	    dummy=1;
 80022ba:	2301      	movs	r3, #1
 80022bc:	617b      	str	r3, [r7, #20]
            0xB6, 3, 0x02, 0x02, 0x3B,  // Display Function Control [02 02 3B] .kbv NL=480
            0xB7, 1, 0xC6,      //Entry Mode      [06]
            0x3A, 1, 0x55,      //Interlace Pixel Format [XX]
            0xF7, 4, 0xA9, 0x51, 0x2C, 0x82,    //Adjustment Control 3 [A9 51 2C 82]
        };
        table8_ads = ILI9488_regValues_max, table_size = sizeof(ILI9488_regValues_max);
 80022be:	4b23      	ldr	r3, [pc, #140]	; (800234c <tft_init+0x630>)
 80022c0:	61fb      	str	r3, [r7, #28]
 80022c2:	232b      	movs	r3, #43	; 0x2b
 80022c4:	837b      	strh	r3, [r7, #26]
        p16 = (int16_t *) & height;
 80022c6:	4b16      	ldr	r3, [pc, #88]	; (8002320 <tft_init+0x604>)
 80022c8:	613b      	str	r3, [r7, #16]
        *p16 = 480;
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80022d0:	801a      	strh	r2, [r3, #0]
        p16 = (int16_t *) & width;
 80022d2:	4b14      	ldr	r3, [pc, #80]	; (8002324 <tft_init+0x608>)
 80022d4:	613b      	str	r3, [r7, #16]
        *p16 = 320;
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80022dc:	801a      	strh	r2, [r3, #0]
        break;
 80022de:	e041      	b.n	8002364 <tft_init+0x648>
    case 0xB505:                //R61505V
    case 0xC505:                //R61505W
        _lcd_capable = 0 | REV_SCREEN | READ_LOWHIGH;
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <tft_init+0x5f4>)
 80022e2:	f241 0208 	movw	r2, #4104	; 0x1008
 80022e6:	801a      	strh	r2, [r3, #0]
            0x0092, 0x0100,
            0x0093, 0x0701,
            TFTLCD_DELAY, 80,
            0x0007, 0x0100,     //BASEE=1--Display On
        };
        init_table16(R61505V_regValues, sizeof(R61505V_regValues));
 80022e8:	21b0      	movs	r1, #176	; 0xb0
 80022ea:	4819      	ldr	r0, [pc, #100]	; (8002350 <tft_init+0x634>)
 80022ec:	f7ff fa89 	bl	8001802 <init_table16>
        break;
 80022f0:	e038      	b.n	8002364 <tft_init+0x648>

#if defined(SUPPORT_B509_7793)
    case 0x7793:
    case 0xB509:
        _lcd_capable = REV_SCREEN;
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <tft_init+0x5f4>)
 80022f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80022f8:	801a      	strh	r2, [r3, #0]
            TFTLCD_DELAY, 50,

            0x0200, 0x0000,
            0x0201, 0x0000,
        };
        init_table16(R61509V_regValues, sizeof(R61509V_regValues));
 80022fa:	21c0      	movs	r1, #192	; 0xc0
 80022fc:	4815      	ldr	r0, [pc, #84]	; (8002354 <tft_init+0x638>)
 80022fe:	f7ff fa80 	bl	8001802 <init_table16>
        p16 = (int16_t *) & height;
 8002302:	4b07      	ldr	r3, [pc, #28]	; (8002320 <tft_init+0x604>)
 8002304:	613b      	str	r3, [r7, #16]
        *p16 = 400;
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800230c:	801a      	strh	r2, [r3, #0]
        break;
 800230e:	e029      	b.n	8002364 <tft_init+0x648>
 8002310:	200000cc 	.word	0x200000cc
 8002314:	080066ec 	.word	0x080066ec
 8002318:	08006730 	.word	0x08006730
 800231c:	08006744 	.word	0x08006744
 8002320:	08000c49 	.word	0x08000c49
 8002324:	08000c31 	.word	0x08000c31
 8002328:	08006748 	.word	0x08006748
 800232c:	08006768 	.word	0x08006768
 8002330:	08006840 	.word	0x08006840
 8002334:	0800690c 	.word	0x0800690c
 8002338:	0800692c 	.word	0x0800692c
 800233c:	08006934 	.word	0x08006934
 8002340:	08006938 	.word	0x08006938
 8002344:	080069a0 	.word	0x080069a0
 8002348:	080069e8 	.word	0x080069e8
 800234c:	08006a24 	.word	0x08006a24
 8002350:	08006a50 	.word	0x08006a50
 8002354:	08006b00 	.word	0x08006b00
        p16 = (int16_t *) & width;
        *p16 = 854;
        break;
#endif
    default:
        p16 = (int16_t *) & width;
 8002358:	4b2c      	ldr	r3, [pc, #176]	; (800240c <tft_init+0x6f0>)
 800235a:	613b      	str	r3, [r7, #16]
        *p16 = 0;       //error value for width
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	2200      	movs	r2, #0
 8002360:	801a      	strh	r2, [r3, #0]
        break;
 8002362:	bf00      	nop
    }
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0);
 8002364:	4b2a      	ldr	r3, [pc, #168]	; (8002410 <tft_init+0x6f4>)
 8002366:	881b      	ldrh	r3, [r3, #0]
 8002368:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf14      	ite	ne
 8002370:	2301      	movne	r3, #1
 8002372:	2300      	moveq	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	b29a      	uxth	r2, r3
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <tft_init+0x6f8>)
 800237a:	801a      	strh	r2, [r3, #0]
    if (table8_ads != NULL) {
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00d      	beq.n	800239e <tft_init+0x682>
        static const uint8_t wake_on[]  = {
			0x11, 0,            //Sleep Out
            TFTLCD_DELAY8, 150,
            0x29, 0,            //Display On
        };
		init_table(&reset_off, sizeof(reset_off));
 8002382:	2109      	movs	r1, #9
 8002384:	4824      	ldr	r0, [pc, #144]	; (8002418 <tft_init+0x6fc>)
 8002386:	f7ff f9e3 	bl	8001750 <init_table>
	    init_table(table8_ads, table_size);   //can change PIXFMT
 800238a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800238e:	4619      	mov	r1, r3
 8002390:	69f8      	ldr	r0, [r7, #28]
 8002392:	f7ff f9dd 	bl	8001750 <init_table>
		init_table(&wake_on, sizeof(wake_on));
 8002396:	2106      	movs	r1, #6
 8002398:	4820      	ldr	r0, [pc, #128]	; (800241c <tft_init+0x700>)
 800239a:	f7ff f9d9 	bl	8001750 <init_table>
    }
    setRotation(0);             //PORTRAIT
 800239e:	2000      	movs	r0, #0
 80023a0:	f000 ff72 	bl	8003288 <setRotation>
    invertDisplay(false);
 80023a4:	2000      	movs	r0, #0
 80023a6:	f001 fd5f 	bl	8003e68 <invertDisplay>
#if defined(SUPPORT_9488_555)
    if (_lcd_ID == 0x9488) {
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <tft_init+0x704>)
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	f249 4288 	movw	r2, #38024	; 0x9488
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d125      	bne.n	8002402 <tft_init+0x6e6>
		is555 = 0;
 80023b6:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <tft_init+0x708>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	701a      	strb	r2, [r3, #0]
		drawPixel(0, 0, 0xFFE0);
 80023bc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80023c0:	2100      	movs	r1, #0
 80023c2:	2000      	movs	r0, #0
 80023c4:	f001 f9e6 	bl	8003794 <drawPixel>
		if (readPixel(0, 0) == 0xFF1F) {
 80023c8:	2100      	movs	r1, #0
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7fe fcdf 	bl	8000d8e <readPixel>
 80023d0:	4603      	mov	r3, r0
 80023d2:	461a      	mov	r2, r3
 80023d4:	f64f 731f 	movw	r3, #65311	; 0xff1f
 80023d8:	429a      	cmp	r2, r3
 80023da:	d112      	bne.n	8002402 <tft_init+0x6e6>
			uint8_t pixfmt = 0x06;
 80023dc:	2306      	movs	r3, #6
 80023de:	73fb      	strb	r3, [r7, #15]
			pushCommand(0x3A, &pixfmt, 1);
 80023e0:	f107 030f 	add.w	r3, r7, #15
 80023e4:	2201      	movs	r2, #1
 80023e6:	4619      	mov	r1, r3
 80023e8:	203a      	movs	r0, #58	; 0x3a
 80023ea:	f7fe fcfa 	bl	8000de2 <pushCommand>
			_lcd_capable &= ~READ_24BITS;
 80023ee:	4b08      	ldr	r3, [pc, #32]	; (8002410 <tft_init+0x6f4>)
 80023f0:	881b      	ldrh	r3, [r3, #0]
 80023f2:	f023 0310 	bic.w	r3, r3, #16
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <tft_init+0x6f4>)
 80023fa:	801a      	strh	r2, [r3, #0]
			is555 = 1;
 80023fc:	4b09      	ldr	r3, [pc, #36]	; (8002424 <tft_init+0x708>)
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
		}
	}
#endif
}
 8002402:	bf00      	nop
 8002404:	3720      	adds	r7, #32
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	08000c31 	.word	0x08000c31
 8002410:	200000cc 	.word	0x200000cc
 8002414:	200000d0 	.word	0x200000d0
 8002418:	08006bc0 	.word	0x08006bc0
 800241c:	08006bcc 	.word	0x08006bcc
 8002420:	200000da 	.word	0x200000da
 8002424:	20000034 	.word	0x20000034

08002428 <readID>:


uint16_t readID(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
    uint16_t ret, ret2;
    uint8_t msb;
    ret = readReg(0,0);           //forces a reset() if called before begin()
 800242e:	2100      	movs	r1, #0
 8002430:	2000      	movs	r0, #0
 8002432:	f7ff fb55 	bl	8001ae0 <readReg>
 8002436:	4603      	mov	r3, r0
 8002438:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5408)          //the SPFD5408 fails the 0xD3D3 test.
 800243a:	89fb      	ldrh	r3, [r7, #14]
 800243c:	f245 4208 	movw	r2, #21512	; 0x5408
 8002440:	4293      	cmp	r3, r2
 8002442:	d102      	bne.n	800244a <readID+0x22>
        return 0x5408;
 8002444:	f245 4308 	movw	r3, #21512	; 0x5408
 8002448:	e128      	b.n	800269c <readID+0x274>
    if (ret == 0x5420)          //the SPFD5420 fails the 0xD3D3 test.
 800244a:	89fb      	ldrh	r3, [r7, #14]
 800244c:	f245 4220 	movw	r2, #21536	; 0x5420
 8002450:	4293      	cmp	r3, r2
 8002452:	d102      	bne.n	800245a <readID+0x32>
        return 0x5420;
 8002454:	f245 4320 	movw	r3, #21536	; 0x5420
 8002458:	e120      	b.n	800269c <readID+0x274>
    if (ret == 0x8989)          //SSD1289 is always 8989
 800245a:	89fb      	ldrh	r3, [r7, #14]
 800245c:	f648 1289 	movw	r2, #35209	; 0x8989
 8002460:	4293      	cmp	r3, r2
 8002462:	d102      	bne.n	800246a <readID+0x42>
        return 0x1289;
 8002464:	f241 2389 	movw	r3, #4745	; 0x1289
 8002468:	e118      	b.n	800269c <readID+0x274>
    ret = readReg(0x67,0);        //HX8347-A
 800246a:	2100      	movs	r1, #0
 800246c:	2067      	movs	r0, #103	; 0x67
 800246e:	f7ff fb37 	bl	8001ae0 <readReg>
 8002472:	4603      	mov	r3, r0
 8002474:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x4747)
 8002476:	89fb      	ldrh	r3, [r7, #14]
 8002478:	f244 7247 	movw	r2, #18247	; 0x4747
 800247c:	4293      	cmp	r3, r2
 800247e:	d102      	bne.n	8002486 <readID+0x5e>
        return 0x8347;
 8002480:	f248 3347 	movw	r3, #33607	; 0x8347
 8002484:	e10a      	b.n	800269c <readID+0x274>
//#if defined(SUPPORT_1963) && USING_16BIT_BUS
    ret = readReg32(0xA1);      //SSD1963: [01 57 61 01]
 8002486:	20a1      	movs	r0, #161	; 0xa1
 8002488:	f7ff fc06 	bl	8001c98 <readReg32>
 800248c:	4603      	mov	r3, r0
 800248e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x6101)
 8002490:	89fb      	ldrh	r3, [r7, #14]
 8002492:	f246 1201 	movw	r2, #24833	; 0x6101
 8002496:	4293      	cmp	r3, r2
 8002498:	d102      	bne.n	80024a0 <readID+0x78>
        return 0x1963;
 800249a:	f641 1363 	movw	r3, #6499	; 0x1963
 800249e:	e0fd      	b.n	800269c <readID+0x274>
    if (ret == 0xFFFF)          //R61526: [xx FF FF FF]
 80024a0:	89fb      	ldrh	r3, [r7, #14]
 80024a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d102      	bne.n	80024b0 <readID+0x88>
        return 0x1526;          //subsequent begin() enables Command Access
 80024aa:	f241 5326 	movw	r3, #5414	; 0x1526
 80024ae:	e0f5      	b.n	800269c <readID+0x274>
//    if (ret == 0xFF00)          //R61520: [xx FF FF 00]
//        return 0x1520;          //subsequent begin() enables Command Access
//#endif
	ret = readReg40(0xBF);
 80024b0:	20bf      	movs	r0, #191	; 0xbf
 80024b2:	f7ff fc0c 	bl	8001cce <readReg40>
 80024b6:	4603      	mov	r3, r0
 80024b8:	81fb      	strh	r3, [r7, #14]
	if (ret == 0x8357)          //HX8357B: [xx 01 62 83 57 FF]
 80024ba:	89fb      	ldrh	r3, [r7, #14]
 80024bc:	f248 3257 	movw	r2, #33623	; 0x8357
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d102      	bne.n	80024ca <readID+0xa2>
        return 0x8357;
 80024c4:	f248 3357 	movw	r3, #33623	; 0x8357
 80024c8:	e0e8      	b.n	800269c <readID+0x274>
	if (ret == 0x9481)          //ILI9481: [xx 02 04 94 81 FF]
 80024ca:	89fb      	ldrh	r3, [r7, #14]
 80024cc:	f249 4281 	movw	r2, #38017	; 0x9481
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d102      	bne.n	80024da <readID+0xb2>
        return 0x9481;
 80024d4:	f249 4381 	movw	r3, #38017	; 0x9481
 80024d8:	e0e0      	b.n	800269c <readID+0x274>
    if (ret == 0x1511)          //?R61511: [xx 02 04 15 11] not tested yet
 80024da:	89fb      	ldrh	r3, [r7, #14]
 80024dc:	f241 5211 	movw	r2, #5393	; 0x1511
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d102      	bne.n	80024ea <readID+0xc2>
        return 0x1511;
 80024e4:	f241 5311 	movw	r3, #5393	; 0x1511
 80024e8:	e0d8      	b.n	800269c <readID+0x274>
    if (ret == 0x1520)          //?R61520: [xx 01 22 15 20]
 80024ea:	89fb      	ldrh	r3, [r7, #14]
 80024ec:	f5b3 5fa9 	cmp.w	r3, #5408	; 0x1520
 80024f0:	d102      	bne.n	80024f8 <readID+0xd0>
        return 0x1520;
 80024f2:	f44f 53a9 	mov.w	r3, #5408	; 0x1520
 80024f6:	e0d1      	b.n	800269c <readID+0x274>
    if (ret == 0x1526)          //?R61526: [xx 01 22 15 26]
 80024f8:	89fb      	ldrh	r3, [r7, #14]
 80024fa:	f241 5226 	movw	r2, #5414	; 0x1526
 80024fe:	4293      	cmp	r3, r2
 8002500:	d102      	bne.n	8002508 <readID+0xe0>
        return 0x1526;
 8002502:	f241 5326 	movw	r3, #5414	; 0x1526
 8002506:	e0c9      	b.n	800269c <readID+0x274>
    if (ret == 0x1581)          //R61581:  [xx 01 22 15 81]
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	f241 5281 	movw	r2, #5505	; 0x1581
 800250e:	4293      	cmp	r3, r2
 8002510:	d102      	bne.n	8002518 <readID+0xf0>
        return 0x1581;
 8002512:	f241 5381 	movw	r3, #5505	; 0x1581
 8002516:	e0c1      	b.n	800269c <readID+0x274>
    if (ret == 0x1400)          //?RM68140:[xx FF 68 14 00] not tested yet
 8002518:	89fb      	ldrh	r3, [r7, #14]
 800251a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800251e:	d102      	bne.n	8002526 <readID+0xfe>
        return 0x6814;
 8002520:	f646 0314 	movw	r3, #26644	; 0x6814
 8002524:	e0ba      	b.n	800269c <readID+0x274>
    ret = readReg32(0xD4);
 8002526:	20d4      	movs	r0, #212	; 0xd4
 8002528:	f7ff fbb6 	bl	8001c98 <readReg32>
 800252c:	4603      	mov	r3, r0
 800252e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x5310)          //NT35310: [xx 01 53 10]
 8002530:	89fb      	ldrh	r3, [r7, #14]
 8002532:	f245 3210 	movw	r2, #21264	; 0x5310
 8002536:	4293      	cmp	r3, r2
 8002538:	d102      	bne.n	8002540 <readID+0x118>
        return 0x5310;
 800253a:	f245 3310 	movw	r3, #21264	; 0x5310
 800253e:	e0ad      	b.n	800269c <readID+0x274>
    ret = readReg32(0xD7);
 8002540:	20d7      	movs	r0, #215	; 0xd7
 8002542:	f7ff fba9 	bl	8001c98 <readReg32>
 8002546:	4603      	mov	r3, r0
 8002548:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x8031)          //weird unknown from BangGood [xx 20 80 31] PrinceCharles
 800254a:	89fb      	ldrh	r3, [r7, #14]
 800254c:	f248 0231 	movw	r2, #32817	; 0x8031
 8002550:	4293      	cmp	r3, r2
 8002552:	d102      	bne.n	800255a <readID+0x132>
        return 0x8031;
 8002554:	f248 0331 	movw	r3, #32817	; 0x8031
 8002558:	e0a0      	b.n	800269c <readID+0x274>
    ret = readReg40(0xEF);      //ILI9327: [xx 02 04 93 27 FF]
 800255a:	20ef      	movs	r0, #239	; 0xef
 800255c:	f7ff fbb7 	bl	8001cce <readReg40>
 8002560:	4603      	mov	r3, r0
 8002562:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9327)
 8002564:	89fb      	ldrh	r3, [r7, #14]
 8002566:	f249 3227 	movw	r2, #37671	; 0x9327
 800256a:	4293      	cmp	r3, r2
 800256c:	d102      	bne.n	8002574 <readID+0x14c>
        return 0x9327;
 800256e:	f249 3327 	movw	r3, #37671	; 0x9327
 8002572:	e093      	b.n	800269c <readID+0x274>
    ret = readReg32(0xFE) >> 8; //weird unknown from BangGood [04 20 53]
 8002574:	20fe      	movs	r0, #254	; 0xfe
 8002576:	f7ff fb8f 	bl	8001c98 <readReg32>
 800257a:	4603      	mov	r3, r0
 800257c:	0a1b      	lsrs	r3, r3, #8
 800257e:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x2053)
 8002580:	89fb      	ldrh	r3, [r7, #14]
 8002582:	f242 0253 	movw	r2, #8275	; 0x2053
 8002586:	4293      	cmp	r3, r2
 8002588:	d102      	bne.n	8002590 <readID+0x168>
        return 0x2053;
 800258a:	f242 0353 	movw	r3, #8275	; 0x2053
 800258e:	e085      	b.n	800269c <readID+0x274>
    uint32_t ret32 = readReg32(0x04);
 8002590:	2004      	movs	r0, #4
 8002592:	f7ff fb81 	bl	8001c98 <readReg32>
 8002596:	60b8      	str	r0, [r7, #8]
    msb = ret32 >> 16;
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	0c1b      	lsrs	r3, r3, #16
 800259c:	71fb      	strb	r3, [r7, #7]
    ret = ret32;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	81fb      	strh	r3, [r7, #14]
//    if (msb = 0x38 && ret == 0x8000) //unknown [xx 38 80 00] with D3 = 0x1602
    if (msb == 0x00 && ret == 0x8000) { //HX8357-D [xx 00 80 00]
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d122      	bne.n	80025ee <readID+0x1c6>
 80025a8:	89fb      	ldrh	r3, [r7, #14]
 80025aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80025ae:	d11e      	bne.n	80025ee <readID+0x1c6>
#if 1
        uint8_t cmds[] = {0xFF, 0x83, 0x57};
 80025b0:	4a3c      	ldr	r2, [pc, #240]	; (80026a4 <readID+0x27c>)
 80025b2:	1d3b      	adds	r3, r7, #4
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	4611      	mov	r1, r2
 80025b8:	8019      	strh	r1, [r3, #0]
 80025ba:	3302      	adds	r3, #2
 80025bc:	0c12      	lsrs	r2, r2, #16
 80025be:	701a      	strb	r2, [r3, #0]
        pushCommand(0xB9, cmds, 3);
 80025c0:	1d3b      	adds	r3, r7, #4
 80025c2:	2203      	movs	r2, #3
 80025c4:	4619      	mov	r1, r3
 80025c6:	20b9      	movs	r0, #185	; 0xb9
 80025c8:	f7fe fc0b 	bl	8000de2 <pushCommand>
        msb = readReg(0xD0,0);
 80025cc:	2100      	movs	r1, #0
 80025ce:	20d0      	movs	r0, #208	; 0xd0
 80025d0:	f7ff fa86 	bl	8001ae0 <readReg>
 80025d4:	4603      	mov	r3, r0
 80025d6:	71fb      	strb	r3, [r7, #7]
        if (msb == 0x99) return 0x0099; //HX8357-D from datasheet
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	2b99      	cmp	r3, #153	; 0x99
 80025dc:	d101      	bne.n	80025e2 <readID+0x1ba>
 80025de:	2399      	movs	r3, #153	; 0x99
 80025e0:	e05c      	b.n	800269c <readID+0x274>
        if (msb == 0x90)        //HX8357-C undocumented
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	2b90      	cmp	r3, #144	; 0x90
 80025e6:	d102      	bne.n	80025ee <readID+0x1c6>
#endif
            return 0x9090;      //BIG CHANGE: HX8357-D was 0x8357
 80025e8:	f249 0390 	movw	r3, #37008	; 0x9090
 80025ec:	e056      	b.n	800269c <readID+0x274>
    }
//    if (msb == 0xFF && ret == 0xFFFF) //R61526 [xx FF FF FF]
//        return 0x1526;          //subsequent begin() enables Command Access
    if (ret == 0x1526)          //R61526 [xx 06 15 26] if I have written NVM
 80025ee:	89fb      	ldrh	r3, [r7, #14]
 80025f0:	f241 5226 	movw	r2, #5414	; 0x1526
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d102      	bne.n	80025fe <readID+0x1d6>
        return 0x1526;          //subsequent begin() enables Command Access
 80025f8:	f241 5326 	movw	r3, #5414	; 0x1526
 80025fc:	e04e      	b.n	800269c <readID+0x274>
	if (ret == 0x89F0)          //ST7735S: [xx 7C 89 F0]
 80025fe:	89fb      	ldrh	r3, [r7, #14]
 8002600:	f648 12f0 	movw	r2, #35312	; 0x89f0
 8002604:	4293      	cmp	r3, r2
 8002606:	d102      	bne.n	800260e <readID+0x1e6>
        return 0x7735;
 8002608:	f247 7335 	movw	r3, #30517	; 0x7735
 800260c:	e046      	b.n	800269c <readID+0x274>
	if (ret == 0x8552)          //ST7789V: [xx 85 85 52]
 800260e:	89fb      	ldrh	r3, [r7, #14]
 8002610:	f248 5252 	movw	r2, #34130	; 0x8552
 8002614:	4293      	cmp	r3, r2
 8002616:	d102      	bne.n	800261e <readID+0x1f6>
        return 0x7789;
 8002618:	f247 7389 	movw	r3, #30601	; 0x7789
 800261c:	e03e      	b.n	800269c <readID+0x274>
    if (ret == 0xAC11)          //?unknown [xx 61 AC 11]
 800261e:	89fb      	ldrh	r3, [r7, #14]
 8002620:	f64a 4211 	movw	r2, #44049	; 0xac11
 8002624:	4293      	cmp	r3, r2
 8002626:	d102      	bne.n	800262e <readID+0x206>
        return 0xAC11;
 8002628:	f64a 4311 	movw	r3, #44049	; 0xac11
 800262c:	e036      	b.n	800269c <readID+0x274>
    ret32 = readReg32(0xD3);      //[xx 91 63 00]
 800262e:	20d3      	movs	r0, #211	; 0xd3
 8002630:	f7ff fb32 	bl	8001c98 <readReg32>
 8002634:	60b8      	str	r0, [r7, #8]
    ret = ret32 >> 8;
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	0a1b      	lsrs	r3, r3, #8
 800263a:	81fb      	strh	r3, [r7, #14]
    if (ret == 0x9163) return ret;
 800263c:	89fb      	ldrh	r3, [r7, #14]
 800263e:	f249 1263 	movw	r2, #37219	; 0x9163
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <readID+0x222>
 8002646:	89fb      	ldrh	r3, [r7, #14]
 8002648:	e028      	b.n	800269c <readID+0x274>
    ret = readReg32(0xD3);      //for ILI9488, 9486, 9340, 9341
 800264a:	20d3      	movs	r0, #211	; 0xd3
 800264c:	f7ff fb24 	bl	8001c98 <readReg32>
 8002650:	4603      	mov	r3, r0
 8002652:	81fb      	strh	r3, [r7, #14]
    msb = ret >> 8;
 8002654:	89fb      	ldrh	r3, [r7, #14]
 8002656:	0a1b      	lsrs	r3, r3, #8
 8002658:	b29b      	uxth	r3, r3
 800265a:	71fb      	strb	r3, [r7, #7]
    if (msb == 0x93 || msb == 0x94 || msb == 0x98 || msb == 0x77 || msb == 0x16)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	2b93      	cmp	r3, #147	; 0x93
 8002660:	d00b      	beq.n	800267a <readID+0x252>
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	2b94      	cmp	r3, #148	; 0x94
 8002666:	d008      	beq.n	800267a <readID+0x252>
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	2b98      	cmp	r3, #152	; 0x98
 800266c:	d005      	beq.n	800267a <readID+0x252>
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	2b77      	cmp	r3, #119	; 0x77
 8002672:	d002      	beq.n	800267a <readID+0x252>
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	2b16      	cmp	r3, #22
 8002678:	d101      	bne.n	800267e <readID+0x256>
        return ret;             //0x9488, 9486, 9340, 9341, 7796
 800267a:	89fb      	ldrh	r3, [r7, #14]
 800267c:	e00e      	b.n	800269c <readID+0x274>
    if (ret == 0x00D3 || ret == 0xD3D3)
 800267e:	89fb      	ldrh	r3, [r7, #14]
 8002680:	2bd3      	cmp	r3, #211	; 0xd3
 8002682:	d004      	beq.n	800268e <readID+0x266>
 8002684:	89fb      	ldrh	r3, [r7, #14]
 8002686:	f24d 32d3 	movw	r2, #54227	; 0xd3d3
 800268a:	4293      	cmp	r3, r2
 800268c:	d101      	bne.n	8002692 <readID+0x26a>
        return ret;             //16-bit write-only bus
 800268e:	89fb      	ldrh	r3, [r7, #14]
 8002690:	e004      	b.n	800269c <readID+0x274>
	pushCommand(0xD9, &msb, 1);
	ret = (ret2 << 8) | readReg(0xD3);
//	if (ret2 == 0x93)
    	return ret2;
*/
	return readReg(0,0);          //0154, 7783, 9320, 9325, 9335, B505, B509
 8002692:	2100      	movs	r1, #0
 8002694:	2000      	movs	r0, #0
 8002696:	f7ff fa23 	bl	8001ae0 <readReg>
 800269a:	4603      	mov	r3, r0
}
 800269c:	4618      	mov	r0, r3
 800269e:	3710      	adds	r7, #16
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	080066b4 	.word	0x080066b4

080026a8 <readGRAM>:


// independent cursor and window registers.   S6D0154, ST7781 increments.  ILI92320/5 do not.
int16_t readGRAM(int16_t x, int16_t y, uint16_t * block, int16_t w, int16_t h)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	b08b      	sub	sp, #44	; 0x2c
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60ba      	str	r2, [r7, #8]
 80026b0:	461a      	mov	r2, r3
 80026b2:	4603      	mov	r3, r0
 80026b4:	81fb      	strh	r3, [r7, #14]
 80026b6:	460b      	mov	r3, r1
 80026b8:	81bb      	strh	r3, [r7, #12]
 80026ba:	4613      	mov	r3, r2
 80026bc:	80fb      	strh	r3, [r7, #6]
    uint16_t ret, dummy, _MR = _MW;
 80026be:	4b1c      	ldr	r3, [pc, #112]	; (8002730 <readGRAM+0x88>)
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t n = w * h, row = 0, col = 0;
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80026c8:	fb12 f303 	smulbb	r3, r2, r3
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	847b      	strh	r3, [r7, #34]	; 0x22
 80026d0:	2300      	movs	r3, #0
 80026d2:	843b      	strh	r3, [r7, #32]
 80026d4:	2300      	movs	r3, #0
 80026d6:	83fb      	strh	r3, [r7, #30]
    uint8_t r, g, b, tmp;
    if (!is8347 && (_lcd_capable & MIPI_DCS_REV1)) // HX8347 uses same register
 80026d8:	4b16      	ldr	r3, [pc, #88]	; (8002734 <readGRAM+0x8c>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d107      	bne.n	80026f0 <readGRAM+0x48>
 80026e0:	4b15      	ldr	r3, [pc, #84]	; (8002738 <readGRAM+0x90>)
 80026e2:	881b      	ldrh	r3, [r3, #0]
 80026e4:	f003 0301 	and.w	r3, r3, #1
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <readGRAM+0x48>
        _MR = 0x2E;
 80026ec:	232e      	movs	r3, #46	; 0x2e
 80026ee:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (_lcd_ID == 0x1602) _MR = 0x2E;
 80026f0:	4b12      	ldr	r3, [pc, #72]	; (800273c <readGRAM+0x94>)
 80026f2:	881b      	ldrh	r3, [r3, #0]
 80026f4:	f241 6202 	movw	r2, #5634	; 0x1602
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d101      	bne.n	8002700 <readGRAM+0x58>
 80026fc:	232e      	movs	r3, #46	; 0x2e
 80026fe:	84bb      	strh	r3, [r7, #36]	; 0x24
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8002700:	89fa      	ldrh	r2, [r7, #14]
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	4413      	add	r3, r2
 8002706:	b29b      	uxth	r3, r3
 8002708:	3b01      	subs	r3, #1
 800270a:	b29b      	uxth	r3, r3
 800270c:	b21c      	sxth	r4, r3
 800270e:	89ba      	ldrh	r2, [r7, #12]
 8002710:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002712:	4413      	add	r3, r2
 8002714:	b29b      	uxth	r3, r3
 8002716:	3b01      	subs	r3, #1
 8002718:	b29b      	uxth	r3, r3
 800271a:	b21b      	sxth	r3, r3
 800271c:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8002720:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 8002724:	4622      	mov	r2, r4
 8002726:	f001 f93b 	bl	80039a0 <setAddrWindow>
    while (n > 0) {
 800272a:	f000 bd86 	b.w	800323a <readGRAM+0xb92>
 800272e:	bf00      	nop
 8002730:	200000ca 	.word	0x200000ca
 8002734:	20000033 	.word	0x20000033
 8002738:	200000cc 	.word	0x200000cc
 800273c:	200000da 	.word	0x200000da
        if (!(_lcd_capable & MIPI_DCS_REV1)) {
 8002740:	4ba0      	ldr	r3, [pc, #640]	; (80029c4 <readGRAM+0x31c>)
 8002742:	881b      	ldrh	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d111      	bne.n	8002770 <readGRAM+0xc8>
            WriteCmdData(_MC, x + col);
 800274c:	4b9e      	ldr	r3, [pc, #632]	; (80029c8 <readGRAM+0x320>)
 800274e:	8818      	ldrh	r0, [r3, #0]
 8002750:	89fa      	ldrh	r2, [r7, #14]
 8002752:	8bfb      	ldrh	r3, [r7, #30]
 8002754:	4413      	add	r3, r2
 8002756:	b29b      	uxth	r3, r3
 8002758:	4619      	mov	r1, r3
 800275a:	f7fe fb30 	bl	8000dbe <WriteCmdData>
            WriteCmdData(_MP, y + row);
 800275e:	4b9b      	ldr	r3, [pc, #620]	; (80029cc <readGRAM+0x324>)
 8002760:	8818      	ldrh	r0, [r3, #0]
 8002762:	89ba      	ldrh	r2, [r7, #12]
 8002764:	8c3b      	ldrh	r3, [r7, #32]
 8002766:	4413      	add	r3, r2
 8002768:	b29b      	uxth	r3, r3
 800276a:	4619      	mov	r1, r3
 800276c:	f7fe fb27 	bl	8000dbe <WriteCmdData>
        }
        CS_ACTIVE;
 8002770:	2101      	movs	r1, #1
 8002772:	4897      	ldr	r0, [pc, #604]	; (80029d0 <readGRAM+0x328>)
 8002774:	f7fe fa0e 	bl	8000b94 <PIN_LOW>
        WriteCmd(_MR);
 8002778:	2110      	movs	r1, #16
 800277a:	4896      	ldr	r0, [pc, #600]	; (80029d4 <readGRAM+0x32c>)
 800277c:	f7fe fa0a 	bl	8000b94 <PIN_LOW>
 8002780:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002782:	0a1b      	lsrs	r3, r3, #8
 8002784:	b29b      	uxth	r3, r3
 8002786:	777b      	strb	r3, [r7, #29]
 8002788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800278a:	773b      	strb	r3, [r7, #28]
 800278c:	4b91      	ldr	r3, [pc, #580]	; (80029d4 <readGRAM+0x32c>)
 800278e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002792:	619a      	str	r2, [r3, #24]
 8002794:	4b8e      	ldr	r3, [pc, #568]	; (80029d0 <readGRAM+0x328>)
 8002796:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800279a:	619a      	str	r2, [r3, #24]
 800279c:	4b8e      	ldr	r3, [pc, #568]	; (80029d8 <readGRAM+0x330>)
 800279e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80027a2:	619a      	str	r2, [r3, #24]
 80027a4:	7f7b      	ldrb	r3, [r7, #29]
 80027a6:	005b      	lsls	r3, r3, #1
 80027a8:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80027ac:	7f7b      	ldrb	r3, [r7, #29]
 80027ae:	021b      	lsls	r3, r3, #8
 80027b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b4:	431a      	orrs	r2, r3
 80027b6:	7f7b      	ldrb	r3, [r7, #29]
 80027b8:	025b      	lsls	r3, r3, #9
 80027ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027be:	431a      	orrs	r2, r3
 80027c0:	4b84      	ldr	r3, [pc, #528]	; (80029d4 <readGRAM+0x32c>)
 80027c2:	619a      	str	r2, [r3, #24]
 80027c4:	7f7b      	ldrb	r3, [r7, #29]
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80027cc:	7f7b      	ldrb	r3, [r7, #29]
 80027ce:	105b      	asrs	r3, r3, #1
 80027d0:	f003 0310 	and.w	r3, r3, #16
 80027d4:	431a      	orrs	r2, r3
 80027d6:	7f7b      	ldrb	r3, [r7, #29]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	f003 0320 	and.w	r3, r3, #32
 80027de:	431a      	orrs	r2, r3
 80027e0:	7f7b      	ldrb	r3, [r7, #29]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	431a      	orrs	r2, r3
 80027e8:	4b79      	ldr	r3, [pc, #484]	; (80029d0 <readGRAM+0x328>)
 80027ea:	619a      	str	r2, [r3, #24]
 80027ec:	7f7b      	ldrb	r3, [r7, #29]
 80027ee:	019b      	lsls	r3, r3, #6
 80027f0:	4a79      	ldr	r2, [pc, #484]	; (80029d8 <readGRAM+0x330>)
 80027f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f6:	6193      	str	r3, [r2, #24]
 80027f8:	2102      	movs	r1, #2
 80027fa:	4876      	ldr	r0, [pc, #472]	; (80029d4 <readGRAM+0x32c>)
 80027fc:	f7fe f9ca 	bl	8000b94 <PIN_LOW>
 8002800:	2102      	movs	r1, #2
 8002802:	4874      	ldr	r0, [pc, #464]	; (80029d4 <readGRAM+0x32c>)
 8002804:	f7fe f9c6 	bl	8000b94 <PIN_LOW>
 8002808:	2102      	movs	r1, #2
 800280a:	4872      	ldr	r0, [pc, #456]	; (80029d4 <readGRAM+0x32c>)
 800280c:	f7fe f9c2 	bl	8000b94 <PIN_LOW>
 8002810:	2102      	movs	r1, #2
 8002812:	4870      	ldr	r0, [pc, #448]	; (80029d4 <readGRAM+0x32c>)
 8002814:	f7fe f9ce 	bl	8000bb4 <PIN_HIGH>
 8002818:	2102      	movs	r1, #2
 800281a:	486e      	ldr	r0, [pc, #440]	; (80029d4 <readGRAM+0x32c>)
 800281c:	f7fe f9ca 	bl	8000bb4 <PIN_HIGH>
 8002820:	4b6c      	ldr	r3, [pc, #432]	; (80029d4 <readGRAM+0x32c>)
 8002822:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8002826:	619a      	str	r2, [r3, #24]
 8002828:	4b69      	ldr	r3, [pc, #420]	; (80029d0 <readGRAM+0x328>)
 800282a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800282e:	619a      	str	r2, [r3, #24]
 8002830:	4b69      	ldr	r3, [pc, #420]	; (80029d8 <readGRAM+0x330>)
 8002832:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002836:	619a      	str	r2, [r3, #24]
 8002838:	7f3b      	ldrb	r3, [r7, #28]
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8002840:	7f3b      	ldrb	r3, [r7, #28]
 8002842:	021b      	lsls	r3, r3, #8
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	431a      	orrs	r2, r3
 800284a:	7f3b      	ldrb	r3, [r7, #28]
 800284c:	025b      	lsls	r3, r3, #9
 800284e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002852:	431a      	orrs	r2, r3
 8002854:	4b5f      	ldr	r3, [pc, #380]	; (80029d4 <readGRAM+0x32c>)
 8002856:	619a      	str	r2, [r3, #24]
 8002858:	7f3b      	ldrb	r3, [r7, #28]
 800285a:	011b      	lsls	r3, r3, #4
 800285c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8002860:	7f3b      	ldrb	r3, [r7, #28]
 8002862:	105b      	asrs	r3, r3, #1
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	431a      	orrs	r2, r3
 800286a:	7f3b      	ldrb	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	f003 0320 	and.w	r3, r3, #32
 8002872:	431a      	orrs	r2, r3
 8002874:	7f3b      	ldrb	r3, [r7, #28]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	431a      	orrs	r2, r3
 800287c:	4b54      	ldr	r3, [pc, #336]	; (80029d0 <readGRAM+0x328>)
 800287e:	619a      	str	r2, [r3, #24]
 8002880:	7f3b      	ldrb	r3, [r7, #28]
 8002882:	019b      	lsls	r3, r3, #6
 8002884:	4a54      	ldr	r2, [pc, #336]	; (80029d8 <readGRAM+0x330>)
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	2102      	movs	r1, #2
 800288e:	4851      	ldr	r0, [pc, #324]	; (80029d4 <readGRAM+0x32c>)
 8002890:	f7fe f980 	bl	8000b94 <PIN_LOW>
 8002894:	2102      	movs	r1, #2
 8002896:	484f      	ldr	r0, [pc, #316]	; (80029d4 <readGRAM+0x32c>)
 8002898:	f7fe f97c 	bl	8000b94 <PIN_LOW>
 800289c:	2102      	movs	r1, #2
 800289e:	484d      	ldr	r0, [pc, #308]	; (80029d4 <readGRAM+0x32c>)
 80028a0:	f7fe f978 	bl	8000b94 <PIN_LOW>
 80028a4:	2102      	movs	r1, #2
 80028a6:	484b      	ldr	r0, [pc, #300]	; (80029d4 <readGRAM+0x32c>)
 80028a8:	f7fe f984 	bl	8000bb4 <PIN_HIGH>
 80028ac:	2102      	movs	r1, #2
 80028ae:	4849      	ldr	r0, [pc, #292]	; (80029d4 <readGRAM+0x32c>)
 80028b0:	f7fe f980 	bl	8000bb4 <PIN_HIGH>
 80028b4:	2110      	movs	r1, #16
 80028b6:	4847      	ldr	r0, [pc, #284]	; (80029d4 <readGRAM+0x32c>)
 80028b8:	f7fe f97c 	bl	8000bb4 <PIN_HIGH>
        setReadDir();
 80028bc:	f7fe faa4 	bl	8000e08 <setReadDir>
        if (_lcd_capable & READ_NODUMMY) {
 80028c0:	4b40      	ldr	r3, [pc, #256]	; (80029c4 <readGRAM+0x31c>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f040 816d 	bne.w	8002ba8 <readGRAM+0x500>
            ;
        } else if ((_lcd_capable & MIPI_DCS_REV1) || _lcd_ID == 0x1289) {
 80028ce:	4b3d      	ldr	r3, [pc, #244]	; (80029c4 <readGRAM+0x31c>)
 80028d0:	881b      	ldrh	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d105      	bne.n	80028e6 <readGRAM+0x23e>
 80028da:	4b40      	ldr	r3, [pc, #256]	; (80029dc <readGRAM+0x334>)
 80028dc:	881b      	ldrh	r3, [r3, #0]
 80028de:	f241 2289 	movw	r2, #4745	; 0x1289
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d17c      	bne.n	80029e0 <readGRAM+0x338>
            READ_8(r);
 80028e6:	2101      	movs	r1, #1
 80028e8:	483a      	ldr	r0, [pc, #232]	; (80029d4 <readGRAM+0x32c>)
 80028ea:	f7fe f963 	bl	8000bb4 <PIN_HIGH>
 80028ee:	2101      	movs	r1, #1
 80028f0:	4838      	ldr	r0, [pc, #224]	; (80029d4 <readGRAM+0x32c>)
 80028f2:	f7fe f94f 	bl	8000b94 <PIN_LOW>
 80028f6:	2101      	movs	r1, #1
 80028f8:	4836      	ldr	r0, [pc, #216]	; (80029d4 <readGRAM+0x32c>)
 80028fa:	f7fe f94b 	bl	8000b94 <PIN_LOW>
 80028fe:	2101      	movs	r1, #1
 8002900:	4834      	ldr	r0, [pc, #208]	; (80029d4 <readGRAM+0x32c>)
 8002902:	f7fe f947 	bl	8000b94 <PIN_LOW>
 8002906:	2101      	movs	r1, #1
 8002908:	4832      	ldr	r0, [pc, #200]	; (80029d4 <readGRAM+0x32c>)
 800290a:	f7fe f943 	bl	8000b94 <PIN_LOW>
 800290e:	2101      	movs	r1, #1
 8002910:	4830      	ldr	r0, [pc, #192]	; (80029d4 <readGRAM+0x32c>)
 8002912:	f7fe f93f 	bl	8000b94 <PIN_LOW>
 8002916:	2101      	movs	r1, #1
 8002918:	482e      	ldr	r0, [pc, #184]	; (80029d4 <readGRAM+0x32c>)
 800291a:	f7fe f93b 	bl	8000b94 <PIN_LOW>
 800291e:	2101      	movs	r1, #1
 8002920:	482c      	ldr	r0, [pc, #176]	; (80029d4 <readGRAM+0x32c>)
 8002922:	f7fe f937 	bl	8000b94 <PIN_LOW>
 8002926:	4b2b      	ldr	r3, [pc, #172]	; (80029d4 <readGRAM+0x32c>)
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	085b      	lsrs	r3, r3, #1
 800292c:	b2db      	uxtb	r3, r3
 800292e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002932:	b2da      	uxtb	r2, r3
 8002934:	4b26      	ldr	r3, [pc, #152]	; (80029d0 <readGRAM+0x328>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	b2db      	uxtb	r3, r3
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	b2db      	uxtb	r3, r3
 8002942:	4313      	orrs	r3, r2
 8002944:	b2da      	uxtb	r2, r3
 8002946:	4b22      	ldr	r3, [pc, #136]	; (80029d0 <readGRAM+0x328>)
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	b2db      	uxtb	r3, r3
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4313      	orrs	r3, r2
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <readGRAM+0x328>)
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	085b      	lsrs	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	b2db      	uxtb	r3, r3
 8002968:	4313      	orrs	r3, r2
 800296a:	b2da      	uxtb	r2, r3
 800296c:	4b18      	ldr	r3, [pc, #96]	; (80029d0 <readGRAM+0x328>)
 800296e:	691b      	ldr	r3, [r3, #16]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	f003 0308 	and.w	r3, r3, #8
 8002976:	b2db      	uxtb	r3, r3
 8002978:	4313      	orrs	r3, r2
 800297a:	b2da      	uxtb	r2, r3
 800297c:	4b15      	ldr	r3, [pc, #84]	; (80029d4 <readGRAM+0x32c>)
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	b2db      	uxtb	r3, r3
 800298a:	4313      	orrs	r3, r2
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4b12      	ldr	r3, [pc, #72]	; (80029d8 <readGRAM+0x330>)
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	099b      	lsrs	r3, r3, #6
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	b2db      	uxtb	r3, r3
 800299c:	4313      	orrs	r3, r2
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <readGRAM+0x32c>)
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	0a5b      	lsrs	r3, r3, #9
 80029a6:	b2db      	uxtb	r3, r3
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	4313      	orrs	r3, r2
 80029b0:	75fb      	strb	r3, [r7, #23]
 80029b2:	2101      	movs	r1, #1
 80029b4:	4807      	ldr	r0, [pc, #28]	; (80029d4 <readGRAM+0x32c>)
 80029b6:	f7fe f8fd 	bl	8000bb4 <PIN_HIGH>
 80029ba:	2101      	movs	r1, #1
 80029bc:	4805      	ldr	r0, [pc, #20]	; (80029d4 <readGRAM+0x32c>)
 80029be:	f7fe f8f9 	bl	8000bb4 <PIN_HIGH>
 80029c2:	e0f1      	b.n	8002ba8 <readGRAM+0x500>
 80029c4:	200000cc 	.word	0x200000cc
 80029c8:	200000d4 	.word	0x200000d4
 80029cc:	200000d2 	.word	0x200000d2
 80029d0:	40020400 	.word	0x40020400
 80029d4:	40020000 	.word	0x40020000
 80029d8:	40020800 	.word	0x40020800
 80029dc:	200000da 	.word	0x200000da
        } else {
            READ_16(dummy);
 80029e0:	2101      	movs	r1, #1
 80029e2:	48ac      	ldr	r0, [pc, #688]	; (8002c94 <readGRAM+0x5ec>)
 80029e4:	f7fe f8e6 	bl	8000bb4 <PIN_HIGH>
 80029e8:	2101      	movs	r1, #1
 80029ea:	48aa      	ldr	r0, [pc, #680]	; (8002c94 <readGRAM+0x5ec>)
 80029ec:	f7fe f8d2 	bl	8000b94 <PIN_LOW>
 80029f0:	2101      	movs	r1, #1
 80029f2:	48a8      	ldr	r0, [pc, #672]	; (8002c94 <readGRAM+0x5ec>)
 80029f4:	f7fe f8ce 	bl	8000b94 <PIN_LOW>
 80029f8:	2101      	movs	r1, #1
 80029fa:	48a6      	ldr	r0, [pc, #664]	; (8002c94 <readGRAM+0x5ec>)
 80029fc:	f7fe f8ca 	bl	8000b94 <PIN_LOW>
 8002a00:	2101      	movs	r1, #1
 8002a02:	48a4      	ldr	r0, [pc, #656]	; (8002c94 <readGRAM+0x5ec>)
 8002a04:	f7fe f8c6 	bl	8000b94 <PIN_LOW>
 8002a08:	2101      	movs	r1, #1
 8002a0a:	48a2      	ldr	r0, [pc, #648]	; (8002c94 <readGRAM+0x5ec>)
 8002a0c:	f7fe f8c2 	bl	8000b94 <PIN_LOW>
 8002a10:	2101      	movs	r1, #1
 8002a12:	48a0      	ldr	r0, [pc, #640]	; (8002c94 <readGRAM+0x5ec>)
 8002a14:	f7fe f8be 	bl	8000b94 <PIN_LOW>
 8002a18:	2101      	movs	r1, #1
 8002a1a:	489e      	ldr	r0, [pc, #632]	; (8002c94 <readGRAM+0x5ec>)
 8002a1c:	f7fe f8ba 	bl	8000b94 <PIN_LOW>
 8002a20:	4b9c      	ldr	r3, [pc, #624]	; (8002c94 <readGRAM+0x5ec>)
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	085b      	lsrs	r3, r3, #1
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a2c:	b2da      	uxtb	r2, r3
 8002a2e:	4b9a      	ldr	r3, [pc, #616]	; (8002c98 <readGRAM+0x5f0>)
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	b2da      	uxtb	r2, r3
 8002a40:	4b95      	ldr	r3, [pc, #596]	; (8002c98 <readGRAM+0x5f0>)
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	f003 0320 	and.w	r3, r3, #32
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	4313      	orrs	r3, r2
 8002a52:	b2da      	uxtb	r2, r3
 8002a54:	4b90      	ldr	r3, [pc, #576]	; (8002c98 <readGRAM+0x5f0>)
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	085b      	lsrs	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	f003 0310 	and.w	r3, r3, #16
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	4313      	orrs	r3, r2
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4b8c      	ldr	r3, [pc, #560]	; (8002c98 <readGRAM+0x5f0>)
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	4313      	orrs	r3, r2
 8002a74:	b2da      	uxtb	r2, r3
 8002a76:	4b87      	ldr	r3, [pc, #540]	; (8002c94 <readGRAM+0x5ec>)
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	0a1b      	lsrs	r3, r3, #8
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	f003 0304 	and.w	r3, r3, #4
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	4313      	orrs	r3, r2
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b84      	ldr	r3, [pc, #528]	; (8002c9c <readGRAM+0x5f4>)
 8002a8a:	691b      	ldr	r3, [r3, #16]
 8002a8c:	099b      	lsrs	r3, r3, #6
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4313      	orrs	r3, r2
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	4b7e      	ldr	r3, [pc, #504]	; (8002c94 <readGRAM+0x5ec>)
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	0a5b      	lsrs	r3, r3, #9
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	76fb      	strb	r3, [r7, #27]
 8002aac:	2101      	movs	r1, #1
 8002aae:	4879      	ldr	r0, [pc, #484]	; (8002c94 <readGRAM+0x5ec>)
 8002ab0:	f7fe f880 	bl	8000bb4 <PIN_HIGH>
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	4877      	ldr	r0, [pc, #476]	; (8002c94 <readGRAM+0x5ec>)
 8002ab8:	f7fe f87c 	bl	8000bb4 <PIN_HIGH>
 8002abc:	2101      	movs	r1, #1
 8002abe:	4875      	ldr	r0, [pc, #468]	; (8002c94 <readGRAM+0x5ec>)
 8002ac0:	f7fe f878 	bl	8000bb4 <PIN_HIGH>
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	4873      	ldr	r0, [pc, #460]	; (8002c94 <readGRAM+0x5ec>)
 8002ac8:	f7fe f864 	bl	8000b94 <PIN_LOW>
 8002acc:	2101      	movs	r1, #1
 8002ace:	4871      	ldr	r0, [pc, #452]	; (8002c94 <readGRAM+0x5ec>)
 8002ad0:	f7fe f860 	bl	8000b94 <PIN_LOW>
 8002ad4:	2101      	movs	r1, #1
 8002ad6:	486f      	ldr	r0, [pc, #444]	; (8002c94 <readGRAM+0x5ec>)
 8002ad8:	f7fe f85c 	bl	8000b94 <PIN_LOW>
 8002adc:	2101      	movs	r1, #1
 8002ade:	486d      	ldr	r0, [pc, #436]	; (8002c94 <readGRAM+0x5ec>)
 8002ae0:	f7fe f858 	bl	8000b94 <PIN_LOW>
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	486b      	ldr	r0, [pc, #428]	; (8002c94 <readGRAM+0x5ec>)
 8002ae8:	f7fe f854 	bl	8000b94 <PIN_LOW>
 8002aec:	2101      	movs	r1, #1
 8002aee:	4869      	ldr	r0, [pc, #420]	; (8002c94 <readGRAM+0x5ec>)
 8002af0:	f7fe f850 	bl	8000b94 <PIN_LOW>
 8002af4:	2101      	movs	r1, #1
 8002af6:	4867      	ldr	r0, [pc, #412]	; (8002c94 <readGRAM+0x5ec>)
 8002af8:	f7fe f84c 	bl	8000b94 <PIN_LOW>
 8002afc:	4b65      	ldr	r3, [pc, #404]	; (8002c94 <readGRAM+0x5ec>)
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <readGRAM+0x5f0>)
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	091b      	lsrs	r3, r3, #4
 8002b10:	b29b      	uxth	r3, r3
 8002b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	4b5e      	ldr	r3, [pc, #376]	; (8002c98 <readGRAM+0x5f0>)
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	b29b      	uxth	r3, r3
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	4b59      	ldr	r3, [pc, #356]	; (8002c98 <readGRAM+0x5f0>)
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	085b      	lsrs	r3, r3, #1
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	4b55      	ldr	r3, [pc, #340]	; (8002c98 <readGRAM+0x5f0>)
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	b29b      	uxth	r3, r3
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <readGRAM+0x5ec>)
 8002b54:	691b      	ldr	r3, [r3, #16]
 8002b56:	0a1b      	lsrs	r3, r3, #8
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	4313      	orrs	r3, r2
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	4b4d      	ldr	r3, [pc, #308]	; (8002c9c <readGRAM+0x5f4>)
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	099b      	lsrs	r3, r3, #6
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	4313      	orrs	r3, r2
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <readGRAM+0x5ec>)
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	0a5b      	lsrs	r3, r3, #9
 8002b7c:	b29b      	uxth	r3, r3
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	4313      	orrs	r3, r2
 8002b86:	833b      	strh	r3, [r7, #24]
 8002b88:	2101      	movs	r1, #1
 8002b8a:	4842      	ldr	r0, [pc, #264]	; (8002c94 <readGRAM+0x5ec>)
 8002b8c:	f7fe f812 	bl	8000bb4 <PIN_HIGH>
 8002b90:	2101      	movs	r1, #1
 8002b92:	4840      	ldr	r0, [pc, #256]	; (8002c94 <readGRAM+0x5ec>)
 8002b94:	f7fe f80e 	bl	8000bb4 <PIN_HIGH>
 8002b98:	7efb      	ldrb	r3, [r7, #27]
 8002b9a:	021b      	lsls	r3, r3, #8
 8002b9c:	b21a      	sxth	r2, r3
 8002b9e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	b21b      	sxth	r3, r3
 8002ba6:	833b      	strh	r3, [r7, #24]
        }
		if (_lcd_ID == 0x1511) READ_8(r);   //extra dummy for R61511
 8002ba8:	4b3d      	ldr	r3, [pc, #244]	; (8002ca0 <readGRAM+0x5f8>)
 8002baa:	881b      	ldrh	r3, [r3, #0]
 8002bac:	f241 5211 	movw	r2, #5393	; 0x1511
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	f040 830f 	bne.w	80031d4 <readGRAM+0xb2c>
 8002bb6:	2101      	movs	r1, #1
 8002bb8:	4836      	ldr	r0, [pc, #216]	; (8002c94 <readGRAM+0x5ec>)
 8002bba:	f7fd fffb 	bl	8000bb4 <PIN_HIGH>
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	4834      	ldr	r0, [pc, #208]	; (8002c94 <readGRAM+0x5ec>)
 8002bc2:	f7fd ffe7 	bl	8000b94 <PIN_LOW>
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	4832      	ldr	r0, [pc, #200]	; (8002c94 <readGRAM+0x5ec>)
 8002bca:	f7fd ffe3 	bl	8000b94 <PIN_LOW>
 8002bce:	2101      	movs	r1, #1
 8002bd0:	4830      	ldr	r0, [pc, #192]	; (8002c94 <readGRAM+0x5ec>)
 8002bd2:	f7fd ffdf 	bl	8000b94 <PIN_LOW>
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	482e      	ldr	r0, [pc, #184]	; (8002c94 <readGRAM+0x5ec>)
 8002bda:	f7fd ffdb 	bl	8000b94 <PIN_LOW>
 8002bde:	2101      	movs	r1, #1
 8002be0:	482c      	ldr	r0, [pc, #176]	; (8002c94 <readGRAM+0x5ec>)
 8002be2:	f7fd ffd7 	bl	8000b94 <PIN_LOW>
 8002be6:	2101      	movs	r1, #1
 8002be8:	482a      	ldr	r0, [pc, #168]	; (8002c94 <readGRAM+0x5ec>)
 8002bea:	f7fd ffd3 	bl	8000b94 <PIN_LOW>
 8002bee:	2101      	movs	r1, #1
 8002bf0:	4828      	ldr	r0, [pc, #160]	; (8002c94 <readGRAM+0x5ec>)
 8002bf2:	f7fd ffcf 	bl	8000b94 <PIN_LOW>
 8002bf6:	4b27      	ldr	r3, [pc, #156]	; (8002c94 <readGRAM+0x5ec>)
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	085b      	lsrs	r3, r3, #1
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4b24      	ldr	r3, [pc, #144]	; (8002c98 <readGRAM+0x5f0>)
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	091b      	lsrs	r3, r3, #4
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4313      	orrs	r3, r2
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <readGRAM+0x5f0>)
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	005b      	lsls	r3, r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	4313      	orrs	r3, r2
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <readGRAM+0x5f0>)
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	4b16      	ldr	r3, [pc, #88]	; (8002c98 <readGRAM+0x5f0>)
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	4b11      	ldr	r3, [pc, #68]	; (8002c94 <readGRAM+0x5ec>)
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	0a1b      	lsrs	r3, r3, #8
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4b0f      	ldr	r3, [pc, #60]	; (8002c9c <readGRAM+0x5f4>)
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	099b      	lsrs	r3, r3, #6
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	4b08      	ldr	r3, [pc, #32]	; (8002c94 <readGRAM+0x5ec>)
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	0a5b      	lsrs	r3, r3, #9
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	75fb      	strb	r3, [r7, #23]
 8002c82:	2101      	movs	r1, #1
 8002c84:	4803      	ldr	r0, [pc, #12]	; (8002c94 <readGRAM+0x5ec>)
 8002c86:	f7fd ff95 	bl	8000bb4 <PIN_HIGH>
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4801      	ldr	r0, [pc, #4]	; (8002c94 <readGRAM+0x5ec>)
 8002c8e:	f7fd ff91 	bl	8000bb4 <PIN_HIGH>
        while (n)
 8002c92:	e29f      	b.n	80031d4 <readGRAM+0xb2c>
 8002c94:	40020000 	.word	0x40020000
 8002c98:	40020400 	.word	0x40020400
 8002c9c:	40020800 	.word	0x40020800
 8002ca0:	200000da 	.word	0x200000da
        {
            if (_lcd_capable & READ_24BITS)
 8002ca4:	4bab      	ldr	r3, [pc, #684]	; (8002f54 <readGRAM+0x8ac>)
 8002ca6:	881b      	ldrh	r3, [r3, #0]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 816b 	beq.w	8002f88 <readGRAM+0x8e0>
            {
                READ_8(r);
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	48a8      	ldr	r0, [pc, #672]	; (8002f58 <readGRAM+0x8b0>)
 8002cb6:	f7fd ff7d 	bl	8000bb4 <PIN_HIGH>
 8002cba:	2101      	movs	r1, #1
 8002cbc:	48a6      	ldr	r0, [pc, #664]	; (8002f58 <readGRAM+0x8b0>)
 8002cbe:	f7fd ff69 	bl	8000b94 <PIN_LOW>
 8002cc2:	2101      	movs	r1, #1
 8002cc4:	48a4      	ldr	r0, [pc, #656]	; (8002f58 <readGRAM+0x8b0>)
 8002cc6:	f7fd ff65 	bl	8000b94 <PIN_LOW>
 8002cca:	2101      	movs	r1, #1
 8002ccc:	48a2      	ldr	r0, [pc, #648]	; (8002f58 <readGRAM+0x8b0>)
 8002cce:	f7fd ff61 	bl	8000b94 <PIN_LOW>
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	48a0      	ldr	r0, [pc, #640]	; (8002f58 <readGRAM+0x8b0>)
 8002cd6:	f7fd ff5d 	bl	8000b94 <PIN_LOW>
 8002cda:	2101      	movs	r1, #1
 8002cdc:	489e      	ldr	r0, [pc, #632]	; (8002f58 <readGRAM+0x8b0>)
 8002cde:	f7fd ff59 	bl	8000b94 <PIN_LOW>
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	489c      	ldr	r0, [pc, #624]	; (8002f58 <readGRAM+0x8b0>)
 8002ce6:	f7fd ff55 	bl	8000b94 <PIN_LOW>
 8002cea:	2101      	movs	r1, #1
 8002cec:	489a      	ldr	r0, [pc, #616]	; (8002f58 <readGRAM+0x8b0>)
 8002cee:	f7fd ff51 	bl	8000b94 <PIN_LOW>
 8002cf2:	4b99      	ldr	r3, [pc, #612]	; (8002f58 <readGRAM+0x8b0>)
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002cfe:	b2da      	uxtb	r2, r3
 8002d00:	4b96      	ldr	r3, [pc, #600]	; (8002f5c <readGRAM+0x8b4>)
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	4b92      	ldr	r3, [pc, #584]	; (8002f5c <readGRAM+0x8b4>)
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	005b      	lsls	r3, r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	4313      	orrs	r3, r2
 8002d24:	b2da      	uxtb	r2, r3
 8002d26:	4b8d      	ldr	r3, [pc, #564]	; (8002f5c <readGRAM+0x8b4>)
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	085b      	lsrs	r3, r3, #1
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f003 0310 	and.w	r3, r3, #16
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	4313      	orrs	r3, r2
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	4b88      	ldr	r3, [pc, #544]	; (8002f5c <readGRAM+0x8b4>)
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	b2da      	uxtb	r2, r3
 8002d48:	4b83      	ldr	r3, [pc, #524]	; (8002f58 <readGRAM+0x8b0>)
 8002d4a:	691b      	ldr	r3, [r3, #16]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	b2db      	uxtb	r3, r3
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4313      	orrs	r3, r2
 8002d58:	b2da      	uxtb	r2, r3
 8002d5a:	4b81      	ldr	r3, [pc, #516]	; (8002f60 <readGRAM+0x8b8>)
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	099b      	lsrs	r3, r3, #6
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	4b7a      	ldr	r3, [pc, #488]	; (8002f58 <readGRAM+0x8b0>)
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	0a5b      	lsrs	r3, r3, #9
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f003 0301 	and.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	75fb      	strb	r3, [r7, #23]
 8002d7e:	2101      	movs	r1, #1
 8002d80:	4875      	ldr	r0, [pc, #468]	; (8002f58 <readGRAM+0x8b0>)
 8002d82:	f7fd ff17 	bl	8000bb4 <PIN_HIGH>
 8002d86:	2101      	movs	r1, #1
 8002d88:	4873      	ldr	r0, [pc, #460]	; (8002f58 <readGRAM+0x8b0>)
 8002d8a:	f7fd ff13 	bl	8000bb4 <PIN_HIGH>
                READ_8(g);
 8002d8e:	2101      	movs	r1, #1
 8002d90:	4871      	ldr	r0, [pc, #452]	; (8002f58 <readGRAM+0x8b0>)
 8002d92:	f7fd ff0f 	bl	8000bb4 <PIN_HIGH>
 8002d96:	2101      	movs	r1, #1
 8002d98:	486f      	ldr	r0, [pc, #444]	; (8002f58 <readGRAM+0x8b0>)
 8002d9a:	f7fd fefb 	bl	8000b94 <PIN_LOW>
 8002d9e:	2101      	movs	r1, #1
 8002da0:	486d      	ldr	r0, [pc, #436]	; (8002f58 <readGRAM+0x8b0>)
 8002da2:	f7fd fef7 	bl	8000b94 <PIN_LOW>
 8002da6:	2101      	movs	r1, #1
 8002da8:	486b      	ldr	r0, [pc, #428]	; (8002f58 <readGRAM+0x8b0>)
 8002daa:	f7fd fef3 	bl	8000b94 <PIN_LOW>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4869      	ldr	r0, [pc, #420]	; (8002f58 <readGRAM+0x8b0>)
 8002db2:	f7fd feef 	bl	8000b94 <PIN_LOW>
 8002db6:	2101      	movs	r1, #1
 8002db8:	4867      	ldr	r0, [pc, #412]	; (8002f58 <readGRAM+0x8b0>)
 8002dba:	f7fd feeb 	bl	8000b94 <PIN_LOW>
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4865      	ldr	r0, [pc, #404]	; (8002f58 <readGRAM+0x8b0>)
 8002dc2:	f7fd fee7 	bl	8000b94 <PIN_LOW>
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	4863      	ldr	r0, [pc, #396]	; (8002f58 <readGRAM+0x8b0>)
 8002dca:	f7fd fee3 	bl	8000b94 <PIN_LOW>
 8002dce:	4b62      	ldr	r3, [pc, #392]	; (8002f58 <readGRAM+0x8b0>)
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	085b      	lsrs	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	4b5f      	ldr	r3, [pc, #380]	; (8002f5c <readGRAM+0x8b4>)
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	b2db      	uxtb	r3, r3
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	4313      	orrs	r3, r2
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	4b5b      	ldr	r3, [pc, #364]	; (8002f5c <readGRAM+0x8b4>)
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f003 0320 	and.w	r3, r3, #32
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	4b56      	ldr	r3, [pc, #344]	; (8002f5c <readGRAM+0x8b4>)
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	085b      	lsrs	r3, r3, #1
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	4313      	orrs	r3, r2
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	4b51      	ldr	r3, [pc, #324]	; (8002f5c <readGRAM+0x8b4>)
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	f003 0308 	and.w	r3, r3, #8
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	4313      	orrs	r3, r2
 8002e22:	b2da      	uxtb	r2, r3
 8002e24:	4b4c      	ldr	r3, [pc, #304]	; (8002f58 <readGRAM+0x8b0>)
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	0a1b      	lsrs	r3, r3, #8
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	4313      	orrs	r3, r2
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	4b4a      	ldr	r3, [pc, #296]	; (8002f60 <readGRAM+0x8b8>)
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	099b      	lsrs	r3, r3, #6
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4313      	orrs	r3, r2
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	4b43      	ldr	r3, [pc, #268]	; (8002f58 <readGRAM+0x8b0>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	0a5b      	lsrs	r3, r3, #9
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	f003 0301 	and.w	r3, r3, #1
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	4313      	orrs	r3, r2
 8002e58:	757b      	strb	r3, [r7, #21]
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	483e      	ldr	r0, [pc, #248]	; (8002f58 <readGRAM+0x8b0>)
 8002e5e:	f7fd fea9 	bl	8000bb4 <PIN_HIGH>
 8002e62:	2101      	movs	r1, #1
 8002e64:	483c      	ldr	r0, [pc, #240]	; (8002f58 <readGRAM+0x8b0>)
 8002e66:	f7fd fea5 	bl	8000bb4 <PIN_HIGH>
                READ_8(b);
 8002e6a:	2101      	movs	r1, #1
 8002e6c:	483a      	ldr	r0, [pc, #232]	; (8002f58 <readGRAM+0x8b0>)
 8002e6e:	f7fd fea1 	bl	8000bb4 <PIN_HIGH>
 8002e72:	2101      	movs	r1, #1
 8002e74:	4838      	ldr	r0, [pc, #224]	; (8002f58 <readGRAM+0x8b0>)
 8002e76:	f7fd fe8d 	bl	8000b94 <PIN_LOW>
 8002e7a:	2101      	movs	r1, #1
 8002e7c:	4836      	ldr	r0, [pc, #216]	; (8002f58 <readGRAM+0x8b0>)
 8002e7e:	f7fd fe89 	bl	8000b94 <PIN_LOW>
 8002e82:	2101      	movs	r1, #1
 8002e84:	4834      	ldr	r0, [pc, #208]	; (8002f58 <readGRAM+0x8b0>)
 8002e86:	f7fd fe85 	bl	8000b94 <PIN_LOW>
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	4832      	ldr	r0, [pc, #200]	; (8002f58 <readGRAM+0x8b0>)
 8002e8e:	f7fd fe81 	bl	8000b94 <PIN_LOW>
 8002e92:	2101      	movs	r1, #1
 8002e94:	4830      	ldr	r0, [pc, #192]	; (8002f58 <readGRAM+0x8b0>)
 8002e96:	f7fd fe7d 	bl	8000b94 <PIN_LOW>
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	482e      	ldr	r0, [pc, #184]	; (8002f58 <readGRAM+0x8b0>)
 8002e9e:	f7fd fe79 	bl	8000b94 <PIN_LOW>
 8002ea2:	2101      	movs	r1, #1
 8002ea4:	482c      	ldr	r0, [pc, #176]	; (8002f58 <readGRAM+0x8b0>)
 8002ea6:	f7fd fe75 	bl	8000b94 <PIN_LOW>
 8002eaa:	4b2b      	ldr	r3, [pc, #172]	; (8002f58 <readGRAM+0x8b0>)
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	085b      	lsrs	r3, r3, #1
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002eb6:	b2da      	uxtb	r2, r3
 8002eb8:	4b28      	ldr	r3, [pc, #160]	; (8002f5c <readGRAM+0x8b4>)
 8002eba:	691b      	ldr	r3, [r3, #16]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	b2da      	uxtb	r2, r3
 8002eca:	4b24      	ldr	r3, [pc, #144]	; (8002f5c <readGRAM+0x8b4>)
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	f003 0320 	and.w	r3, r3, #32
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	4313      	orrs	r3, r2
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <readGRAM+0x8b4>)
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	085b      	lsrs	r3, r3, #1
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	f003 0310 	and.w	r3, r3, #16
 8002eea:	b2db      	uxtb	r3, r3
 8002eec:	4313      	orrs	r3, r2
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	4b1a      	ldr	r3, [pc, #104]	; (8002f5c <readGRAM+0x8b4>)
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	4313      	orrs	r3, r2
 8002efe:	b2da      	uxtb	r2, r3
 8002f00:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <readGRAM+0x8b0>)
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	0a1b      	lsrs	r3, r3, #8
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	f003 0304 	and.w	r3, r3, #4
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <readGRAM+0x8b8>)
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	099b      	lsrs	r3, r3, #6
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	4313      	orrs	r3, r2
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	4b0c      	ldr	r3, [pc, #48]	; (8002f58 <readGRAM+0x8b0>)
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	0a5b      	lsrs	r3, r3, #9
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	4313      	orrs	r3, r2
 8002f34:	753b      	strb	r3, [r7, #20]
 8002f36:	2101      	movs	r1, #1
 8002f38:	4807      	ldr	r0, [pc, #28]	; (8002f58 <readGRAM+0x8b0>)
 8002f3a:	f7fd fe3b 	bl	8000bb4 <PIN_HIGH>
 8002f3e:	2101      	movs	r1, #1
 8002f40:	4805      	ldr	r0, [pc, #20]	; (8002f58 <readGRAM+0x8b0>)
 8002f42:	f7fd fe37 	bl	8000bb4 <PIN_HIGH>
                if (_lcd_capable & READ_BGR)
 8002f46:	4b03      	ldr	r3, [pc, #12]	; (8002f54 <readGRAM+0x8ac>)
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d011      	beq.n	8002f76 <readGRAM+0x8ce>
 8002f52:	e007      	b.n	8002f64 <readGRAM+0x8bc>
 8002f54:	200000cc 	.word	0x200000cc
 8002f58:	40020000 	.word	0x40020000
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	40020800 	.word	0x40020800
                    ret = color565(b, g, r);
 8002f64:	7dfa      	ldrb	r2, [r7, #23]
 8002f66:	7d79      	ldrb	r1, [r7, #21]
 8002f68:	7d3b      	ldrb	r3, [r7, #20]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fd fee9 	bl	8000d42 <color565>
 8002f70:	4603      	mov	r3, r0
 8002f72:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f74:	e113      	b.n	800319e <readGRAM+0xaf6>
                else
                    ret = color565(r, g, b);
 8002f76:	7d3a      	ldrb	r2, [r7, #20]
 8002f78:	7d79      	ldrb	r1, [r7, #21]
 8002f7a:	7dfb      	ldrb	r3, [r7, #23]
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	f7fd fee0 	bl	8000d42 <color565>
 8002f82:	4603      	mov	r3, r0
 8002f84:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f86:	e10a      	b.n	800319e <readGRAM+0xaf6>
            } else
            {
                READ_16(ret);
 8002f88:	2101      	movs	r1, #1
 8002f8a:	4895      	ldr	r0, [pc, #596]	; (80031e0 <readGRAM+0xb38>)
 8002f8c:	f7fd fe12 	bl	8000bb4 <PIN_HIGH>
 8002f90:	2101      	movs	r1, #1
 8002f92:	4893      	ldr	r0, [pc, #588]	; (80031e0 <readGRAM+0xb38>)
 8002f94:	f7fd fdfe 	bl	8000b94 <PIN_LOW>
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4891      	ldr	r0, [pc, #580]	; (80031e0 <readGRAM+0xb38>)
 8002f9c:	f7fd fdfa 	bl	8000b94 <PIN_LOW>
 8002fa0:	2101      	movs	r1, #1
 8002fa2:	488f      	ldr	r0, [pc, #572]	; (80031e0 <readGRAM+0xb38>)
 8002fa4:	f7fd fdf6 	bl	8000b94 <PIN_LOW>
 8002fa8:	2101      	movs	r1, #1
 8002faa:	488d      	ldr	r0, [pc, #564]	; (80031e0 <readGRAM+0xb38>)
 8002fac:	f7fd fdf2 	bl	8000b94 <PIN_LOW>
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	488b      	ldr	r0, [pc, #556]	; (80031e0 <readGRAM+0xb38>)
 8002fb4:	f7fd fdee 	bl	8000b94 <PIN_LOW>
 8002fb8:	2101      	movs	r1, #1
 8002fba:	4889      	ldr	r0, [pc, #548]	; (80031e0 <readGRAM+0xb38>)
 8002fbc:	f7fd fdea 	bl	8000b94 <PIN_LOW>
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	4887      	ldr	r0, [pc, #540]	; (80031e0 <readGRAM+0xb38>)
 8002fc4:	f7fd fde6 	bl	8000b94 <PIN_LOW>
 8002fc8:	4b85      	ldr	r3, [pc, #532]	; (80031e0 <readGRAM+0xb38>)
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002fd4:	b2da      	uxtb	r2, r3
 8002fd6:	4b83      	ldr	r3, [pc, #524]	; (80031e4 <readGRAM+0xb3c>)
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	091b      	lsrs	r3, r3, #4
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	4b7e      	ldr	r3, [pc, #504]	; (80031e4 <readGRAM+0xb3c>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	4b79      	ldr	r3, [pc, #484]	; (80031e4 <readGRAM+0xb3c>)
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	085b      	lsrs	r3, r3, #1
 8003002:	b2db      	uxtb	r3, r3
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	b2db      	uxtb	r3, r3
 800300a:	4313      	orrs	r3, r2
 800300c:	b2da      	uxtb	r2, r3
 800300e:	4b75      	ldr	r3, [pc, #468]	; (80031e4 <readGRAM+0xb3c>)
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	b2db      	uxtb	r3, r3
 8003014:	f003 0308 	and.w	r3, r3, #8
 8003018:	b2db      	uxtb	r3, r3
 800301a:	4313      	orrs	r3, r2
 800301c:	b2da      	uxtb	r2, r3
 800301e:	4b70      	ldr	r3, [pc, #448]	; (80031e0 <readGRAM+0xb38>)
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	0a1b      	lsrs	r3, r3, #8
 8003024:	b2db      	uxtb	r3, r3
 8003026:	f003 0304 	and.w	r3, r3, #4
 800302a:	b2db      	uxtb	r3, r3
 800302c:	4313      	orrs	r3, r2
 800302e:	b2da      	uxtb	r2, r3
 8003030:	4b6d      	ldr	r3, [pc, #436]	; (80031e8 <readGRAM+0xb40>)
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	099b      	lsrs	r3, r3, #6
 8003036:	b2db      	uxtb	r3, r3
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	b2db      	uxtb	r3, r3
 800303e:	4313      	orrs	r3, r2
 8003040:	b2da      	uxtb	r2, r3
 8003042:	4b67      	ldr	r3, [pc, #412]	; (80031e0 <readGRAM+0xb38>)
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	0a5b      	lsrs	r3, r3, #9
 8003048:	b2db      	uxtb	r3, r3
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	b2db      	uxtb	r3, r3
 8003050:	4313      	orrs	r3, r2
 8003052:	75bb      	strb	r3, [r7, #22]
 8003054:	2101      	movs	r1, #1
 8003056:	4862      	ldr	r0, [pc, #392]	; (80031e0 <readGRAM+0xb38>)
 8003058:	f7fd fdac 	bl	8000bb4 <PIN_HIGH>
 800305c:	2101      	movs	r1, #1
 800305e:	4860      	ldr	r0, [pc, #384]	; (80031e0 <readGRAM+0xb38>)
 8003060:	f7fd fda8 	bl	8000bb4 <PIN_HIGH>
 8003064:	2101      	movs	r1, #1
 8003066:	485e      	ldr	r0, [pc, #376]	; (80031e0 <readGRAM+0xb38>)
 8003068:	f7fd fda4 	bl	8000bb4 <PIN_HIGH>
 800306c:	2101      	movs	r1, #1
 800306e:	485c      	ldr	r0, [pc, #368]	; (80031e0 <readGRAM+0xb38>)
 8003070:	f7fd fd90 	bl	8000b94 <PIN_LOW>
 8003074:	2101      	movs	r1, #1
 8003076:	485a      	ldr	r0, [pc, #360]	; (80031e0 <readGRAM+0xb38>)
 8003078:	f7fd fd8c 	bl	8000b94 <PIN_LOW>
 800307c:	2101      	movs	r1, #1
 800307e:	4858      	ldr	r0, [pc, #352]	; (80031e0 <readGRAM+0xb38>)
 8003080:	f7fd fd88 	bl	8000b94 <PIN_LOW>
 8003084:	2101      	movs	r1, #1
 8003086:	4856      	ldr	r0, [pc, #344]	; (80031e0 <readGRAM+0xb38>)
 8003088:	f7fd fd84 	bl	8000b94 <PIN_LOW>
 800308c:	2101      	movs	r1, #1
 800308e:	4854      	ldr	r0, [pc, #336]	; (80031e0 <readGRAM+0xb38>)
 8003090:	f7fd fd80 	bl	8000b94 <PIN_LOW>
 8003094:	2101      	movs	r1, #1
 8003096:	4852      	ldr	r0, [pc, #328]	; (80031e0 <readGRAM+0xb38>)
 8003098:	f7fd fd7c 	bl	8000b94 <PIN_LOW>
 800309c:	2101      	movs	r1, #1
 800309e:	4850      	ldr	r0, [pc, #320]	; (80031e0 <readGRAM+0xb38>)
 80030a0:	f7fd fd78 	bl	8000b94 <PIN_LOW>
 80030a4:	4b4e      	ldr	r3, [pc, #312]	; (80031e0 <readGRAM+0xb38>)
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b0:	b29a      	uxth	r2, r3
 80030b2:	4b4c      	ldr	r3, [pc, #304]	; (80031e4 <readGRAM+0xb3c>)
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	091b      	lsrs	r3, r3, #4
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030be:	b29b      	uxth	r3, r3
 80030c0:	4313      	orrs	r3, r2
 80030c2:	b29a      	uxth	r2, r3
 80030c4:	4b47      	ldr	r3, [pc, #284]	; (80031e4 <readGRAM+0xb3c>)
 80030c6:	691b      	ldr	r3, [r3, #16]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	f003 0320 	and.w	r3, r3, #32
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	4313      	orrs	r3, r2
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	4b42      	ldr	r3, [pc, #264]	; (80031e4 <readGRAM+0xb3c>)
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	085b      	lsrs	r3, r3, #1
 80030de:	b29b      	uxth	r3, r3
 80030e0:	f003 0310 	and.w	r3, r3, #16
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	4313      	orrs	r3, r2
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	4b3e      	ldr	r3, [pc, #248]	; (80031e4 <readGRAM+0xb3c>)
 80030ec:	691b      	ldr	r3, [r3, #16]
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	f003 0308 	and.w	r3, r3, #8
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	4313      	orrs	r3, r2
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	4b39      	ldr	r3, [pc, #228]	; (80031e0 <readGRAM+0xb38>)
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	b29b      	uxth	r3, r3
 8003102:	f003 0304 	and.w	r3, r3, #4
 8003106:	b29b      	uxth	r3, r3
 8003108:	4313      	orrs	r3, r2
 800310a:	b29a      	uxth	r2, r3
 800310c:	4b36      	ldr	r3, [pc, #216]	; (80031e8 <readGRAM+0xb40>)
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	b29b      	uxth	r3, r3
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	b29b      	uxth	r3, r3
 800311a:	4313      	orrs	r3, r2
 800311c:	b29a      	uxth	r2, r3
 800311e:	4b30      	ldr	r3, [pc, #192]	; (80031e0 <readGRAM+0xb38>)
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	0a5b      	lsrs	r3, r3, #9
 8003124:	b29b      	uxth	r3, r3
 8003126:	f003 0301 	and.w	r3, r3, #1
 800312a:	b29b      	uxth	r3, r3
 800312c:	4313      	orrs	r3, r2
 800312e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003130:	2101      	movs	r1, #1
 8003132:	482b      	ldr	r0, [pc, #172]	; (80031e0 <readGRAM+0xb38>)
 8003134:	f7fd fd3e 	bl	8000bb4 <PIN_HIGH>
 8003138:	2101      	movs	r1, #1
 800313a:	4829      	ldr	r0, [pc, #164]	; (80031e0 <readGRAM+0xb38>)
 800313c:	f7fd fd3a 	bl	8000bb4 <PIN_HIGH>
 8003140:	7dbb      	ldrb	r3, [r7, #22]
 8003142:	021b      	lsls	r3, r3, #8
 8003144:	b21a      	sxth	r2, r3
 8003146:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 800314a:	4313      	orrs	r3, r2
 800314c:	b21b      	sxth	r3, r3
 800314e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_LOWHIGH)
 8003150:	4b26      	ldr	r3, [pc, #152]	; (80031ec <readGRAM+0xb44>)
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	f003 0308 	and.w	r3, r3, #8
 8003158:	2b00      	cmp	r3, #0
 800315a:	d009      	beq.n	8003170 <readGRAM+0xac8>
                    ret = (ret >> 8) | (ret << 8);
 800315c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800315e:	0a1b      	lsrs	r3, r3, #8
 8003160:	b29b      	uxth	r3, r3
 8003162:	b21a      	sxth	r2, r3
 8003164:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	b21b      	sxth	r3, r3
 800316a:	4313      	orrs	r3, r2
 800316c:	b21b      	sxth	r3, r3
 800316e:	84fb      	strh	r3, [r7, #38]	; 0x26
                if (_lcd_capable & READ_BGR)
 8003170:	4b1e      	ldr	r3, [pc, #120]	; (80031ec <readGRAM+0xb44>)
 8003172:	881b      	ldrh	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	d010      	beq.n	800319e <readGRAM+0xaf6>
                    ret = (ret & 0x07E0) | (ret >> 11) | (ret << 11);
 800317c:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8003180:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003184:	b21a      	sxth	r2, r3
 8003186:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003188:	0adb      	lsrs	r3, r3, #11
 800318a:	b29b      	uxth	r3, r3
 800318c:	b21b      	sxth	r3, r3
 800318e:	4313      	orrs	r3, r2
 8003190:	b21a      	sxth	r2, r3
 8003192:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003194:	02db      	lsls	r3, r3, #11
 8003196:	b21b      	sxth	r3, r3
 8003198:	4313      	orrs	r3, r2
 800319a:	b21b      	sxth	r3, r3
 800319c:	84fb      	strh	r3, [r7, #38]	; 0x26
            }
#if defined(SUPPORT_9488_555)
    if (is555) ret = color555_to_565(ret);
 800319e:	4b14      	ldr	r3, [pc, #80]	; (80031f0 <readGRAM+0xb48>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d005      	beq.n	80031b2 <readGRAM+0xb0a>
 80031a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fd fd79 	bl	8000ca0 <color555_to_565>
 80031ae:	4603      	mov	r3, r0
 80031b0:	84fb      	strh	r3, [r7, #38]	; 0x26
#endif
            *block++ = ret;
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	1c9a      	adds	r2, r3, #2
 80031b6:	60ba      	str	r2, [r7, #8]
 80031b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80031ba:	801a      	strh	r2, [r3, #0]
            n--;
 80031bc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	847b      	strh	r3, [r7, #34]	; 0x22
            if (!(_lcd_capable & AUTO_READINC))
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <readGRAM+0xb44>)
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00f      	beq.n	80031f4 <readGRAM+0xb4c>
        while (n)
 80031d4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f47f ad63 	bne.w	8002ca4 <readGRAM+0x5fc>
 80031de:	e00a      	b.n	80031f6 <readGRAM+0xb4e>
 80031e0:	40020000 	.word	0x40020000
 80031e4:	40020400 	.word	0x40020400
 80031e8:	40020800 	.word	0x40020800
 80031ec:	200000cc 	.word	0x200000cc
 80031f0:	20000034 	.word	0x20000034
                break;
 80031f4:	bf00      	nop
        }
        if (++col >= w) {
 80031f6:	8bfb      	ldrh	r3, [r7, #30]
 80031f8:	3301      	adds	r3, #1
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	83fb      	strh	r3, [r7, #30]
 80031fe:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8003202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003206:	429a      	cmp	r2, r3
 8003208:	db0d      	blt.n	8003226 <readGRAM+0xb7e>
            col = 0;
 800320a:	2300      	movs	r3, #0
 800320c:	83fb      	strh	r3, [r7, #30]
            if (++row >= h)
 800320e:	8c3b      	ldrh	r3, [r7, #32]
 8003210:	3301      	adds	r3, #1
 8003212:	b29b      	uxth	r3, r3
 8003214:	843b      	strh	r3, [r7, #32]
 8003216:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800321a:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800321e:	429a      	cmp	r2, r3
 8003220:	db01      	blt.n	8003226 <readGRAM+0xb7e>
                row = 0;
 8003222:	2300      	movs	r3, #0
 8003224:	843b      	strh	r3, [r7, #32]
        }
        RD_IDLE;
 8003226:	2101      	movs	r1, #1
 8003228:	4814      	ldr	r0, [pc, #80]	; (800327c <readGRAM+0xbd4>)
 800322a:	f7fd fcc3 	bl	8000bb4 <PIN_HIGH>
        CS_IDLE;
 800322e:	2101      	movs	r1, #1
 8003230:	4813      	ldr	r0, [pc, #76]	; (8003280 <readGRAM+0xbd8>)
 8003232:	f7fd fcbf 	bl	8000bb4 <PIN_HIGH>
        setWriteDir();
 8003236:	f7fd fe15 	bl	8000e64 <setWriteDir>
    while (n > 0) {
 800323a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800323e:	2b00      	cmp	r3, #0
 8003240:	f73f aa7e 	bgt.w	8002740 <readGRAM+0x98>
    }
    if (!(_lcd_capable & MIPI_DCS_REV1))
 8003244:	4b0f      	ldr	r3, [pc, #60]	; (8003284 <readGRAM+0xbdc>)
 8003246:	881b      	ldrh	r3, [r3, #0]
 8003248:	f003 0301 	and.w	r3, r3, #1
 800324c:	2b00      	cmp	r3, #0
 800324e:	d110      	bne.n	8003272 <readGRAM+0xbca>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 8003250:	f7fd fcee 	bl	8000c30 <width>
 8003254:	4603      	mov	r3, r0
 8003256:	3b01      	subs	r3, #1
 8003258:	b29b      	uxth	r3, r3
 800325a:	b21c      	sxth	r4, r3
 800325c:	f7fd fcf4 	bl	8000c48 <height>
 8003260:	4603      	mov	r3, r0
 8003262:	3b01      	subs	r3, #1
 8003264:	b29b      	uxth	r3, r3
 8003266:	b21b      	sxth	r3, r3
 8003268:	4622      	mov	r2, r4
 800326a:	2100      	movs	r1, #0
 800326c:	2000      	movs	r0, #0
 800326e:	f000 fb97 	bl	80039a0 <setAddrWindow>
    return 0;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	372c      	adds	r7, #44	; 0x2c
 8003278:	46bd      	mov	sp, r7
 800327a:	bd90      	pop	{r4, r7, pc}
 800327c:	40020000 	.word	0x40020000
 8003280:	40020400 	.word	0x40020400
 8003284:	200000cc 	.word	0x200000cc

08003288 <setRotation>:


void setRotation(uint8_t r)
{
 8003288:	b590      	push	{r4, r7, lr}
 800328a:	b087      	sub	sp, #28
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	71fb      	strb	r3, [r7, #7]
   uint16_t GS, SS_v, ORG, REV = _lcd_rev;
 8003292:	4bab      	ldr	r3, [pc, #684]	; (8003540 <setRotation+0x2b8>)
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	827b      	strh	r3, [r7, #18]
   uint8_t val, d[3];
   rotation = r & 3;           // just perform the operation ourselves on the protected variables
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	4ba8      	ldr	r3, [pc, #672]	; (8003544 <setRotation+0x2bc>)
 80032a2:	701a      	strb	r2, [r3, #0]
   _width = (rotation & 1) ? HEIGHT : WIDTH;
 80032a4:	4ba7      	ldr	r3, [pc, #668]	; (8003544 <setRotation+0x2bc>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	f003 0301 	and.w	r3, r3, #1
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d002      	beq.n	80032b6 <setRotation+0x2e>
 80032b0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032b4:	e000      	b.n	80032b8 <setRotation+0x30>
 80032b6:	22f0      	movs	r2, #240	; 0xf0
 80032b8:	4ba3      	ldr	r3, [pc, #652]	; (8003548 <setRotation+0x2c0>)
 80032ba:	801a      	strh	r2, [r3, #0]
   _height = (rotation & 1) ? WIDTH : HEIGHT;
 80032bc:	4ba1      	ldr	r3, [pc, #644]	; (8003544 <setRotation+0x2bc>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	f003 0301 	and.w	r3, r3, #1
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <setRotation+0x44>
 80032c8:	22f0      	movs	r2, #240	; 0xf0
 80032ca:	e001      	b.n	80032d0 <setRotation+0x48>
 80032cc:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80032d0:	4b9e      	ldr	r3, [pc, #632]	; (800354c <setRotation+0x2c4>)
 80032d2:	801a      	strh	r2, [r3, #0]
   switch (rotation) {
 80032d4:	4b9b      	ldr	r3, [pc, #620]	; (8003544 <setRotation+0x2bc>)
 80032d6:	781b      	ldrb	r3, [r3, #0]
 80032d8:	2b03      	cmp	r3, #3
 80032da:	d817      	bhi.n	800330c <setRotation+0x84>
 80032dc:	a201      	add	r2, pc, #4	; (adr r2, 80032e4 <setRotation+0x5c>)
 80032de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e2:	bf00      	nop
 80032e4:	080032f5 	.word	0x080032f5
 80032e8:	080032fb 	.word	0x080032fb
 80032ec:	08003301 	.word	0x08003301
 80032f0:	08003307 	.word	0x08003307
   case 0:                    //PORTRAIT:
       val = 0x48;             //MY=0, MX=1, MV=0, ML=0, BGR=1
 80032f4:	2348      	movs	r3, #72	; 0x48
 80032f6:	72fb      	strb	r3, [r7, #11]
       break;
 80032f8:	e008      	b.n	800330c <setRotation+0x84>
   case 1:                    //LANDSCAPE: 90 degrees
       val = 0x28;             //MY=0, MX=0, MV=1, ML=0, BGR=1
 80032fa:	2328      	movs	r3, #40	; 0x28
 80032fc:	72fb      	strb	r3, [r7, #11]
       break;
 80032fe:	e005      	b.n	800330c <setRotation+0x84>
   case 2:                    //PORTRAIT_REV: 180 degrees
       val = 0x98;             //MY=1, MX=0, MV=0, ML=1, BGR=1
 8003300:	2398      	movs	r3, #152	; 0x98
 8003302:	72fb      	strb	r3, [r7, #11]
       break;
 8003304:	e002      	b.n	800330c <setRotation+0x84>
   case 3:                    //LANDSCAPE_REV: 270 degrees
       val = 0xF8;             //MY=1, MX=1, MV=1, ML=1, BGR=1
 8003306:	23f8      	movs	r3, #248	; 0xf8
 8003308:	72fb      	strb	r3, [r7, #11]
       break;
 800330a:	bf00      	nop
   }
   if (_lcd_capable & INVERT_GS)
 800330c:	4b90      	ldr	r3, [pc, #576]	; (8003550 <setRotation+0x2c8>)
 800330e:	881b      	ldrh	r3, [r3, #0]
 8003310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <setRotation+0x9c>
       val ^= 0x80;
 8003318:	7afb      	ldrb	r3, [r7, #11]
 800331a:	f083 037f 	eor.w	r3, r3, #127	; 0x7f
 800331e:	43db      	mvns	r3, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_SS)
 8003324:	4b8a      	ldr	r3, [pc, #552]	; (8003550 <setRotation+0x2c8>)
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800332c:	2b00      	cmp	r3, #0
 800332e:	d004      	beq.n	800333a <setRotation+0xb2>
       val ^= 0x40;
 8003330:	7afb      	ldrb	r3, [r7, #11]
 8003332:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 8003336:	b2db      	uxtb	r3, r3
 8003338:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & INVERT_RGB)
 800333a:	4b85      	ldr	r3, [pc, #532]	; (8003550 <setRotation+0x2c8>)
 800333c:	881b      	ldrh	r3, [r3, #0]
 800333e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003342:	2b00      	cmp	r3, #0
 8003344:	d004      	beq.n	8003350 <setRotation+0xc8>
       val ^= 0x08;
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	f083 0308 	eor.w	r3, r3, #8
 800334c:	b2db      	uxtb	r3, r3
 800334e:	72fb      	strb	r3, [r7, #11]
   if (_lcd_capable & MIPI_DCS_REV1) {
 8003350:	4b7f      	ldr	r3, [pc, #508]	; (8003550 <setRotation+0x2c8>)
 8003352:	881b      	ldrh	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 8119 	beq.w	8003590 <setRotation+0x308>
       if (_lcd_ID == 0x6814) {  //.kbv my weird 0x9486 might be 68140
 800335e:	4b7d      	ldr	r3, [pc, #500]	; (8003554 <setRotation+0x2cc>)
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	f646 0214 	movw	r2, #26644	; 0x6814
 8003366:	4293      	cmp	r3, r2
 8003368:	d128      	bne.n	80033bc <setRotation+0x134>
           GS = (val & 0x80) ? (1 << 6) : 0;   //MY
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	b25b      	sxtb	r3, r3
 800336e:	105b      	asrs	r3, r3, #1
 8003370:	b25b      	sxtb	r3, r3
 8003372:	b29b      	uxth	r3, r3
 8003374:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003378:	823b      	strh	r3, [r7, #16]
           SS_v = (val & 0x40) ? (1 << 5) : 0;   //MX
 800337a:	7afb      	ldrb	r3, [r7, #11]
 800337c:	105b      	asrs	r3, r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	81fb      	strh	r3, [r7, #14]
           val &= 0x28;        //keep MV, BGR, MY=0, MX=0, ML=0
 8003386:	7afb      	ldrb	r3, [r7, #11]
 8003388:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800338c:	b2db      	uxtb	r3, r3
 800338e:	72fb      	strb	r3, [r7, #11]
           d[0] = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	723b      	strb	r3, [r7, #8]
           d[1] = GS | SS_v | 0x02;      //MY, MX
 8003394:	8a3b      	ldrh	r3, [r7, #16]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	89fb      	ldrh	r3, [r7, #14]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	4313      	orrs	r3, r2
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	727b      	strb	r3, [r7, #9]
           d[2] = 0x3B;
 80033a8:	233b      	movs	r3, #59	; 0x3b
 80033aa:	72bb      	strb	r3, [r7, #10]
           WriteCmdParamN(0xB6, 3, d);
 80033ac:	f107 0308 	add.w	r3, r7, #8
 80033b0:	461a      	mov	r2, r3
 80033b2:	2103      	movs	r1, #3
 80033b4:	20b6      	movs	r0, #182	; 0xb6
 80033b6:	f7fd ffd9 	bl	800136c <WriteCmdParamN>
           goto common_MC;
 80033ba:	e0a4      	b.n	8003506 <setRotation+0x27e>
       }
       else if (_lcd_ID == 0x1963 || _lcd_ID == 0x9481 || _lcd_ID == 0x1511) {
 80033bc:	4b65      	ldr	r3, [pc, #404]	; (8003554 <setRotation+0x2cc>)
 80033be:	881b      	ldrh	r3, [r3, #0]
 80033c0:	f641 1263 	movw	r2, #6499	; 0x1963
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d00b      	beq.n	80033e0 <setRotation+0x158>
 80033c8:	4b62      	ldr	r3, [pc, #392]	; (8003554 <setRotation+0x2cc>)
 80033ca:	881b      	ldrh	r3, [r3, #0]
 80033cc:	f249 4281 	movw	r2, #38017	; 0x9481
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d005      	beq.n	80033e0 <setRotation+0x158>
 80033d4:	4b5f      	ldr	r3, [pc, #380]	; (8003554 <setRotation+0x2cc>)
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	f241 5211 	movw	r2, #5393	; 0x1511
 80033dc:	4293      	cmp	r3, r2
 80033de:	d139      	bne.n	8003454 <setRotation+0x1cc>
           if (val & 0x80)
 80033e0:	7afb      	ldrb	r3, [r7, #11]
 80033e2:	b25b      	sxtb	r3, r3
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	da04      	bge.n	80033f2 <setRotation+0x16a>
               val |= 0x01;    //GS
 80033e8:	7afb      	ldrb	r3, [r7, #11]
 80033ea:	f043 0301 	orr.w	r3, r3, #1
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	72fb      	strb	r3, [r7, #11]
           if ((val & 0x40))
 80033f2:	7afb      	ldrb	r3, [r7, #11]
 80033f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d004      	beq.n	8003406 <setRotation+0x17e>
               val |= 0x02;    //SS
 80033fc:	7afb      	ldrb	r3, [r7, #11]
 80033fe:	f043 0302 	orr.w	r3, r3, #2
 8003402:	b2db      	uxtb	r3, r3
 8003404:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1963) val &= ~0xC0;
 8003406:	4b53      	ldr	r3, [pc, #332]	; (8003554 <setRotation+0x2cc>)
 8003408:	881b      	ldrh	r3, [r3, #0]
 800340a:	f641 1263 	movw	r2, #6499	; 0x1963
 800340e:	4293      	cmp	r3, r2
 8003410:	d104      	bne.n	800341c <setRotation+0x194>
 8003412:	7afb      	ldrb	r3, [r7, #11]
 8003414:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003418:	b2db      	uxtb	r3, r3
 800341a:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x9481) val &= ~0xD0;
 800341c:	4b4d      	ldr	r3, [pc, #308]	; (8003554 <setRotation+0x2cc>)
 800341e:	881b      	ldrh	r3, [r3, #0]
 8003420:	f249 4281 	movw	r2, #38017	; 0x9481
 8003424:	4293      	cmp	r3, r2
 8003426:	d104      	bne.n	8003432 <setRotation+0x1aa>
 8003428:	7afb      	ldrb	r3, [r7, #11]
 800342a:	f003 032f 	and.w	r3, r3, #47	; 0x2f
 800342e:	b2db      	uxtb	r3, r3
 8003430:	72fb      	strb	r3, [r7, #11]
           if (_lcd_ID == 0x1511) {
 8003432:	4b48      	ldr	r3, [pc, #288]	; (8003554 <setRotation+0x2cc>)
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	f241 5211 	movw	r2, #5393	; 0x1511
 800343a:	4293      	cmp	r3, r2
 800343c:	d160      	bne.n	8003500 <setRotation+0x278>
               val &= ~0x10;   //remove ML
 800343e:	7afb      	ldrb	r3, [r7, #11]
 8003440:	f023 0310 	bic.w	r3, r3, #16
 8003444:	b2db      	uxtb	r3, r3
 8003446:	72fb      	strb	r3, [r7, #11]
               val |= 0xC0;    //force penguin 180 rotation
 8003448:	7afb      	ldrb	r3, [r7, #11]
 800344a:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800344e:	b2db      	uxtb	r3, r3
 8003450:	72fb      	strb	r3, [r7, #11]
           }
//            val &= (_lcd_ID == 0x1963) ? ~0xC0 : ~0xD0; //MY=0, MX=0 with ML=0 for ILI9481
           goto common_MC;
 8003452:	e055      	b.n	8003500 <setRotation+0x278>
      }
       else if (is8347) {
 8003454:	4b40      	ldr	r3, [pc, #256]	; (8003558 <setRotation+0x2d0>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d053      	beq.n	8003504 <setRotation+0x27c>
           _MC = 0x02, _MP = 0x06, _MW = 0x22, _SC = 0x02, _EC = 0x04, _SP = 0x06, _EP = 0x08;
 800345c:	4b3f      	ldr	r3, [pc, #252]	; (800355c <setRotation+0x2d4>)
 800345e:	2202      	movs	r2, #2
 8003460:	801a      	strh	r2, [r3, #0]
 8003462:	4b3f      	ldr	r3, [pc, #252]	; (8003560 <setRotation+0x2d8>)
 8003464:	2206      	movs	r2, #6
 8003466:	801a      	strh	r2, [r3, #0]
 8003468:	4b3e      	ldr	r3, [pc, #248]	; (8003564 <setRotation+0x2dc>)
 800346a:	2222      	movs	r2, #34	; 0x22
 800346c:	801a      	strh	r2, [r3, #0]
 800346e:	4b3e      	ldr	r3, [pc, #248]	; (8003568 <setRotation+0x2e0>)
 8003470:	2202      	movs	r2, #2
 8003472:	801a      	strh	r2, [r3, #0]
 8003474:	4b3d      	ldr	r3, [pc, #244]	; (800356c <setRotation+0x2e4>)
 8003476:	2204      	movs	r2, #4
 8003478:	801a      	strh	r2, [r3, #0]
 800347a:	4b3d      	ldr	r3, [pc, #244]	; (8003570 <setRotation+0x2e8>)
 800347c:	2206      	movs	r2, #6
 800347e:	801a      	strh	r2, [r3, #0]
 8003480:	4b3c      	ldr	r3, [pc, #240]	; (8003574 <setRotation+0x2ec>)
 8003482:	2208      	movs	r2, #8
 8003484:	801a      	strh	r2, [r3, #0]
           if (_lcd_ID == 0x0065) {             //HX8352-B
 8003486:	4b33      	ldr	r3, [pc, #204]	; (8003554 <setRotation+0x2cc>)
 8003488:	881b      	ldrh	r3, [r3, #0]
 800348a:	2b65      	cmp	r3, #101	; 0x65
 800348c:	d121      	bne.n	80034d2 <setRotation+0x24a>
               val |= 0x01;    //GS=1
 800348e:	7afb      	ldrb	r3, [r7, #11]
 8003490:	f043 0301 	orr.w	r3, r3, #1
 8003494:	b2db      	uxtb	r3, r3
 8003496:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD3;  //(ML) flip MY, MX, ML, SS, GS
 8003498:	7afb      	ldrb	r3, [r7, #11]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d005      	beq.n	80034ae <setRotation+0x226>
 80034a2:	7afb      	ldrb	r3, [r7, #11]
 80034a4:	f083 032c 	eor.w	r3, r3, #44	; 0x2c
 80034a8:	43db      	mvns	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	72fb      	strb	r3, [r7, #11]
               if (r & 1) _MC = 0x82, _MP = 0x80;
 80034ae:	79fb      	ldrb	r3, [r7, #7]
 80034b0:	f003 0301 	and.w	r3, r3, #1
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d006      	beq.n	80034c6 <setRotation+0x23e>
 80034b8:	4b28      	ldr	r3, [pc, #160]	; (800355c <setRotation+0x2d4>)
 80034ba:	2282      	movs	r2, #130	; 0x82
 80034bc:	801a      	strh	r2, [r3, #0]
 80034be:	4b28      	ldr	r3, [pc, #160]	; (8003560 <setRotation+0x2d8>)
 80034c0:	2280      	movs	r2, #128	; 0x80
 80034c2:	801a      	strh	r2, [r3, #0]
 80034c4:	e005      	b.n	80034d2 <setRotation+0x24a>
               else _MC = 0x80, _MP = 0x82;
 80034c6:	4b25      	ldr	r3, [pc, #148]	; (800355c <setRotation+0x2d4>)
 80034c8:	2280      	movs	r2, #128	; 0x80
 80034ca:	801a      	strh	r2, [r3, #0]
 80034cc:	4b24      	ldr	r3, [pc, #144]	; (8003560 <setRotation+0x2d8>)
 80034ce:	2282      	movs	r2, #130	; 0x82
 80034d0:	801a      	strh	r2, [r3, #0]
           }
           if (_lcd_ID == 0x5252) {             //HX8352-A
 80034d2:	4b20      	ldr	r3, [pc, #128]	; (8003554 <setRotation+0x2cc>)
 80034d4:	881b      	ldrh	r3, [r3, #0]
 80034d6:	f245 2252 	movw	r2, #21074	; 0x5252
 80034da:	4293      	cmp	r3, r2
 80034dc:	d129      	bne.n	8003532 <setRotation+0x2aa>
               val |= 0x02;   //VERT_SCROLLON
 80034de:	7afb      	ldrb	r3, [r7, #11]
 80034e0:	f043 0302 	orr.w	r3, r3, #2
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	72fb      	strb	r3, [r7, #11]
               if ((val & 0x10)) val ^= 0xD4;  //(ML) flip MY, MX, SS. GS=1
 80034e8:	7afb      	ldrb	r3, [r7, #11]
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d01f      	beq.n	8003532 <setRotation+0x2aa>
 80034f2:	7afb      	ldrb	r3, [r7, #11]
 80034f4:	f083 032b 	eor.w	r3, r3, #43	; 0x2b
 80034f8:	43db      	mvns	r3, r3
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	72fb      	strb	r3, [r7, #11]
           }
			goto common_BGR;
 80034fe:	e018      	b.n	8003532 <setRotation+0x2aa>
           goto common_MC;
 8003500:	bf00      	nop
 8003502:	e000      	b.n	8003506 <setRotation+0x27e>
       }
     common_MC:
 8003504:	bf00      	nop
       _MC = 0x2A, _MP = 0x2B, _MW = 0x2C, _SC = 0x2A, _EC = 0x2A, _SP = 0x2B, _EP = 0x2B;
 8003506:	4b15      	ldr	r3, [pc, #84]	; (800355c <setRotation+0x2d4>)
 8003508:	222a      	movs	r2, #42	; 0x2a
 800350a:	801a      	strh	r2, [r3, #0]
 800350c:	4b14      	ldr	r3, [pc, #80]	; (8003560 <setRotation+0x2d8>)
 800350e:	222b      	movs	r2, #43	; 0x2b
 8003510:	801a      	strh	r2, [r3, #0]
 8003512:	4b14      	ldr	r3, [pc, #80]	; (8003564 <setRotation+0x2dc>)
 8003514:	222c      	movs	r2, #44	; 0x2c
 8003516:	801a      	strh	r2, [r3, #0]
 8003518:	4b13      	ldr	r3, [pc, #76]	; (8003568 <setRotation+0x2e0>)
 800351a:	222a      	movs	r2, #42	; 0x2a
 800351c:	801a      	strh	r2, [r3, #0]
 800351e:	4b13      	ldr	r3, [pc, #76]	; (800356c <setRotation+0x2e4>)
 8003520:	222a      	movs	r2, #42	; 0x2a
 8003522:	801a      	strh	r2, [r3, #0]
 8003524:	4b12      	ldr	r3, [pc, #72]	; (8003570 <setRotation+0x2e8>)
 8003526:	222b      	movs	r2, #43	; 0x2b
 8003528:	801a      	strh	r2, [r3, #0]
 800352a:	4b12      	ldr	r3, [pc, #72]	; (8003574 <setRotation+0x2ec>)
 800352c:	222b      	movs	r2, #43	; 0x2b
 800352e:	801a      	strh	r2, [r3, #0]
 8003530:	e000      	b.n	8003534 <setRotation+0x2ac>
			goto common_BGR;
 8003532:	bf00      	nop
     common_BGR:
       WriteCmdParamN(is8347 ? 0x16 : 0x36, 1, &val);
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <setRotation+0x2d0>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01d      	beq.n	8003578 <setRotation+0x2f0>
 800353c:	2316      	movs	r3, #22
 800353e:	e01c      	b.n	800357a <setRotation+0x2f2>
 8003540:	200000d0 	.word	0x200000d0
 8003544:	20000036 	.word	0x20000036
 8003548:	20000008 	.word	0x20000008
 800354c:	2000000a 	.word	0x2000000a
 8003550:	200000cc 	.word	0x200000cc
 8003554:	200000da 	.word	0x200000da
 8003558:	20000033 	.word	0x20000033
 800355c:	200000d4 	.word	0x200000d4
 8003560:	200000d2 	.word	0x200000d2
 8003564:	200000ca 	.word	0x200000ca
 8003568:	200000d6 	.word	0x200000d6
 800356c:	200000de 	.word	0x200000de
 8003570:	200000ce 	.word	0x200000ce
 8003574:	200000d8 	.word	0x200000d8
 8003578:	2336      	movs	r3, #54	; 0x36
 800357a:	f107 020b 	add.w	r2, r7, #11
 800357e:	2101      	movs	r1, #1
 8003580:	4618      	mov	r0, r3
 8003582:	f7fd fef3 	bl	800136c <WriteCmdParamN>
       _lcd_madctl = val;
 8003586:	7afb      	ldrb	r3, [r7, #11]
 8003588:	b29a      	uxth	r2, r3
 800358a:	4b77      	ldr	r3, [pc, #476]	; (8003768 <setRotation+0x4e0>)
 800358c:	801a      	strh	r2, [r3, #0]
 800358e:	e0a5      	b.n	80036dc <setRotation+0x454>
//	    if (_lcd_ID	== 0x1963) WriteCmdParamN(0x13, 0, NULL);   //NORMAL mode
   }
   // cope with 9320 variants
   else {
       switch (_lcd_ID) {
 8003590:	4b76      	ldr	r3, [pc, #472]	; (800376c <setRotation+0x4e4>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003598:	4293      	cmp	r3, r2
 800359a:	d013      	beq.n	80035c4 <setRotation+0x33c>
 800359c:	f24b 5209 	movw	r2, #46345	; 0xb509
 80035a0:	4293      	cmp	r3, r2
 80035a2:	dc4f      	bgt.n	8003644 <setRotation+0x3bc>
 80035a4:	f249 3226 	movw	r2, #37670	; 0x9326
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d00b      	beq.n	80035c4 <setRotation+0x33c>
 80035ac:	f249 3226 	movw	r2, #37670	; 0x9326
 80035b0:	4293      	cmp	r3, r2
 80035b2:	dc47      	bgt.n	8003644 <setRotation+0x3bc>
 80035b4:	f245 4220 	movw	r2, #21536	; 0x5420
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d003      	beq.n	80035c4 <setRotation+0x33c>
 80035bc:	f247 7293 	movw	r2, #30611	; 0x7793
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d13f      	bne.n	8003644 <setRotation+0x3bc>
#endif
       case 0x5420:
       case 0x7793:
       case 0x9326:
		case 0xB509:
           _MC = 0x200, _MP = 0x201, _MW = 0x202, _SC = 0x210, _EC = 0x211, _SP = 0x212, _EP = 0x213;
 80035c4:	4b6a      	ldr	r3, [pc, #424]	; (8003770 <setRotation+0x4e8>)
 80035c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035ca:	801a      	strh	r2, [r3, #0]
 80035cc:	4b69      	ldr	r3, [pc, #420]	; (8003774 <setRotation+0x4ec>)
 80035ce:	f240 2201 	movw	r2, #513	; 0x201
 80035d2:	801a      	strh	r2, [r3, #0]
 80035d4:	4b68      	ldr	r3, [pc, #416]	; (8003778 <setRotation+0x4f0>)
 80035d6:	f240 2202 	movw	r2, #514	; 0x202
 80035da:	801a      	strh	r2, [r3, #0]
 80035dc:	4b67      	ldr	r3, [pc, #412]	; (800377c <setRotation+0x4f4>)
 80035de:	f44f 7204 	mov.w	r2, #528	; 0x210
 80035e2:	801a      	strh	r2, [r3, #0]
 80035e4:	4b66      	ldr	r3, [pc, #408]	; (8003780 <setRotation+0x4f8>)
 80035e6:	f240 2211 	movw	r2, #529	; 0x211
 80035ea:	801a      	strh	r2, [r3, #0]
 80035ec:	4b65      	ldr	r3, [pc, #404]	; (8003784 <setRotation+0x4fc>)
 80035ee:	f240 2212 	movw	r2, #530	; 0x212
 80035f2:	801a      	strh	r2, [r3, #0]
 80035f4:	4b64      	ldr	r3, [pc, #400]	; (8003788 <setRotation+0x500>)
 80035f6:	f240 2213 	movw	r2, #531	; 0x213
 80035fa:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 80035fc:	7afb      	ldrb	r3, [r7, #11]
 80035fe:	b25b      	sxtb	r3, r3
 8003600:	b29b      	uxth	r3, r3
 8003602:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003606:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800360a:	823b      	strh	r3, [r7, #16]
			uint16_t NL;
			NL = ((432 / 8) - 1) << 9;
 800360c:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8003610:	82bb      	strh	r3, [r7, #20]
           if (_lcd_ID == 0x9326 || _lcd_ID == 0x5420) NL >>= 1;
 8003612:	4b56      	ldr	r3, [pc, #344]	; (800376c <setRotation+0x4e4>)
 8003614:	881b      	ldrh	r3, [r3, #0]
 8003616:	f249 3226 	movw	r2, #37670	; 0x9326
 800361a:	4293      	cmp	r3, r2
 800361c:	d005      	beq.n	800362a <setRotation+0x3a2>
 800361e:	4b53      	ldr	r3, [pc, #332]	; (800376c <setRotation+0x4e4>)
 8003620:	881b      	ldrh	r3, [r3, #0]
 8003622:	f245 4220 	movw	r2, #21536	; 0x5420
 8003626:	4293      	cmp	r3, r2
 8003628:	d102      	bne.n	8003630 <setRotation+0x3a8>
 800362a:	8abb      	ldrh	r3, [r7, #20]
 800362c:	085b      	lsrs	r3, r3, #1
 800362e:	82bb      	strh	r3, [r7, #20]
           WriteCmdData(0x400, GS | NL);
 8003630:	8a3a      	ldrh	r2, [r7, #16]
 8003632:	8abb      	ldrh	r3, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	b29b      	uxth	r3, r3
 8003638:	4619      	mov	r1, r3
 800363a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800363e:	f7fd fbbe 	bl	8000dbe <WriteCmdData>
           goto common_SS;
 8003642:	e024      	b.n	800368e <setRotation+0x406>
       default:
           _MC = 0x20, _MP = 0x21, _MW = 0x22, _SC = 0x50, _EC = 0x51, _SP = 0x52, _EP = 0x53;
 8003644:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <setRotation+0x4e8>)
 8003646:	2220      	movs	r2, #32
 8003648:	801a      	strh	r2, [r3, #0]
 800364a:	4b4a      	ldr	r3, [pc, #296]	; (8003774 <setRotation+0x4ec>)
 800364c:	2221      	movs	r2, #33	; 0x21
 800364e:	801a      	strh	r2, [r3, #0]
 8003650:	4b49      	ldr	r3, [pc, #292]	; (8003778 <setRotation+0x4f0>)
 8003652:	2222      	movs	r2, #34	; 0x22
 8003654:	801a      	strh	r2, [r3, #0]
 8003656:	4b49      	ldr	r3, [pc, #292]	; (800377c <setRotation+0x4f4>)
 8003658:	2250      	movs	r2, #80	; 0x50
 800365a:	801a      	strh	r2, [r3, #0]
 800365c:	4b48      	ldr	r3, [pc, #288]	; (8003780 <setRotation+0x4f8>)
 800365e:	2251      	movs	r2, #81	; 0x51
 8003660:	801a      	strh	r2, [r3, #0]
 8003662:	4b48      	ldr	r3, [pc, #288]	; (8003784 <setRotation+0x4fc>)
 8003664:	2252      	movs	r2, #82	; 0x52
 8003666:	801a      	strh	r2, [r3, #0]
 8003668:	4b47      	ldr	r3, [pc, #284]	; (8003788 <setRotation+0x500>)
 800366a:	2253      	movs	r2, #83	; 0x53
 800366c:	801a      	strh	r2, [r3, #0]
           GS = (val & 0x80) ? (1 << 15) : 0;
 800366e:	7afb      	ldrb	r3, [r7, #11]
 8003670:	b25b      	sxtb	r3, r3
 8003672:	b29b      	uxth	r3, r3
 8003674:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003678:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800367c:	823b      	strh	r3, [r7, #16]
           WriteCmdData(0x60, GS | 0x2700);    // Gate Scan Line (0xA700)
 800367e:	8a3b      	ldrh	r3, [r7, #16]
 8003680:	f443 531c 	orr.w	r3, r3, #9984	; 0x2700
 8003684:	b29b      	uxth	r3, r3
 8003686:	4619      	mov	r1, r3
 8003688:	2060      	movs	r0, #96	; 0x60
 800368a:	f7fd fb98 	bl	8000dbe <WriteCmdData>
         common_SS:
           SS_v = (val & 0x40) ? (1 << 8) : 0;
 800368e:	7afb      	ldrb	r3, [r7, #11]
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	b29b      	uxth	r3, r3
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	81fb      	strh	r3, [r7, #14]
           WriteCmdData(0x01, SS_v);     // set Driver Output Control
 800369a:	89fb      	ldrh	r3, [r7, #14]
 800369c:	4619      	mov	r1, r3
 800369e:	2001      	movs	r0, #1
 80036a0:	f7fd fb8d 	bl	8000dbe <WriteCmdData>
         common_ORG:
           ORG = (val & 0x20) ? (1 << 3) : 0;
 80036a4:	7afb      	ldrb	r3, [r7, #11]
 80036a6:	109b      	asrs	r3, r3, #2
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	82fb      	strh	r3, [r7, #22]
               if (rotation == 1 || rotation == 2) {
                   val ^= 0x08;        // change BGR bit for LANDSCAPE and PORTRAIT_REV
               }
           }
#endif
           if (val & 0x08)
 80036b0:	7afb      	ldrb	r3, [r7, #11]
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <setRotation+0x43a>
               ORG |= 0x1000;  //BGR
 80036ba:	8afb      	ldrh	r3, [r7, #22]
 80036bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80036c0:	82fb      	strh	r3, [r7, #22]
           _lcd_madctl = ORG | 0x0030;
 80036c2:	8afb      	ldrh	r3, [r7, #22]
 80036c4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 80036c8:	b29a      	uxth	r2, r3
 80036ca:	4b27      	ldr	r3, [pc, #156]	; (8003768 <setRotation+0x4e0>)
 80036cc:	801a      	strh	r2, [r3, #0]
           WriteCmdData(0x03, _lcd_madctl);    // set GRAM write direction and BGR=1.
 80036ce:	4b26      	ldr	r3, [pc, #152]	; (8003768 <setRotation+0x4e0>)
 80036d0:	881b      	ldrh	r3, [r3, #0]
 80036d2:	4619      	mov	r1, r3
 80036d4:	2003      	movs	r0, #3
 80036d6:	f7fd fb72 	bl	8000dbe <WriteCmdData>
           break;
 80036da:	bf00      	nop
           WriteCmdData(0x11, ORG | 0x6070);   // DFM=3, EN=0, TY=1
           break;
#endif
		}
   }
   if ((rotation & 1) && ((_lcd_capable & MV_AXIS) == 0)) {
 80036dc:	4b2b      	ldr	r3, [pc, #172]	; (800378c <setRotation+0x504>)
 80036de:	781b      	ldrb	r3, [r3, #0]
 80036e0:	f003 0301 	and.w	r3, r3, #1
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d023      	beq.n	8003730 <setRotation+0x4a8>
 80036e8:	4b29      	ldr	r3, [pc, #164]	; (8003790 <setRotation+0x508>)
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d11d      	bne.n	8003730 <setRotation+0x4a8>
       uint16_t x;
       x = _MC, _MC = _MP, _MP = x;
 80036f4:	4b1e      	ldr	r3, [pc, #120]	; (8003770 <setRotation+0x4e8>)
 80036f6:	881b      	ldrh	r3, [r3, #0]
 80036f8:	81bb      	strh	r3, [r7, #12]
 80036fa:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <setRotation+0x4ec>)
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	4b1c      	ldr	r3, [pc, #112]	; (8003770 <setRotation+0x4e8>)
 8003700:	801a      	strh	r2, [r3, #0]
 8003702:	4a1c      	ldr	r2, [pc, #112]	; (8003774 <setRotation+0x4ec>)
 8003704:	89bb      	ldrh	r3, [r7, #12]
 8003706:	8013      	strh	r3, [r2, #0]
       x = _SC, _SC = _SP, _SP = x;    //.kbv check 0139
 8003708:	4b1c      	ldr	r3, [pc, #112]	; (800377c <setRotation+0x4f4>)
 800370a:	881b      	ldrh	r3, [r3, #0]
 800370c:	81bb      	strh	r3, [r7, #12]
 800370e:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <setRotation+0x4fc>)
 8003710:	881a      	ldrh	r2, [r3, #0]
 8003712:	4b1a      	ldr	r3, [pc, #104]	; (800377c <setRotation+0x4f4>)
 8003714:	801a      	strh	r2, [r3, #0]
 8003716:	4a1b      	ldr	r2, [pc, #108]	; (8003784 <setRotation+0x4fc>)
 8003718:	89bb      	ldrh	r3, [r7, #12]
 800371a:	8013      	strh	r3, [r2, #0]
       x = _EC, _EC = _EP, _EP = x;    //.kbv check 0139
 800371c:	4b18      	ldr	r3, [pc, #96]	; (8003780 <setRotation+0x4f8>)
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	81bb      	strh	r3, [r7, #12]
 8003722:	4b19      	ldr	r3, [pc, #100]	; (8003788 <setRotation+0x500>)
 8003724:	881a      	ldrh	r2, [r3, #0]
 8003726:	4b16      	ldr	r3, [pc, #88]	; (8003780 <setRotation+0x4f8>)
 8003728:	801a      	strh	r2, [r3, #0]
 800372a:	4a17      	ldr	r2, [pc, #92]	; (8003788 <setRotation+0x500>)
 800372c:	89bb      	ldrh	r3, [r7, #12]
 800372e:	8013      	strh	r3, [r2, #0]
   }
   setAddrWindow(0, 0, width() - 1, height() - 1);
 8003730:	f7fd fa7e 	bl	8000c30 <width>
 8003734:	4603      	mov	r3, r0
 8003736:	3b01      	subs	r3, #1
 8003738:	b29b      	uxth	r3, r3
 800373a:	b21c      	sxth	r4, r3
 800373c:	f7fd fa84 	bl	8000c48 <height>
 8003740:	4603      	mov	r3, r0
 8003742:	3b01      	subs	r3, #1
 8003744:	b29b      	uxth	r3, r3
 8003746:	b21b      	sxth	r3, r3
 8003748:	4622      	mov	r2, r4
 800374a:	2100      	movs	r1, #0
 800374c:	2000      	movs	r0, #0
 800374e:	f000 f927 	bl	80039a0 <setAddrWindow>
   vertScroll(0, HEIGHT, 0);   //reset scrolling after a rotation
 8003752:	2200      	movs	r2, #0
 8003754:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003758:	2000      	movs	r0, #0
 800375a:	f000 fa45 	bl	8003be8 <vertScroll>
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd90      	pop	{r4, r7, pc}
 8003766:	bf00      	nop
 8003768:	200000e0 	.word	0x200000e0
 800376c:	200000da 	.word	0x200000da
 8003770:	200000d4 	.word	0x200000d4
 8003774:	200000d2 	.word	0x200000d2
 8003778:	200000ca 	.word	0x200000ca
 800377c:	200000d6 	.word	0x200000d6
 8003780:	200000de 	.word	0x200000de
 8003784:	200000ce 	.word	0x200000ce
 8003788:	200000d8 	.word	0x200000d8
 800378c:	20000036 	.word	0x20000036
 8003790:	200000cc 	.word	0x200000cc

08003794 <drawPixel>:


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	4603      	mov	r3, r0
 800379c:	80fb      	strh	r3, [r7, #6]
 800379e:	460b      	mov	r3, r1
 80037a0:	80bb      	strh	r3, [r7, #4]
 80037a2:	4613      	mov	r3, r2
 80037a4:	807b      	strh	r3, [r7, #2]
   // MCUFRIEND just plots at edge if you try to write outside of the box:
   if (x < 0 || y < 0 || x >= width() || y >= height())
 80037a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f2c0 80e7 	blt.w	800397e <drawPixel+0x1ea>
 80037b0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f2c0 80e2 	blt.w	800397e <drawPixel+0x1ea>
 80037ba:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 80037be:	f7fd fa37 	bl	8000c30 <width>
 80037c2:	4603      	mov	r3, r0
 80037c4:	429c      	cmp	r4, r3
 80037c6:	f280 80da 	bge.w	800397e <drawPixel+0x1ea>
 80037ca:	f9b7 4004 	ldrsh.w	r4, [r7, #4]
 80037ce:	f7fd fa3b 	bl	8000c48 <height>
 80037d2:	4603      	mov	r3, r0
 80037d4:	429c      	cmp	r4, r3
 80037d6:	f280 80d2 	bge.w	800397e <drawPixel+0x1ea>
       return;
#if defined(SUPPORT_9488_555)
   if (is555) color = color565_to_555(color);
 80037da:	4b6b      	ldr	r3, [pc, #428]	; (8003988 <drawPixel+0x1f4>)
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <drawPixel+0x5a>
 80037e2:	887b      	ldrh	r3, [r7, #2]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7fd fa3b 	bl	8000c60 <color565_to_555>
 80037ea:	4603      	mov	r3, r0
 80037ec:	807b      	strh	r3, [r7, #2]
#endif
   setAddrWindow(x, y, x, y);
 80037ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80037f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80037f6:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80037fa:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80037fe:	f000 f8cf 	bl	80039a0 <setAddrWindow>
//    CS_ACTIVE; WriteCmd(_MW); write16(color); CS_IDLE; //-0.01s +98B
   if (is9797) { CS_ACTIVE; WriteCmd(_MW); write24(color); CS_IDLE;} else
 8003802:	4b62      	ldr	r3, [pc, #392]	; (800398c <drawPixel+0x1f8>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	f000 80b1 	beq.w	800396e <drawPixel+0x1da>
 800380c:	2101      	movs	r1, #1
 800380e:	4860      	ldr	r0, [pc, #384]	; (8003990 <drawPixel+0x1fc>)
 8003810:	f7fd f9c0 	bl	8000b94 <PIN_LOW>
 8003814:	2110      	movs	r1, #16
 8003816:	485f      	ldr	r0, [pc, #380]	; (8003994 <drawPixel+0x200>)
 8003818:	f7fd f9bc 	bl	8000b94 <PIN_LOW>
 800381c:	4b5e      	ldr	r3, [pc, #376]	; (8003998 <drawPixel+0x204>)
 800381e:	881b      	ldrh	r3, [r3, #0]
 8003820:	0a1b      	lsrs	r3, r3, #8
 8003822:	b29b      	uxth	r3, r3
 8003824:	73fb      	strb	r3, [r7, #15]
 8003826:	4b5c      	ldr	r3, [pc, #368]	; (8003998 <drawPixel+0x204>)
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	73bb      	strb	r3, [r7, #14]
 800382c:	4b59      	ldr	r3, [pc, #356]	; (8003994 <drawPixel+0x200>)
 800382e:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8003832:	619a      	str	r2, [r3, #24]
 8003834:	4b56      	ldr	r3, [pc, #344]	; (8003990 <drawPixel+0x1fc>)
 8003836:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800383a:	619a      	str	r2, [r3, #24]
 800383c:	4b57      	ldr	r3, [pc, #348]	; (800399c <drawPixel+0x208>)
 800383e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003842:	619a      	str	r2, [r3, #24]
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	005b      	lsls	r3, r3, #1
 8003848:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003854:	431a      	orrs	r2, r3
 8003856:	7bfb      	ldrb	r3, [r7, #15]
 8003858:	025b      	lsls	r3, r3, #9
 800385a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800385e:	431a      	orrs	r2, r3
 8003860:	4b4c      	ldr	r3, [pc, #304]	; (8003994 <drawPixel+0x200>)
 8003862:	619a      	str	r2, [r3, #24]
 8003864:	7bfb      	ldrb	r3, [r7, #15]
 8003866:	011b      	lsls	r3, r3, #4
 8003868:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	105b      	asrs	r3, r3, #1
 8003870:	f003 0310 	and.w	r3, r3, #16
 8003874:	431a      	orrs	r2, r3
 8003876:	7bfb      	ldrb	r3, [r7, #15]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	431a      	orrs	r2, r3
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	431a      	orrs	r2, r3
 8003888:	4b41      	ldr	r3, [pc, #260]	; (8003990 <drawPixel+0x1fc>)
 800388a:	619a      	str	r2, [r3, #24]
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	019b      	lsls	r3, r3, #6
 8003890:	4a42      	ldr	r2, [pc, #264]	; (800399c <drawPixel+0x208>)
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	6193      	str	r3, [r2, #24]
 8003898:	2102      	movs	r1, #2
 800389a:	483e      	ldr	r0, [pc, #248]	; (8003994 <drawPixel+0x200>)
 800389c:	f7fd f97a 	bl	8000b94 <PIN_LOW>
 80038a0:	2102      	movs	r1, #2
 80038a2:	483c      	ldr	r0, [pc, #240]	; (8003994 <drawPixel+0x200>)
 80038a4:	f7fd f976 	bl	8000b94 <PIN_LOW>
 80038a8:	2102      	movs	r1, #2
 80038aa:	483a      	ldr	r0, [pc, #232]	; (8003994 <drawPixel+0x200>)
 80038ac:	f7fd f972 	bl	8000b94 <PIN_LOW>
 80038b0:	2102      	movs	r1, #2
 80038b2:	4838      	ldr	r0, [pc, #224]	; (8003994 <drawPixel+0x200>)
 80038b4:	f7fd f97e 	bl	8000bb4 <PIN_HIGH>
 80038b8:	2102      	movs	r1, #2
 80038ba:	4836      	ldr	r0, [pc, #216]	; (8003994 <drawPixel+0x200>)
 80038bc:	f7fd f97a 	bl	8000bb4 <PIN_HIGH>
 80038c0:	4b34      	ldr	r3, [pc, #208]	; (8003994 <drawPixel+0x200>)
 80038c2:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80038c6:	619a      	str	r2, [r3, #24]
 80038c8:	4b31      	ldr	r3, [pc, #196]	; (8003990 <drawPixel+0x1fc>)
 80038ca:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80038ce:	619a      	str	r2, [r3, #24]
 80038d0:	4b32      	ldr	r3, [pc, #200]	; (800399c <drawPixel+0x208>)
 80038d2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80038d6:	619a      	str	r2, [r3, #24]
 80038d8:	7bbb      	ldrb	r3, [r7, #14]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80038e0:	7bbb      	ldrb	r3, [r7, #14]
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038e8:	431a      	orrs	r2, r3
 80038ea:	7bbb      	ldrb	r3, [r7, #14]
 80038ec:	025b      	lsls	r3, r3, #9
 80038ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038f2:	431a      	orrs	r2, r3
 80038f4:	4b27      	ldr	r3, [pc, #156]	; (8003994 <drawPixel+0x200>)
 80038f6:	619a      	str	r2, [r3, #24]
 80038f8:	7bbb      	ldrb	r3, [r7, #14]
 80038fa:	011b      	lsls	r3, r3, #4
 80038fc:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8003900:	7bbb      	ldrb	r3, [r7, #14]
 8003902:	105b      	asrs	r3, r3, #1
 8003904:	f003 0310 	and.w	r3, r3, #16
 8003908:	431a      	orrs	r2, r3
 800390a:	7bbb      	ldrb	r3, [r7, #14]
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	f003 0320 	and.w	r3, r3, #32
 8003912:	431a      	orrs	r2, r3
 8003914:	7bbb      	ldrb	r3, [r7, #14]
 8003916:	f003 0308 	and.w	r3, r3, #8
 800391a:	431a      	orrs	r2, r3
 800391c:	4b1c      	ldr	r3, [pc, #112]	; (8003990 <drawPixel+0x1fc>)
 800391e:	619a      	str	r2, [r3, #24]
 8003920:	7bbb      	ldrb	r3, [r7, #14]
 8003922:	019b      	lsls	r3, r3, #6
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <drawPixel+0x208>)
 8003926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392a:	6193      	str	r3, [r2, #24]
 800392c:	2102      	movs	r1, #2
 800392e:	4819      	ldr	r0, [pc, #100]	; (8003994 <drawPixel+0x200>)
 8003930:	f7fd f930 	bl	8000b94 <PIN_LOW>
 8003934:	2102      	movs	r1, #2
 8003936:	4817      	ldr	r0, [pc, #92]	; (8003994 <drawPixel+0x200>)
 8003938:	f7fd f92c 	bl	8000b94 <PIN_LOW>
 800393c:	2102      	movs	r1, #2
 800393e:	4815      	ldr	r0, [pc, #84]	; (8003994 <drawPixel+0x200>)
 8003940:	f7fd f928 	bl	8000b94 <PIN_LOW>
 8003944:	2102      	movs	r1, #2
 8003946:	4813      	ldr	r0, [pc, #76]	; (8003994 <drawPixel+0x200>)
 8003948:	f7fd f934 	bl	8000bb4 <PIN_HIGH>
 800394c:	2102      	movs	r1, #2
 800394e:	4811      	ldr	r0, [pc, #68]	; (8003994 <drawPixel+0x200>)
 8003950:	f7fd f930 	bl	8000bb4 <PIN_HIGH>
 8003954:	2110      	movs	r1, #16
 8003956:	480f      	ldr	r0, [pc, #60]	; (8003994 <drawPixel+0x200>)
 8003958:	f7fd f92c 	bl	8000bb4 <PIN_HIGH>
 800395c:	887b      	ldrh	r3, [r7, #2]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fd faae 	bl	8000ec0 <write24>
 8003964:	2101      	movs	r1, #1
 8003966:	480a      	ldr	r0, [pc, #40]	; (8003990 <drawPixel+0x1fc>)
 8003968:	f7fd f924 	bl	8000bb4 <PIN_HIGH>
 800396c:	e008      	b.n	8003980 <drawPixel+0x1ec>
   WriteCmdData(_MW, color);
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <drawPixel+0x204>)
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	887a      	ldrh	r2, [r7, #2]
 8003974:	4611      	mov	r1, r2
 8003976:	4618      	mov	r0, r3
 8003978:	f7fd fa21 	bl	8000dbe <WriteCmdData>
 800397c:	e000      	b.n	8003980 <drawPixel+0x1ec>
       return;
 800397e:	bf00      	nop
}
 8003980:	3714      	adds	r7, #20
 8003982:	46bd      	mov	sp, r7
 8003984:	bd90      	pop	{r4, r7, pc}
 8003986:	bf00      	nop
 8003988:	20000034 	.word	0x20000034
 800398c:	20000035 	.word	0x20000035
 8003990:	40020400 	.word	0x40020400
 8003994:	40020000 	.word	0x40020000
 8003998:	200000ca 	.word	0x200000ca
 800399c:	40020800 	.word	0x40020800

080039a0 <setAddrWindow>:


void setAddrWindow(int16_t x, int16_t y, int16_t x1, int16_t y1)
{
 80039a0:	b590      	push	{r4, r7, lr}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af02      	add	r7, sp, #8
 80039a6:	4604      	mov	r4, r0
 80039a8:	4608      	mov	r0, r1
 80039aa:	4611      	mov	r1, r2
 80039ac:	461a      	mov	r2, r3
 80039ae:	4623      	mov	r3, r4
 80039b0:	80fb      	strh	r3, [r7, #6]
 80039b2:	4603      	mov	r3, r0
 80039b4:	80bb      	strh	r3, [r7, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	807b      	strh	r3, [r7, #2]
 80039ba:	4613      	mov	r3, r2
 80039bc:	803b      	strh	r3, [r7, #0]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 80039be:	4b80      	ldr	r3, [pc, #512]	; (8003bc0 <setAddrWindow+0x220>)
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	f249 3227 	movw	r2, #37671	; 0x9327
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d117      	bne.n	80039fa <setAddrWindow+0x5a>
	    if (rotation == 2) y += OFFSET_9327, y1 += OFFSET_9327;
 80039ca:	4b7e      	ldr	r3, [pc, #504]	; (8003bc4 <setAddrWindow+0x224>)
 80039cc:	781b      	ldrb	r3, [r3, #0]
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d107      	bne.n	80039e2 <setAddrWindow+0x42>
 80039d2:	88bb      	ldrh	r3, [r7, #4]
 80039d4:	3320      	adds	r3, #32
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	80bb      	strh	r3, [r7, #4]
 80039da:	883b      	ldrh	r3, [r7, #0]
 80039dc:	3320      	adds	r3, #32
 80039de:	b29b      	uxth	r3, r3
 80039e0:	803b      	strh	r3, [r7, #0]
	    if (rotation == 3) x += OFFSET_9327, x1 += OFFSET_9327;
 80039e2:	4b78      	ldr	r3, [pc, #480]	; (8003bc4 <setAddrWindow+0x224>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b03      	cmp	r3, #3
 80039e8:	d107      	bne.n	80039fa <setAddrWindow+0x5a>
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	3320      	adds	r3, #32
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	80fb      	strh	r3, [r7, #6]
 80039f2:	887b      	ldrh	r3, [r7, #2]
 80039f4:	3320      	adds	r3, #32
 80039f6:	b29b      	uxth	r3, r3
 80039f8:	807b      	strh	r3, [r7, #2]
   }
#endif
#if 1
   if (_lcd_ID == 0x1526 && (rotation & 1)) {
 80039fa:	4b71      	ldr	r3, [pc, #452]	; (8003bc0 <setAddrWindow+0x220>)
 80039fc:	881b      	ldrh	r3, [r3, #0]
 80039fe:	f241 5226 	movw	r2, #5414	; 0x1526
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d128      	bne.n	8003a58 <setAddrWindow+0xb8>
 8003a06:	4b6f      	ldr	r3, [pc, #444]	; (8003bc4 <setAddrWindow+0x224>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d022      	beq.n	8003a58 <setAddrWindow+0xb8>
		int16_t dx = x1 - x, dy = y1 - y;
 8003a12:	887a      	ldrh	r2, [r7, #2]
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	81fb      	strh	r3, [r7, #14]
 8003a1c:	883a      	ldrh	r2, [r7, #0]
 8003a1e:	88bb      	ldrh	r3, [r7, #4]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	81bb      	strh	r3, [r7, #12]
		if (dy == 0) { y1++; }
 8003a26:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <setAddrWindow+0x9c>
 8003a2e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	3301      	adds	r3, #1
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	803b      	strh	r3, [r7, #0]
 8003a3a:	e00d      	b.n	8003a58 <setAddrWindow+0xb8>
		else if (dx == 0) { x1 += dy; y1 -= dy; }
 8003a3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d109      	bne.n	8003a58 <setAddrWindow+0xb8>
 8003a44:	887a      	ldrh	r2, [r7, #2]
 8003a46:	89bb      	ldrh	r3, [r7, #12]
 8003a48:	4413      	add	r3, r2
 8003a4a:	b29b      	uxth	r3, r3
 8003a4c:	807b      	strh	r3, [r7, #2]
 8003a4e:	883a      	ldrh	r2, [r7, #0]
 8003a50:	89bb      	ldrh	r3, [r7, #12]
 8003a52:	1ad3      	subs	r3, r2, r3
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	803b      	strh	r3, [r7, #0]
   }
#endif
   if (_lcd_capable & MIPI_DCS_REV1) {
 8003a58:	4b5b      	ldr	r3, [pc, #364]	; (8003bc8 <setAddrWindow+0x228>)
 8003a5a:	881b      	ldrh	r3, [r3, #0]
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d054      	beq.n	8003b0e <setAddrWindow+0x16e>
       WriteCmdParam4(_SC, x >> 8, x, x1 >> 8, x1);   //Start column instead of _MC
 8003a64:	4b59      	ldr	r3, [pc, #356]	; (8003bcc <setAddrWindow+0x22c>)
 8003a66:	881b      	ldrh	r3, [r3, #0]
 8003a68:	b2d8      	uxtb	r0, r3
 8003a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a6e:	121b      	asrs	r3, r3, #8
 8003a70:	b21b      	sxth	r3, r3
 8003a72:	b2d9      	uxtb	r1, r3
 8003a74:	88fb      	ldrh	r3, [r7, #6]
 8003a76:	b2da      	uxtb	r2, r3
 8003a78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a7c:	121b      	asrs	r3, r3, #8
 8003a7e:	b21b      	sxth	r3, r3
 8003a80:	b2dc      	uxtb	r4, r3
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	9300      	str	r3, [sp, #0]
 8003a88:	4623      	mov	r3, r4
 8003a8a:	f7fd fe3d 	bl	8001708 <WriteCmdParam4>
       WriteCmdParam4(_SP, y >> 8, y, y1 >> 8, y1);   //
 8003a8e:	4b50      	ldr	r3, [pc, #320]	; (8003bd0 <setAddrWindow+0x230>)
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	b2d8      	uxtb	r0, r3
 8003a94:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003a98:	121b      	asrs	r3, r3, #8
 8003a9a:	b21b      	sxth	r3, r3
 8003a9c:	b2d9      	uxtb	r1, r3
 8003a9e:	88bb      	ldrh	r3, [r7, #4]
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003aa6:	121b      	asrs	r3, r3, #8
 8003aa8:	b21b      	sxth	r3, r3
 8003aaa:	b2dc      	uxtb	r4, r3
 8003aac:	883b      	ldrh	r3, [r7, #0]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	4623      	mov	r3, r4
 8003ab4:	f7fd fe28 	bl	8001708 <WriteCmdParam4>
       if (is8347 && _lcd_ID == 0x0065) {             //HX8352-B has separate _MC, _SC
 8003ab8:	4b46      	ldr	r3, [pc, #280]	; (8003bd4 <setAddrWindow+0x234>)
 8003aba:	781b      	ldrb	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d07b      	beq.n	8003bb8 <setAddrWindow+0x218>
 8003ac0:	4b3f      	ldr	r3, [pc, #252]	; (8003bc0 <setAddrWindow+0x220>)
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	2b65      	cmp	r3, #101	; 0x65
 8003ac6:	d177      	bne.n	8003bb8 <setAddrWindow+0x218>
           uint8_t d[2];
           d[0] = x >> 8; d[1] = x;
 8003ac8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003acc:	121b      	asrs	r3, r3, #8
 8003ace:	b21b      	sxth	r3, r3
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	723b      	strb	r3, [r7, #8]
 8003ad4:	88fb      	ldrh	r3, [r7, #6]
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MC, 2, d);                 //allows !MV_AXIS to work
 8003ada:	4b3f      	ldr	r3, [pc, #252]	; (8003bd8 <setAddrWindow+0x238>)
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	f107 0208 	add.w	r2, r7, #8
 8003ae2:	2102      	movs	r1, #2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7fd fc41 	bl	800136c <WriteCmdParamN>
           d[0] = y >> 8; d[1] = y;
 8003aea:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003aee:	121b      	asrs	r3, r3, #8
 8003af0:	b21b      	sxth	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	723b      	strb	r3, [r7, #8]
 8003af6:	88bb      	ldrh	r3, [r7, #4]
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	727b      	strb	r3, [r7, #9]
           WriteCmdParamN(_MP, 2, d);
 8003afc:	4b37      	ldr	r3, [pc, #220]	; (8003bdc <setAddrWindow+0x23c>)
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	f107 0208 	add.w	r2, r7, #8
 8003b04:	2102      	movs	r1, #2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f7fd fc30 	bl	800136c <WriteCmdParamN>
           WriteCmdData(_SP, y);
           WriteCmdData(_EC, x1);
           WriteCmdData(_EP, y1);
       }
   }
}
 8003b0c:	e054      	b.n	8003bb8 <setAddrWindow+0x218>
       WriteCmdData(_MC, x);
 8003b0e:	4b32      	ldr	r3, [pc, #200]	; (8003bd8 <setAddrWindow+0x238>)
 8003b10:	881b      	ldrh	r3, [r3, #0]
 8003b12:	88fa      	ldrh	r2, [r7, #6]
 8003b14:	4611      	mov	r1, r2
 8003b16:	4618      	mov	r0, r3
 8003b18:	f7fd f951 	bl	8000dbe <WriteCmdData>
       WriteCmdData(_MP, y);
 8003b1c:	4b2f      	ldr	r3, [pc, #188]	; (8003bdc <setAddrWindow+0x23c>)
 8003b1e:	881b      	ldrh	r3, [r3, #0]
 8003b20:	88ba      	ldrh	r2, [r7, #4]
 8003b22:	4611      	mov	r1, r2
 8003b24:	4618      	mov	r0, r3
 8003b26:	f7fd f94a 	bl	8000dbe <WriteCmdData>
       if (!(x == x1 && y == y1)) {  //only need MC,MP for drawPixel
 8003b2a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003b2e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d105      	bne.n	8003b42 <setAddrWindow+0x1a2>
 8003b36:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003b3a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d03a      	beq.n	8003bb8 <setAddrWindow+0x218>
           if (_lcd_capable & XSA_XEA_16BIT) {
 8003b42:	4b21      	ldr	r3, [pc, #132]	; (8003bc8 <setAddrWindow+0x228>)
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d018      	beq.n	8003b80 <setAddrWindow+0x1e0>
               if (rotation & 1)
 8003b4e:	4b1d      	ldr	r3, [pc, #116]	; (8003bc4 <setAddrWindow+0x224>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <setAddrWindow+0x1ce>
                   y1 = y = (y1 << 8) | y;
 8003b5a:	f9b7 3000 	ldrsh.w	r3, [r7]
 8003b5e:	021b      	lsls	r3, r3, #8
 8003b60:	b21a      	sxth	r2, r3
 8003b62:	88bb      	ldrh	r3, [r7, #4]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	80bb      	strh	r3, [r7, #4]
 8003b68:	88bb      	ldrh	r3, [r7, #4]
 8003b6a:	803b      	strh	r3, [r7, #0]
 8003b6c:	e008      	b.n	8003b80 <setAddrWindow+0x1e0>
                   x1 = x = (x1 << 8) | x;
 8003b6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	b21a      	sxth	r2, r3
 8003b76:	88fb      	ldrh	r3, [r7, #6]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	80fb      	strh	r3, [r7, #6]
 8003b7c:	88fb      	ldrh	r3, [r7, #6]
 8003b7e:	807b      	strh	r3, [r7, #2]
           WriteCmdData(_SC, x);
 8003b80:	4b12      	ldr	r3, [pc, #72]	; (8003bcc <setAddrWindow+0x22c>)
 8003b82:	881b      	ldrh	r3, [r3, #0]
 8003b84:	88fa      	ldrh	r2, [r7, #6]
 8003b86:	4611      	mov	r1, r2
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f7fd f918 	bl	8000dbe <WriteCmdData>
           WriteCmdData(_SP, y);
 8003b8e:	4b10      	ldr	r3, [pc, #64]	; (8003bd0 <setAddrWindow+0x230>)
 8003b90:	881b      	ldrh	r3, [r3, #0]
 8003b92:	88ba      	ldrh	r2, [r7, #4]
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7fd f911 	bl	8000dbe <WriteCmdData>
           WriteCmdData(_EC, x1);
 8003b9c:	4b10      	ldr	r3, [pc, #64]	; (8003be0 <setAddrWindow+0x240>)
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	887a      	ldrh	r2, [r7, #2]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fd f90a 	bl	8000dbe <WriteCmdData>
           WriteCmdData(_EP, y1);
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <setAddrWindow+0x244>)
 8003bac:	881b      	ldrh	r3, [r3, #0]
 8003bae:	883a      	ldrh	r2, [r7, #0]
 8003bb0:	4611      	mov	r1, r2
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f7fd f903 	bl	8000dbe <WriteCmdData>
}
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd90      	pop	{r4, r7, pc}
 8003bc0:	200000da 	.word	0x200000da
 8003bc4:	20000036 	.word	0x20000036
 8003bc8:	200000cc 	.word	0x200000cc
 8003bcc:	200000d6 	.word	0x200000d6
 8003bd0:	200000ce 	.word	0x200000ce
 8003bd4:	20000033 	.word	0x20000033
 8003bd8:	200000d4 	.word	0x200000d4
 8003bdc:	200000d2 	.word	0x200000d2
 8003be0:	200000de 	.word	0x200000de
 8003be4:	200000d8 	.word	0x200000d8

08003be8 <vertScroll>:


void vertScroll(int16_t top, int16_t scrollines, int16_t offset)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	80fb      	strh	r3, [r7, #6]
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	80bb      	strh	r3, [r7, #4]
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	807b      	strh	r3, [r7, #2]
#if defined(OFFSET_9327)
	if (_lcd_ID == 0x9327) {
 8003bfa:	4b89      	ldr	r3, [pc, #548]	; (8003e20 <vertScroll+0x238>)
 8003bfc:	881b      	ldrh	r3, [r3, #0]
 8003bfe:	f249 3227 	movw	r2, #37671	; 0x9327
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d10b      	bne.n	8003c1e <vertScroll+0x36>
	    if (rotation == 2 || rotation == 3) top += OFFSET_9327;
 8003c06:	4b87      	ldr	r3, [pc, #540]	; (8003e24 <vertScroll+0x23c>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b02      	cmp	r3, #2
 8003c0c:	d003      	beq.n	8003c16 <vertScroll+0x2e>
 8003c0e:	4b85      	ldr	r3, [pc, #532]	; (8003e24 <vertScroll+0x23c>)
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d103      	bne.n	8003c1e <vertScroll+0x36>
 8003c16:	88fb      	ldrh	r3, [r7, #6]
 8003c18:	3320      	adds	r3, #32
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	80fb      	strh	r3, [r7, #6]
    }
#endif
    int16_t bfa = HEIGHT - top - scrollines;  // bottom fixed area
 8003c1e:	88fa      	ldrh	r2, [r7, #6]
 8003c20:	88bb      	ldrh	r3, [r7, #4]
 8003c22:	4413      	add	r3, r2
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f5c3 73a0 	rsb	r3, r3, #320	; 0x140
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	82fb      	strh	r3, [r7, #22]
    int16_t vsp;
    int16_t sea = top;
 8003c2e:	88fb      	ldrh	r3, [r7, #6]
 8003c30:	827b      	strh	r3, [r7, #18]
	if (_lcd_ID == 0x9327) bfa += 32;
 8003c32:	4b7b      	ldr	r3, [pc, #492]	; (8003e20 <vertScroll+0x238>)
 8003c34:	881b      	ldrh	r3, [r3, #0]
 8003c36:	f249 3227 	movw	r2, #37671	; 0x9327
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d103      	bne.n	8003c46 <vertScroll+0x5e>
 8003c3e:	8afb      	ldrh	r3, [r7, #22]
 8003c40:	3320      	adds	r3, #32
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	82fb      	strh	r3, [r7, #22]
    if (offset <= -scrollines || offset >= scrollines) offset = 0; //valid scroll
 8003c46:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003c4a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c4e:	425b      	negs	r3, r3
 8003c50:	429a      	cmp	r2, r3
 8003c52:	dd05      	ble.n	8003c60 <vertScroll+0x78>
 8003c54:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8003c58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	db01      	blt.n	8003c64 <vertScroll+0x7c>
 8003c60:	2300      	movs	r3, #0
 8003c62:	807b      	strh	r3, [r7, #2]
	vsp = top + offset; // vertical start position
 8003c64:	88fa      	ldrh	r2, [r7, #6]
 8003c66:	887b      	ldrh	r3, [r7, #2]
 8003c68:	4413      	add	r3, r2
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	82bb      	strh	r3, [r7, #20]
    if (offset < 0)
 8003c6e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	da04      	bge.n	8003c80 <vertScroll+0x98>
        vsp += scrollines;          //keep in unsigned range
 8003c76:	8aba      	ldrh	r2, [r7, #20]
 8003c78:	88bb      	ldrh	r3, [r7, #4]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	82bb      	strh	r3, [r7, #20]
    sea = top + scrollines - 1;
 8003c80:	88fa      	ldrh	r2, [r7, #6]
 8003c82:	88bb      	ldrh	r3, [r7, #4]
 8003c84:	4413      	add	r3, r2
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29b      	uxth	r3, r3
 8003c8c:	827b      	strh	r3, [r7, #18]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8003c8e:	4b66      	ldr	r3, [pc, #408]	; (8003e28 <vertScroll+0x240>)
 8003c90:	881b      	ldrh	r3, [r3, #0]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d071      	beq.n	8003d7e <vertScroll+0x196>
        uint8_t d[6];           // for multi-byte parameters
        d[0] = top >> 8;        //TFA
 8003c9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c9e:	121b      	asrs	r3, r3, #8
 8003ca0:	b21b      	sxth	r3, r3
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	733b      	strb	r3, [r7, #12]
        d[1] = top;
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	737b      	strb	r3, [r7, #13]
        d[2] = scrollines >> 8; //VSA
 8003cac:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003cb0:	121b      	asrs	r3, r3, #8
 8003cb2:	b21b      	sxth	r3, r3
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	73bb      	strb	r3, [r7, #14]
        d[3] = scrollines;
 8003cb8:	88bb      	ldrh	r3, [r7, #4]
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	73fb      	strb	r3, [r7, #15]
        d[4] = bfa >> 8;        //BFA
 8003cbe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8003cc2:	121b      	asrs	r3, r3, #8
 8003cc4:	b21b      	sxth	r3, r3
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	743b      	strb	r3, [r7, #16]
        d[5] = bfa;
 8003cca:	8afb      	ldrh	r3, [r7, #22]
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	747b      	strb	r3, [r7, #17]
        WriteCmdParamN(is8347 ? 0x0E : 0x33, 6, d);
 8003cd0:	4b56      	ldr	r3, [pc, #344]	; (8003e2c <vertScroll+0x244>)
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <vertScroll+0xf4>
 8003cd8:	230e      	movs	r3, #14
 8003cda:	e000      	b.n	8003cde <vertScroll+0xf6>
 8003cdc:	2333      	movs	r3, #51	; 0x33
 8003cde:	f107 020c 	add.w	r2, r7, #12
 8003ce2:	2106      	movs	r1, #6
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fd fb41 	bl	800136c <WriteCmdParamN>
//        if (offset == 0 && rotation > 1) vsp = top + scrollines;   //make non-valid
		d[0] = vsp >> 8;        //VSP
 8003cea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003cee:	121b      	asrs	r3, r3, #8
 8003cf0:	b21b      	sxth	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	733b      	strb	r3, [r7, #12]
        d[1] = vsp;
 8003cf6:	8abb      	ldrh	r3, [r7, #20]
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	737b      	strb	r3, [r7, #13]
        WriteCmdParamN(is8347 ? 0x14 : 0x37, 2, d);
 8003cfc:	4b4b      	ldr	r3, [pc, #300]	; (8003e2c <vertScroll+0x244>)
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <vertScroll+0x120>
 8003d04:	2314      	movs	r3, #20
 8003d06:	e000      	b.n	8003d0a <vertScroll+0x122>
 8003d08:	2337      	movs	r3, #55	; 0x37
 8003d0a:	f107 020c 	add.w	r2, r7, #12
 8003d0e:	2102      	movs	r1, #2
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd fb2b 	bl	800136c <WriteCmdParamN>
		if (is8347) {
 8003d16:	4b45      	ldr	r3, [pc, #276]	; (8003e2c <vertScroll+0x244>)
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d01f      	beq.n	8003d5e <vertScroll+0x176>
		    d[0] = (offset != 0) ? (_lcd_ID == 0x8347 ? 0x02 : 0x08) : 0;
 8003d1e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d009      	beq.n	8003d3a <vertScroll+0x152>
 8003d26:	4b3e      	ldr	r3, [pc, #248]	; (8003e20 <vertScroll+0x238>)
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	f248 3247 	movw	r2, #33607	; 0x8347
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <vertScroll+0x14e>
 8003d32:	2302      	movs	r3, #2
 8003d34:	e002      	b.n	8003d3c <vertScroll+0x154>
 8003d36:	2308      	movs	r3, #8
 8003d38:	e000      	b.n	8003d3c <vertScroll+0x154>
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	733b      	strb	r3, [r7, #12]
			WriteCmdParamN(_lcd_ID == 0x8347 ? 0x18 : 0x01, 1, d);  //HX8347-D
 8003d3e:	4b38      	ldr	r3, [pc, #224]	; (8003e20 <vertScroll+0x238>)
 8003d40:	881b      	ldrh	r3, [r3, #0]
 8003d42:	f248 3247 	movw	r2, #33607	; 0x8347
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d101      	bne.n	8003d4e <vertScroll+0x166>
 8003d4a:	2318      	movs	r3, #24
 8003d4c:	e000      	b.n	8003d50 <vertScroll+0x168>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f107 020c 	add.w	r2, r7, #12
 8003d54:	2101      	movs	r1, #1
 8003d56:	4618      	mov	r0, r3
 8003d58:	f7fd fb08 	bl	800136c <WriteCmdParamN>
 8003d5c:	e05d      	b.n	8003e1a <vertScroll+0x232>
		} else if (offset == 0 && (_lcd_capable & MIPI_DCS_REV1)) {
 8003d5e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d159      	bne.n	8003e1a <vertScroll+0x232>
 8003d66:	4b30      	ldr	r3, [pc, #192]	; (8003e28 <vertScroll+0x240>)
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d053      	beq.n	8003e1a <vertScroll+0x232>
			WriteCmdParamN(0x13, 0, NULL);    //NORMAL i.e. disable scroll
 8003d72:	2200      	movs	r2, #0
 8003d74:	2100      	movs	r1, #0
 8003d76:	2013      	movs	r0, #19
 8003d78:	f7fd faf8 	bl	800136c <WriteCmdParamN>
 8003d7c:	e04d      	b.n	8003e1a <vertScroll+0x232>
		}
		return;
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003d7e:	4b28      	ldr	r3, [pc, #160]	; (8003e20 <vertScroll+0x238>)
 8003d80:	881b      	ldrh	r3, [r3, #0]
 8003d82:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d027      	beq.n	8003dda <vertScroll+0x1f2>
 8003d8a:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	dc34      	bgt.n	8003dfc <vertScroll+0x214>
 8003d92:	f249 3226 	movw	r2, #37670	; 0x9326
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d01f      	beq.n	8003dda <vertScroll+0x1f2>
 8003d9a:	f249 3226 	movw	r2, #37670	; 0x9326
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	dc2c      	bgt.n	8003dfc <vertScroll+0x214>
 8003da2:	f247 7293 	movw	r2, #30611	; 0x7793
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d017      	beq.n	8003dda <vertScroll+0x1f2>
 8003daa:	f247 7293 	movw	r2, #30611	; 0x7793
 8003dae:	4293      	cmp	r3, r2
 8003db0:	dc24      	bgt.n	8003dfc <vertScroll+0x214>
 8003db2:	f245 4220 	movw	r2, #21536	; 0x5420
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00f      	beq.n	8003dda <vertScroll+0x1f2>
 8003dba:	f247 7283 	movw	r2, #30595	; 0x7783
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d11c      	bne.n	8003dfc <vertScroll+0x214>
    case 0x7783:
        WriteCmdData(0x61, _lcd_rev);   //!NDL, !VLE, REV
 8003dc2:	4b1b      	ldr	r3, [pc, #108]	; (8003e30 <vertScroll+0x248>)
 8003dc4:	881b      	ldrh	r3, [r3, #0]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	2061      	movs	r0, #97	; 0x61
 8003dca:	f7fc fff8 	bl	8000dbe <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003dce:	8abb      	ldrh	r3, [r7, #20]
 8003dd0:	4619      	mov	r1, r3
 8003dd2:	206a      	movs	r0, #106	; 0x6a
 8003dd4:	f7fc fff3 	bl	8000dbe <WriteCmdData>
        break;
 8003dd8:	e01f      	b.n	8003e1a <vertScroll+0x232>
#endif
	case 0x5420:
    case 0x7793:
	case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //VLE, REV
 8003dda:	4b15      	ldr	r3, [pc, #84]	; (8003e30 <vertScroll+0x248>)
 8003ddc:	881b      	ldrh	r3, [r3, #0]
 8003dde:	f043 0302 	orr.w	r3, r3, #2
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	4619      	mov	r1, r3
 8003de6:	f240 4001 	movw	r0, #1025	; 0x401
 8003dea:	f7fc ffe8 	bl	8000dbe <WriteCmdData>
        WriteCmdData(0x404, vsp);       //VL#
 8003dee:	8abb      	ldrh	r3, [r7, #20]
 8003df0:	4619      	mov	r1, r3
 8003df2:	f240 4004 	movw	r0, #1028	; 0x404
 8003df6:	f7fc ffe2 	bl	8000dbe <WriteCmdData>
        break;
 8003dfa:	e00e      	b.n	8003e1a <vertScroll+0x232>
    default:
        // 0x6809, 0x9320, 0x9325, 0x9335, 0xB505 can only scroll whole screen
        WriteCmdData(0x61, (1 << 1) | _lcd_rev);        //!NDL, VLE, REV
 8003dfc:	4b0c      	ldr	r3, [pc, #48]	; (8003e30 <vertScroll+0x248>)
 8003dfe:	881b      	ldrh	r3, [r3, #0]
 8003e00:	f043 0302 	orr.w	r3, r3, #2
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	4619      	mov	r1, r3
 8003e08:	2061      	movs	r0, #97	; 0x61
 8003e0a:	f7fc ffd8 	bl	8000dbe <WriteCmdData>
        WriteCmdData(0x6A, vsp);        //VL#
 8003e0e:	8abb      	ldrh	r3, [r7, #20]
 8003e10:	4619      	mov	r1, r3
 8003e12:	206a      	movs	r0, #106	; 0x6a
 8003e14:	f7fc ffd3 	bl	8000dbe <WriteCmdData>
        break;
 8003e18:	bf00      	nop
    }
}
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	200000da 	.word	0x200000da
 8003e24:	20000036 	.word	0x20000036
 8003e28:	200000cc 	.word	0x200000cc
 8003e2c:	20000033 	.word	0x20000033
 8003e30:	200000d0 	.word	0x200000d0

08003e34 <fillScreen>:
    pushColors_any(_MW, (uint8_t *)block, n, first, bigend ? 3 : 1);
}


void fillScreen(uint16_t color)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	80fb      	strh	r3, [r7, #6]
    fillRect(0, 0, _width, _height, color);
 8003e3e:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <fillScreen+0x2c>)
 8003e40:	881b      	ldrh	r3, [r3, #0]
 8003e42:	b21a      	sxth	r2, r3
 8003e44:	4b07      	ldr	r3, [pc, #28]	; (8003e64 <fillScreen+0x30>)
 8003e46:	881b      	ldrh	r3, [r3, #0]
 8003e48:	b219      	sxth	r1, r3
 8003e4a:	88fb      	ldrh	r3, [r7, #6]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	460b      	mov	r3, r1
 8003e50:	2100      	movs	r1, #0
 8003e52:	2000      	movs	r0, #0
 8003e54:	f000 f8ae 	bl	8003fb4 <fillRect>
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000008 	.word	0x20000008
 8003e64:	2000000a 	.word	0x2000000a

08003e68 <invertDisplay>:


void invertDisplay(uint8_t i)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	4603      	mov	r3, r0
 8003e70:	71fb      	strb	r3, [r7, #7]
    uint8_t val;
    _lcd_rev = ((_lcd_capable & REV_SCREEN) != 0) ^ i;
 8003e72:	4b4c      	ldr	r3, [pc, #304]	; (8003fa4 <invertDisplay+0x13c>)
 8003e74:	881b      	ldrh	r3, [r3, #0]
 8003e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	bf14      	ite	ne
 8003e7e:	2301      	movne	r3, #1
 8003e80:	2300      	moveq	r3, #0
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	b21a      	sxth	r2, r3
 8003e86:	79fb      	ldrb	r3, [r7, #7]
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	4053      	eors	r3, r2
 8003e8c:	b21b      	sxth	r3, r3
 8003e8e:	b29a      	uxth	r2, r3
 8003e90:	4b45      	ldr	r3, [pc, #276]	; (8003fa8 <invertDisplay+0x140>)
 8003e92:	801a      	strh	r2, [r3, #0]
    if (_lcd_capable & MIPI_DCS_REV1) {
 8003e94:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <invertDisplay+0x13c>)
 8003e96:	881b      	ldrh	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d035      	beq.n	8003f0c <invertDisplay+0xa4>
        if (is8347) {
 8003ea0:	4b42      	ldr	r3, [pc, #264]	; (8003fac <invertDisplay+0x144>)
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d024      	beq.n	8003ef2 <invertDisplay+0x8a>
            // HX8347D: 0x36 Panel Characteristic. REV_Panel
            // HX8347A: 0x36 is Display Control 10
            if (_lcd_ID == 0x8347 || _lcd_ID == 0x5252) // HX8347-A, HX5352-A
 8003ea8:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <invertDisplay+0x148>)
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	f248 3247 	movw	r2, #33607	; 0x8347
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d005      	beq.n	8003ec0 <invertDisplay+0x58>
 8003eb4:	4b3e      	ldr	r3, [pc, #248]	; (8003fb0 <invertDisplay+0x148>)
 8003eb6:	881b      	ldrh	r3, [r3, #0]
 8003eb8:	f245 2252 	movw	r2, #21074	; 0x5252
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d108      	bne.n	8003ed2 <invertDisplay+0x6a>
			    val = _lcd_rev ? 6 : 2;       //INVON id bit#2,  NORON=bit#1
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <invertDisplay+0x140>)
 8003ec2:	881b      	ldrh	r3, [r3, #0]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <invertDisplay+0x64>
 8003ec8:	2306      	movs	r3, #6
 8003eca:	e000      	b.n	8003ece <invertDisplay+0x66>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	73fb      	strb	r3, [r7, #15]
 8003ed0:	e007      	b.n	8003ee2 <invertDisplay+0x7a>
            else val = _lcd_rev ? 8 : 10;     //HX8347-D, G, I: SCROLLON=bit3, INVON=bit1
 8003ed2:	4b35      	ldr	r3, [pc, #212]	; (8003fa8 <invertDisplay+0x140>)
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d001      	beq.n	8003ede <invertDisplay+0x76>
 8003eda:	2308      	movs	r3, #8
 8003edc:	e000      	b.n	8003ee0 <invertDisplay+0x78>
 8003ede:	230a      	movs	r3, #10
 8003ee0:	73fb      	strb	r3, [r7, #15]
            // HX8347: 0x01 Display Mode has diff bit mapping for A, D
            WriteCmdParamN(0x01, 1, &val);
 8003ee2:	f107 030f 	add.w	r3, r7, #15
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	2101      	movs	r1, #1
 8003eea:	2001      	movs	r0, #1
 8003eec:	f7fd fa3e 	bl	800136c <WriteCmdParamN>
        } else
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
        return;
 8003ef0:	e055      	b.n	8003f9e <invertDisplay+0x136>
            WriteCmdParamN(_lcd_rev ? 0x21 : 0x20, 0, NULL);
 8003ef2:	4b2d      	ldr	r3, [pc, #180]	; (8003fa8 <invertDisplay+0x140>)
 8003ef4:	881b      	ldrh	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d001      	beq.n	8003efe <invertDisplay+0x96>
 8003efa:	2321      	movs	r3, #33	; 0x21
 8003efc:	e000      	b.n	8003f00 <invertDisplay+0x98>
 8003efe:	2320      	movs	r3, #32
 8003f00:	2200      	movs	r2, #0
 8003f02:	2100      	movs	r1, #0
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fd fa31 	bl	800136c <WriteCmdParamN>
 8003f0a:	e048      	b.n	8003f9e <invertDisplay+0x136>
    }
    // cope with 9320 style variants:
    switch (_lcd_ID) {
 8003f0c:	4b28      	ldr	r3, [pc, #160]	; (8003fb0 <invertDisplay+0x148>)
 8003f0e:	881b      	ldrh	r3, [r3, #0]
 8003f10:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d030      	beq.n	8003f7a <invertDisplay+0x112>
 8003f18:	f24b 5209 	movw	r2, #46345	; 0xb509
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	dc37      	bgt.n	8003f90 <invertDisplay+0x128>
 8003f20:	f249 3226 	movw	r2, #37670	; 0x9326
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d028      	beq.n	8003f7a <invertDisplay+0x112>
 8003f28:	f249 3226 	movw	r2, #37670	; 0x9326
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	dc2f      	bgt.n	8003f90 <invertDisplay+0x128>
 8003f30:	f249 2225 	movw	r2, #37413	; 0x9225
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d013      	beq.n	8003f60 <invertDisplay+0xf8>
 8003f38:	f249 2225 	movw	r2, #37413	; 0x9225
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	dc27      	bgt.n	8003f90 <invertDisplay+0x128>
 8003f40:	f247 7293 	movw	r2, #30611	; 0x7793
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d018      	beq.n	8003f7a <invertDisplay+0x112>
 8003f48:	f247 7293 	movw	r2, #30611	; 0x7793
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	dc1f      	bgt.n	8003f90 <invertDisplay+0x128>
 8003f50:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003f54:	d004      	beq.n	8003f60 <invertDisplay+0xf8>
 8003f56:	f245 4220 	movw	r2, #21536	; 0x5420
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d00d      	beq.n	8003f7a <invertDisplay+0x112>
 8003f5e:	e017      	b.n	8003f90 <invertDisplay+0x128>
#ifdef SUPPORT_0139
    case 0x0139:
#endif
    case 0x9225:                                        //REV is in reg(0x07) like Samsung
    case 0x0154:
        WriteCmdData(0x07, 0x13 | (_lcd_rev << 2));     //.kbv kludge
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <invertDisplay+0x140>)
 8003f62:	881b      	ldrh	r3, [r3, #0]
 8003f64:	009b      	lsls	r3, r3, #2
 8003f66:	b21b      	sxth	r3, r3
 8003f68:	f043 0313 	orr.w	r3, r3, #19
 8003f6c:	b21b      	sxth	r3, r3
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	4619      	mov	r1, r3
 8003f72:	2007      	movs	r0, #7
 8003f74:	f7fc ff23 	bl	8000dbe <WriteCmdData>
        break;
 8003f78:	e011      	b.n	8003f9e <invertDisplay+0x136>
#endif
	case 0x5420:
    case 0x7793:
    case 0x9326:
	case 0xB509:
        WriteCmdData(0x401, (1 << 1) | _lcd_rev);       //.kbv kludge VLE
 8003f7a:	4b0b      	ldr	r3, [pc, #44]	; (8003fa8 <invertDisplay+0x140>)
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	f043 0302 	orr.w	r3, r3, #2
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	4619      	mov	r1, r3
 8003f86:	f240 4001 	movw	r0, #1025	; 0x401
 8003f8a:	f7fc ff18 	bl	8000dbe <WriteCmdData>
        break;
 8003f8e:	e006      	b.n	8003f9e <invertDisplay+0x136>
    default:
        WriteCmdData(0x61, _lcd_rev);
 8003f90:	4b05      	ldr	r3, [pc, #20]	; (8003fa8 <invertDisplay+0x140>)
 8003f92:	881b      	ldrh	r3, [r3, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	2061      	movs	r0, #97	; 0x61
 8003f98:	f7fc ff11 	bl	8000dbe <WriteCmdData>
        break;
 8003f9c:	bf00      	nop
    }
}
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	200000cc 	.word	0x200000cc
 8003fa8:	200000d0 	.word	0x200000d0
 8003fac:	20000033 	.word	0x20000033
 8003fb0:	200000da 	.word	0x200000da

08003fb4 <fillRect>:
    drawFastVLine(x+w-1, y, h, color);
}


void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 8003fb4:	b590      	push	{r4, r7, lr}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	4604      	mov	r4, r0
 8003fbc:	4608      	mov	r0, r1
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	4623      	mov	r3, r4
 8003fc4:	80fb      	strh	r3, [r7, #6]
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	80bb      	strh	r3, [r7, #4]
 8003fca:	460b      	mov	r3, r1
 8003fcc:	807b      	strh	r3, [r7, #2]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	803b      	strh	r3, [r7, #0]
    int16_t end;
#if defined(SUPPORT_9488_555)
    if (is555) color = color565_to_555(color);
 8003fd2:	4b95      	ldr	r3, [pc, #596]	; (8004228 <fillRect+0x274>)
 8003fd4:	781b      	ldrb	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d005      	beq.n	8003fe6 <fillRect+0x32>
 8003fda:	8c3b      	ldrh	r3, [r7, #32]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7fc fe3f 	bl	8000c60 <color565_to_555>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	843b      	strh	r3, [r7, #32]
#endif
    if (w < 0) {
 8003fe6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	da08      	bge.n	8004000 <fillRect+0x4c>
        w = -w;
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	425b      	negs	r3, r3
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	807b      	strh	r3, [r7, #2]
        x -= w;
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	887b      	ldrh	r3, [r7, #2]
 8003ffa:	1ad3      	subs	r3, r2, r3
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	80fb      	strh	r3, [r7, #6]
    }                           //+ve w
    end = x + w;
 8004000:	88fa      	ldrh	r2, [r7, #6]
 8004002:	887b      	ldrh	r3, [r7, #2]
 8004004:	4413      	add	r3, r2
 8004006:	b29b      	uxth	r3, r3
 8004008:	81fb      	strh	r3, [r7, #14]
    if (x < 0)
 800400a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800400e:	2b00      	cmp	r3, #0
 8004010:	da01      	bge.n	8004016 <fillRect+0x62>
        x = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	80fb      	strh	r3, [r7, #6]
    if (end > width())
 8004016:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800401a:	f7fc fe09 	bl	8000c30 <width>
 800401e:	4603      	mov	r3, r0
 8004020:	429c      	cmp	r4, r3
 8004022:	dd03      	ble.n	800402c <fillRect+0x78>
        end = width();
 8004024:	f7fc fe04 	bl	8000c30 <width>
 8004028:	4603      	mov	r3, r0
 800402a:	81fb      	strh	r3, [r7, #14]
    w = end - x;
 800402c:	89fa      	ldrh	r2, [r7, #14]
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	1ad3      	subs	r3, r2, r3
 8004032:	b29b      	uxth	r3, r3
 8004034:	807b      	strh	r3, [r7, #2]
    if (h < 0) {
 8004036:	f9b7 3000 	ldrsh.w	r3, [r7]
 800403a:	2b00      	cmp	r3, #0
 800403c:	da08      	bge.n	8004050 <fillRect+0x9c>
        h = -h;
 800403e:	883b      	ldrh	r3, [r7, #0]
 8004040:	425b      	negs	r3, r3
 8004042:	b29b      	uxth	r3, r3
 8004044:	803b      	strh	r3, [r7, #0]
        y -= h;
 8004046:	88ba      	ldrh	r2, [r7, #4]
 8004048:	883b      	ldrh	r3, [r7, #0]
 800404a:	1ad3      	subs	r3, r2, r3
 800404c:	b29b      	uxth	r3, r3
 800404e:	80bb      	strh	r3, [r7, #4]
    }                           //+ve h
    end = y + h;
 8004050:	88ba      	ldrh	r2, [r7, #4]
 8004052:	883b      	ldrh	r3, [r7, #0]
 8004054:	4413      	add	r3, r2
 8004056:	b29b      	uxth	r3, r3
 8004058:	81fb      	strh	r3, [r7, #14]
    if (y < 0)
 800405a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800405e:	2b00      	cmp	r3, #0
 8004060:	da01      	bge.n	8004066 <fillRect+0xb2>
        y = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	80bb      	strh	r3, [r7, #4]
    if (end > height())
 8004066:	f9b7 400e 	ldrsh.w	r4, [r7, #14]
 800406a:	f7fc fded 	bl	8000c48 <height>
 800406e:	4603      	mov	r3, r0
 8004070:	429c      	cmp	r4, r3
 8004072:	dd03      	ble.n	800407c <fillRect+0xc8>
        end = height();
 8004074:	f7fc fde8 	bl	8000c48 <height>
 8004078:	4603      	mov	r3, r0
 800407a:	81fb      	strh	r3, [r7, #14]
    h = end - y;
 800407c:	89fa      	ldrh	r2, [r7, #14]
 800407e:	88bb      	ldrh	r3, [r7, #4]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	b29b      	uxth	r3, r3
 8004084:	803b      	strh	r3, [r7, #0]
    setAddrWindow(x, y, x + w - 1, y + h - 1);
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	887b      	ldrh	r3, [r7, #2]
 800408a:	4413      	add	r3, r2
 800408c:	b29b      	uxth	r3, r3
 800408e:	3b01      	subs	r3, #1
 8004090:	b29b      	uxth	r3, r3
 8004092:	b21c      	sxth	r4, r3
 8004094:	88ba      	ldrh	r2, [r7, #4]
 8004096:	883b      	ldrh	r3, [r7, #0]
 8004098:	4413      	add	r3, r2
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29b      	uxth	r3, r3
 80040a0:	b21b      	sxth	r3, r3
 80040a2:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80040a6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 80040aa:	4622      	mov	r2, r4
 80040ac:	f7ff fc78 	bl	80039a0 <setAddrWindow>
    CS_ACTIVE;
 80040b0:	2101      	movs	r1, #1
 80040b2:	485e      	ldr	r0, [pc, #376]	; (800422c <fillRect+0x278>)
 80040b4:	f7fc fd6e 	bl	8000b94 <PIN_LOW>
    WriteCmd(_MW);
 80040b8:	2110      	movs	r1, #16
 80040ba:	485d      	ldr	r0, [pc, #372]	; (8004230 <fillRect+0x27c>)
 80040bc:	f7fc fd6a 	bl	8000b94 <PIN_LOW>
 80040c0:	4b5c      	ldr	r3, [pc, #368]	; (8004234 <fillRect+0x280>)
 80040c2:	881b      	ldrh	r3, [r3, #0]
 80040c4:	0a1b      	lsrs	r3, r3, #8
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	737b      	strb	r3, [r7, #13]
 80040ca:	4b5a      	ldr	r3, [pc, #360]	; (8004234 <fillRect+0x280>)
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	733b      	strb	r3, [r7, #12]
 80040d0:	4b57      	ldr	r3, [pc, #348]	; (8004230 <fillRect+0x27c>)
 80040d2:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80040d6:	619a      	str	r2, [r3, #24]
 80040d8:	4b54      	ldr	r3, [pc, #336]	; (800422c <fillRect+0x278>)
 80040da:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80040de:	619a      	str	r2, [r3, #24]
 80040e0:	4b55      	ldr	r3, [pc, #340]	; (8004238 <fillRect+0x284>)
 80040e2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80040e6:	619a      	str	r2, [r3, #24]
 80040e8:	7b7b      	ldrb	r3, [r7, #13]
 80040ea:	005b      	lsls	r3, r3, #1
 80040ec:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80040f0:	7b7b      	ldrb	r3, [r7, #13]
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f8:	431a      	orrs	r2, r3
 80040fa:	7b7b      	ldrb	r3, [r7, #13]
 80040fc:	025b      	lsls	r3, r3, #9
 80040fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004102:	431a      	orrs	r2, r3
 8004104:	4b4a      	ldr	r3, [pc, #296]	; (8004230 <fillRect+0x27c>)
 8004106:	619a      	str	r2, [r3, #24]
 8004108:	7b7b      	ldrb	r3, [r7, #13]
 800410a:	011b      	lsls	r3, r3, #4
 800410c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004110:	7b7b      	ldrb	r3, [r7, #13]
 8004112:	105b      	asrs	r3, r3, #1
 8004114:	f003 0310 	and.w	r3, r3, #16
 8004118:	431a      	orrs	r2, r3
 800411a:	7b7b      	ldrb	r3, [r7, #13]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	431a      	orrs	r2, r3
 8004124:	7b7b      	ldrb	r3, [r7, #13]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	431a      	orrs	r2, r3
 800412c:	4b3f      	ldr	r3, [pc, #252]	; (800422c <fillRect+0x278>)
 800412e:	619a      	str	r2, [r3, #24]
 8004130:	7b7b      	ldrb	r3, [r7, #13]
 8004132:	019b      	lsls	r3, r3, #6
 8004134:	4a40      	ldr	r2, [pc, #256]	; (8004238 <fillRect+0x284>)
 8004136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413a:	6193      	str	r3, [r2, #24]
 800413c:	2102      	movs	r1, #2
 800413e:	483c      	ldr	r0, [pc, #240]	; (8004230 <fillRect+0x27c>)
 8004140:	f7fc fd28 	bl	8000b94 <PIN_LOW>
 8004144:	2102      	movs	r1, #2
 8004146:	483a      	ldr	r0, [pc, #232]	; (8004230 <fillRect+0x27c>)
 8004148:	f7fc fd24 	bl	8000b94 <PIN_LOW>
 800414c:	2102      	movs	r1, #2
 800414e:	4838      	ldr	r0, [pc, #224]	; (8004230 <fillRect+0x27c>)
 8004150:	f7fc fd20 	bl	8000b94 <PIN_LOW>
 8004154:	2102      	movs	r1, #2
 8004156:	4836      	ldr	r0, [pc, #216]	; (8004230 <fillRect+0x27c>)
 8004158:	f7fc fd2c 	bl	8000bb4 <PIN_HIGH>
 800415c:	2102      	movs	r1, #2
 800415e:	4834      	ldr	r0, [pc, #208]	; (8004230 <fillRect+0x27c>)
 8004160:	f7fc fd28 	bl	8000bb4 <PIN_HIGH>
 8004164:	4b32      	ldr	r3, [pc, #200]	; (8004230 <fillRect+0x27c>)
 8004166:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 800416a:	619a      	str	r2, [r3, #24]
 800416c:	4b2f      	ldr	r3, [pc, #188]	; (800422c <fillRect+0x278>)
 800416e:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004172:	619a      	str	r2, [r3, #24]
 8004174:	4b30      	ldr	r3, [pc, #192]	; (8004238 <fillRect+0x284>)
 8004176:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800417a:	619a      	str	r2, [r3, #24]
 800417c:	7b3b      	ldrb	r3, [r7, #12]
 800417e:	005b      	lsls	r3, r3, #1
 8004180:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004184:	7b3b      	ldrb	r3, [r7, #12]
 8004186:	021b      	lsls	r3, r3, #8
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	431a      	orrs	r2, r3
 800418e:	7b3b      	ldrb	r3, [r7, #12]
 8004190:	025b      	lsls	r3, r3, #9
 8004192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004196:	431a      	orrs	r2, r3
 8004198:	4b25      	ldr	r3, [pc, #148]	; (8004230 <fillRect+0x27c>)
 800419a:	619a      	str	r2, [r3, #24]
 800419c:	7b3b      	ldrb	r3, [r7, #12]
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80041a4:	7b3b      	ldrb	r3, [r7, #12]
 80041a6:	105b      	asrs	r3, r3, #1
 80041a8:	f003 0310 	and.w	r3, r3, #16
 80041ac:	431a      	orrs	r2, r3
 80041ae:	7b3b      	ldrb	r3, [r7, #12]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	431a      	orrs	r2, r3
 80041b8:	7b3b      	ldrb	r3, [r7, #12]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	431a      	orrs	r2, r3
 80041c0:	4b1a      	ldr	r3, [pc, #104]	; (800422c <fillRect+0x278>)
 80041c2:	619a      	str	r2, [r3, #24]
 80041c4:	7b3b      	ldrb	r3, [r7, #12]
 80041c6:	019b      	lsls	r3, r3, #6
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <fillRect+0x284>)
 80041ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ce:	6193      	str	r3, [r2, #24]
 80041d0:	2102      	movs	r1, #2
 80041d2:	4817      	ldr	r0, [pc, #92]	; (8004230 <fillRect+0x27c>)
 80041d4:	f7fc fcde 	bl	8000b94 <PIN_LOW>
 80041d8:	2102      	movs	r1, #2
 80041da:	4815      	ldr	r0, [pc, #84]	; (8004230 <fillRect+0x27c>)
 80041dc:	f7fc fcda 	bl	8000b94 <PIN_LOW>
 80041e0:	2102      	movs	r1, #2
 80041e2:	4813      	ldr	r0, [pc, #76]	; (8004230 <fillRect+0x27c>)
 80041e4:	f7fc fcd6 	bl	8000b94 <PIN_LOW>
 80041e8:	2102      	movs	r1, #2
 80041ea:	4811      	ldr	r0, [pc, #68]	; (8004230 <fillRect+0x27c>)
 80041ec:	f7fc fce2 	bl	8000bb4 <PIN_HIGH>
 80041f0:	2102      	movs	r1, #2
 80041f2:	480f      	ldr	r0, [pc, #60]	; (8004230 <fillRect+0x27c>)
 80041f4:	f7fc fcde 	bl	8000bb4 <PIN_HIGH>
 80041f8:	2110      	movs	r1, #16
 80041fa:	480d      	ldr	r0, [pc, #52]	; (8004230 <fillRect+0x27c>)
 80041fc:	f7fc fcda 	bl	8000bb4 <PIN_HIGH>
    if (h > w) {
 8004200:	f9b7 2000 	ldrsh.w	r2, [r7]
 8004204:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004208:	429a      	cmp	r2, r3
 800420a:	dd05      	ble.n	8004218 <fillRect+0x264>
        end = h;
 800420c:	883b      	ldrh	r3, [r7, #0]
 800420e:	81fb      	strh	r3, [r7, #14]
        h = w;
 8004210:	887b      	ldrh	r3, [r7, #2]
 8004212:	803b      	strh	r3, [r7, #0]
        w = end;
 8004214:	89fb      	ldrh	r3, [r7, #14]
 8004216:	807b      	strh	r3, [r7, #2]
    }
    uint8_t hi = color >> 8, lo = color & 0xFF;
 8004218:	8c3b      	ldrh	r3, [r7, #32]
 800421a:	0a1b      	lsrs	r3, r3, #8
 800421c:	b29b      	uxth	r3, r3
 800421e:	72fb      	strb	r3, [r7, #11]
 8004220:	8c3b      	ldrh	r3, [r7, #32]
 8004222:	72bb      	strb	r3, [r7, #10]
    while (h-- > 0) {
 8004224:	e0a9      	b.n	800437a <fillRect+0x3c6>
 8004226:	bf00      	nop
 8004228:	20000034 	.word	0x20000034
 800422c:	40020400 	.word	0x40020400
 8004230:	40020000 	.word	0x40020000
 8004234:	200000ca 	.word	0x200000ca
 8004238:	40020800 	.word	0x40020800
        end = w;
 800423c:	887b      	ldrh	r3, [r7, #2]
 800423e:	81fb      	strh	r3, [r7, #14]
//                 write8(b);
//             } while (--end != 0);
//        } else
//#endif
        do {
            write8(hi);
 8004240:	4b68      	ldr	r3, [pc, #416]	; (80043e4 <fillRect+0x430>)
 8004242:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004246:	619a      	str	r2, [r3, #24]
 8004248:	4b67      	ldr	r3, [pc, #412]	; (80043e8 <fillRect+0x434>)
 800424a:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800424e:	619a      	str	r2, [r3, #24]
 8004250:	4b66      	ldr	r3, [pc, #408]	; (80043ec <fillRect+0x438>)
 8004252:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004256:	619a      	str	r2, [r3, #24]
 8004258:	7afb      	ldrb	r3, [r7, #11]
 800425a:	005b      	lsls	r3, r3, #1
 800425c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8004260:	7afb      	ldrb	r3, [r7, #11]
 8004262:	021b      	lsls	r3, r3, #8
 8004264:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004268:	431a      	orrs	r2, r3
 800426a:	7afb      	ldrb	r3, [r7, #11]
 800426c:	025b      	lsls	r3, r3, #9
 800426e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004272:	431a      	orrs	r2, r3
 8004274:	4b5b      	ldr	r3, [pc, #364]	; (80043e4 <fillRect+0x430>)
 8004276:	619a      	str	r2, [r3, #24]
 8004278:	7afb      	ldrb	r3, [r7, #11]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004280:	7afb      	ldrb	r3, [r7, #11]
 8004282:	105b      	asrs	r3, r3, #1
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	431a      	orrs	r2, r3
 800428a:	7afb      	ldrb	r3, [r7, #11]
 800428c:	005b      	lsls	r3, r3, #1
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	431a      	orrs	r2, r3
 8004294:	7afb      	ldrb	r3, [r7, #11]
 8004296:	f003 0308 	and.w	r3, r3, #8
 800429a:	431a      	orrs	r2, r3
 800429c:	4b52      	ldr	r3, [pc, #328]	; (80043e8 <fillRect+0x434>)
 800429e:	619a      	str	r2, [r3, #24]
 80042a0:	7afb      	ldrb	r3, [r7, #11]
 80042a2:	019b      	lsls	r3, r3, #6
 80042a4:	4a51      	ldr	r2, [pc, #324]	; (80043ec <fillRect+0x438>)
 80042a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042aa:	6193      	str	r3, [r2, #24]
 80042ac:	2102      	movs	r1, #2
 80042ae:	484d      	ldr	r0, [pc, #308]	; (80043e4 <fillRect+0x430>)
 80042b0:	f7fc fc70 	bl	8000b94 <PIN_LOW>
 80042b4:	2102      	movs	r1, #2
 80042b6:	484b      	ldr	r0, [pc, #300]	; (80043e4 <fillRect+0x430>)
 80042b8:	f7fc fc6c 	bl	8000b94 <PIN_LOW>
 80042bc:	2102      	movs	r1, #2
 80042be:	4849      	ldr	r0, [pc, #292]	; (80043e4 <fillRect+0x430>)
 80042c0:	f7fc fc68 	bl	8000b94 <PIN_LOW>
 80042c4:	2102      	movs	r1, #2
 80042c6:	4847      	ldr	r0, [pc, #284]	; (80043e4 <fillRect+0x430>)
 80042c8:	f7fc fc74 	bl	8000bb4 <PIN_HIGH>
 80042cc:	2102      	movs	r1, #2
 80042ce:	4845      	ldr	r0, [pc, #276]	; (80043e4 <fillRect+0x430>)
 80042d0:	f7fc fc70 	bl	8000bb4 <PIN_HIGH>
            write8(lo);
 80042d4:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <fillRect+0x430>)
 80042d6:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80042da:	619a      	str	r2, [r3, #24]
 80042dc:	4b42      	ldr	r3, [pc, #264]	; (80043e8 <fillRect+0x434>)
 80042de:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80042e2:	619a      	str	r2, [r3, #24]
 80042e4:	4b41      	ldr	r3, [pc, #260]	; (80043ec <fillRect+0x438>)
 80042e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80042ea:	619a      	str	r2, [r3, #24]
 80042ec:	7abb      	ldrb	r3, [r7, #10]
 80042ee:	005b      	lsls	r3, r3, #1
 80042f0:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80042f4:	7abb      	ldrb	r3, [r7, #10]
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fc:	431a      	orrs	r2, r3
 80042fe:	7abb      	ldrb	r3, [r7, #10]
 8004300:	025b      	lsls	r3, r3, #9
 8004302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004306:	431a      	orrs	r2, r3
 8004308:	4b36      	ldr	r3, [pc, #216]	; (80043e4 <fillRect+0x430>)
 800430a:	619a      	str	r2, [r3, #24]
 800430c:	7abb      	ldrb	r3, [r7, #10]
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 8004314:	7abb      	ldrb	r3, [r7, #10]
 8004316:	105b      	asrs	r3, r3, #1
 8004318:	f003 0310 	and.w	r3, r3, #16
 800431c:	431a      	orrs	r2, r3
 800431e:	7abb      	ldrb	r3, [r7, #10]
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	f003 0320 	and.w	r3, r3, #32
 8004326:	431a      	orrs	r2, r3
 8004328:	7abb      	ldrb	r3, [r7, #10]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	431a      	orrs	r2, r3
 8004330:	4b2d      	ldr	r3, [pc, #180]	; (80043e8 <fillRect+0x434>)
 8004332:	619a      	str	r2, [r3, #24]
 8004334:	7abb      	ldrb	r3, [r7, #10]
 8004336:	019b      	lsls	r3, r3, #6
 8004338:	4a2c      	ldr	r2, [pc, #176]	; (80043ec <fillRect+0x438>)
 800433a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800433e:	6193      	str	r3, [r2, #24]
 8004340:	2102      	movs	r1, #2
 8004342:	4828      	ldr	r0, [pc, #160]	; (80043e4 <fillRect+0x430>)
 8004344:	f7fc fc26 	bl	8000b94 <PIN_LOW>
 8004348:	2102      	movs	r1, #2
 800434a:	4826      	ldr	r0, [pc, #152]	; (80043e4 <fillRect+0x430>)
 800434c:	f7fc fc22 	bl	8000b94 <PIN_LOW>
 8004350:	2102      	movs	r1, #2
 8004352:	4824      	ldr	r0, [pc, #144]	; (80043e4 <fillRect+0x430>)
 8004354:	f7fc fc1e 	bl	8000b94 <PIN_LOW>
 8004358:	2102      	movs	r1, #2
 800435a:	4822      	ldr	r0, [pc, #136]	; (80043e4 <fillRect+0x430>)
 800435c:	f7fc fc2a 	bl	8000bb4 <PIN_HIGH>
 8004360:	2102      	movs	r1, #2
 8004362:	4820      	ldr	r0, [pc, #128]	; (80043e4 <fillRect+0x430>)
 8004364:	f7fc fc26 	bl	8000bb4 <PIN_HIGH>
        } while (--end != 0);
 8004368:	89fb      	ldrh	r3, [r7, #14]
 800436a:	3b01      	subs	r3, #1
 800436c:	b29b      	uxth	r3, r3
 800436e:	81fb      	strh	r3, [r7, #14]
 8004370:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004374:	2b00      	cmp	r3, #0
 8004376:	f47f af63 	bne.w	8004240 <fillRect+0x28c>
    while (h-- > 0) {
 800437a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800437e:	b29a      	uxth	r2, r3
 8004380:	3a01      	subs	r2, #1
 8004382:	b292      	uxth	r2, r2
 8004384:	803a      	strh	r2, [r7, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	f73f af58 	bgt.w	800423c <fillRect+0x288>
#endif
    }
    CS_IDLE;
 800438c:	2101      	movs	r1, #1
 800438e:	4816      	ldr	r0, [pc, #88]	; (80043e8 <fillRect+0x434>)
 8004390:	f7fc fc10 	bl	8000bb4 <PIN_HIGH>
    if (!(_lcd_capable & MIPI_DCS_REV1) || ((_lcd_ID == 0x1526) && (rotation & 1)))
 8004394:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <fillRect+0x43c>)
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	f003 0301 	and.w	r3, r3, #1
 800439c:	2b00      	cmp	r3, #0
 800439e:	d00b      	beq.n	80043b8 <fillRect+0x404>
 80043a0:	4b14      	ldr	r3, [pc, #80]	; (80043f4 <fillRect+0x440>)
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	f241 5226 	movw	r2, #5414	; 0x1526
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d116      	bne.n	80043da <fillRect+0x426>
 80043ac:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <fillRect+0x444>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	f003 0301 	and.w	r3, r3, #1
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d010      	beq.n	80043da <fillRect+0x426>
        setAddrWindow(0, 0, width() - 1, height() - 1);
 80043b8:	f7fc fc3a 	bl	8000c30 <width>
 80043bc:	4603      	mov	r3, r0
 80043be:	3b01      	subs	r3, #1
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	b21c      	sxth	r4, r3
 80043c4:	f7fc fc40 	bl	8000c48 <height>
 80043c8:	4603      	mov	r3, r0
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	b21b      	sxth	r3, r3
 80043d0:	4622      	mov	r2, r4
 80043d2:	2100      	movs	r1, #0
 80043d4:	2000      	movs	r0, #0
 80043d6:	f7ff fae3 	bl	80039a0 <setAddrWindow>
}
 80043da:	bf00      	nop
 80043dc:	3714      	adds	r7, #20
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd90      	pop	{r4, r7, pc}
 80043e2:	bf00      	nop
 80043e4:	40020000 	.word	0x40020000
 80043e8:	40020400 	.word	0x40020400
 80043ec:	40020800 	.word	0x40020800
 80043f0:	200000cc 	.word	0x200000cc
 80043f4:	200000da 	.word	0x200000da
 80043f8:	20000036 	.word	0x20000036

080043fc <delay>:


/****************** delay in microseconds ***********************/
extern TIM_HandleTypeDef htim1;
void delay (uint32_t time)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8004404:	4b08      	ldr	r3, [pc, #32]	; (8004428 <delay+0x2c>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	2200      	movs	r2, #0
 800440a:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 800440c:	bf00      	nop
 800440e:	4b06      	ldr	r3, [pc, #24]	; (8004428 <delay+0x2c>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	429a      	cmp	r2, r3
 8004418:	d8f9      	bhi.n	800440e <delay+0x12>
}
 800441a:	bf00      	nop
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr
 8004428:	2000003c 	.word	0x2000003c

0800442c <inicioDados>:
	write16(pixel);
}


void inicioDados(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
	CS_ACTIVE;
 8004432:	2101      	movs	r1, #1
 8004434:	4853      	ldr	r0, [pc, #332]	; (8004584 <inicioDados+0x158>)
 8004436:	f7fc fbad 	bl	8000b94 <PIN_LOW>
	WriteCmd(0x2C);
 800443a:	2110      	movs	r1, #16
 800443c:	4852      	ldr	r0, [pc, #328]	; (8004588 <inicioDados+0x15c>)
 800443e:	f7fc fba9 	bl	8000b94 <PIN_LOW>
 8004442:	2300      	movs	r3, #0
 8004444:	71fb      	strb	r3, [r7, #7]
 8004446:	232c      	movs	r3, #44	; 0x2c
 8004448:	71bb      	strb	r3, [r7, #6]
 800444a:	4b4f      	ldr	r3, [pc, #316]	; (8004588 <inicioDados+0x15c>)
 800444c:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004450:	619a      	str	r2, [r3, #24]
 8004452:	4b4c      	ldr	r3, [pc, #304]	; (8004584 <inicioDados+0x158>)
 8004454:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 8004458:	619a      	str	r2, [r3, #24]
 800445a:	4b4c      	ldr	r3, [pc, #304]	; (800458c <inicioDados+0x160>)
 800445c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004460:	619a      	str	r2, [r3, #24]
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	021b      	lsls	r3, r3, #8
 800446e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004472:	431a      	orrs	r2, r3
 8004474:	79fb      	ldrb	r3, [r7, #7]
 8004476:	025b      	lsls	r3, r3, #9
 8004478:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800447c:	431a      	orrs	r2, r3
 800447e:	4b42      	ldr	r3, [pc, #264]	; (8004588 <inicioDados+0x15c>)
 8004480:	619a      	str	r2, [r3, #24]
 8004482:	79fb      	ldrb	r3, [r7, #7]
 8004484:	011b      	lsls	r3, r3, #4
 8004486:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	105b      	asrs	r3, r3, #1
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	431a      	orrs	r2, r3
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	f003 0320 	and.w	r3, r3, #32
 800449c:	431a      	orrs	r2, r3
 800449e:	79fb      	ldrb	r3, [r7, #7]
 80044a0:	f003 0308 	and.w	r3, r3, #8
 80044a4:	431a      	orrs	r2, r3
 80044a6:	4b37      	ldr	r3, [pc, #220]	; (8004584 <inicioDados+0x158>)
 80044a8:	619a      	str	r2, [r3, #24]
 80044aa:	79fb      	ldrb	r3, [r7, #7]
 80044ac:	019b      	lsls	r3, r3, #6
 80044ae:	4a37      	ldr	r2, [pc, #220]	; (800458c <inicioDados+0x160>)
 80044b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b4:	6193      	str	r3, [r2, #24]
 80044b6:	2102      	movs	r1, #2
 80044b8:	4833      	ldr	r0, [pc, #204]	; (8004588 <inicioDados+0x15c>)
 80044ba:	f7fc fb6b 	bl	8000b94 <PIN_LOW>
 80044be:	2102      	movs	r1, #2
 80044c0:	4831      	ldr	r0, [pc, #196]	; (8004588 <inicioDados+0x15c>)
 80044c2:	f7fc fb67 	bl	8000b94 <PIN_LOW>
 80044c6:	2102      	movs	r1, #2
 80044c8:	482f      	ldr	r0, [pc, #188]	; (8004588 <inicioDados+0x15c>)
 80044ca:	f7fc fb63 	bl	8000b94 <PIN_LOW>
 80044ce:	2102      	movs	r1, #2
 80044d0:	482d      	ldr	r0, [pc, #180]	; (8004588 <inicioDados+0x15c>)
 80044d2:	f7fc fb6f 	bl	8000bb4 <PIN_HIGH>
 80044d6:	2102      	movs	r1, #2
 80044d8:	482b      	ldr	r0, [pc, #172]	; (8004588 <inicioDados+0x15c>)
 80044da:	f7fc fb6b 	bl	8000bb4 <PIN_HIGH>
 80044de:	4b2a      	ldr	r3, [pc, #168]	; (8004588 <inicioDados+0x15c>)
 80044e0:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80044e4:	619a      	str	r2, [r3, #24]
 80044e6:	4b27      	ldr	r3, [pc, #156]	; (8004584 <inicioDados+0x158>)
 80044e8:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80044ec:	619a      	str	r2, [r3, #24]
 80044ee:	4b27      	ldr	r3, [pc, #156]	; (800458c <inicioDados+0x160>)
 80044f0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80044f4:	619a      	str	r2, [r3, #24]
 80044f6:	79bb      	ldrb	r3, [r7, #6]
 80044f8:	005b      	lsls	r3, r3, #1
 80044fa:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80044fe:	79bb      	ldrb	r3, [r7, #6]
 8004500:	021b      	lsls	r3, r3, #8
 8004502:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004506:	431a      	orrs	r2, r3
 8004508:	79bb      	ldrb	r3, [r7, #6]
 800450a:	025b      	lsls	r3, r3, #9
 800450c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004510:	431a      	orrs	r2, r3
 8004512:	4b1d      	ldr	r3, [pc, #116]	; (8004588 <inicioDados+0x15c>)
 8004514:	619a      	str	r2, [r3, #24]
 8004516:	79bb      	ldrb	r3, [r7, #6]
 8004518:	011b      	lsls	r3, r3, #4
 800451a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800451e:	79bb      	ldrb	r3, [r7, #6]
 8004520:	105b      	asrs	r3, r3, #1
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	431a      	orrs	r2, r3
 8004528:	79bb      	ldrb	r3, [r7, #6]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	431a      	orrs	r2, r3
 8004532:	79bb      	ldrb	r3, [r7, #6]
 8004534:	f003 0308 	and.w	r3, r3, #8
 8004538:	431a      	orrs	r2, r3
 800453a:	4b12      	ldr	r3, [pc, #72]	; (8004584 <inicioDados+0x158>)
 800453c:	619a      	str	r2, [r3, #24]
 800453e:	79bb      	ldrb	r3, [r7, #6]
 8004540:	019b      	lsls	r3, r3, #6
 8004542:	4a12      	ldr	r2, [pc, #72]	; (800458c <inicioDados+0x160>)
 8004544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004548:	6193      	str	r3, [r2, #24]
 800454a:	2102      	movs	r1, #2
 800454c:	480e      	ldr	r0, [pc, #56]	; (8004588 <inicioDados+0x15c>)
 800454e:	f7fc fb21 	bl	8000b94 <PIN_LOW>
 8004552:	2102      	movs	r1, #2
 8004554:	480c      	ldr	r0, [pc, #48]	; (8004588 <inicioDados+0x15c>)
 8004556:	f7fc fb1d 	bl	8000b94 <PIN_LOW>
 800455a:	2102      	movs	r1, #2
 800455c:	480a      	ldr	r0, [pc, #40]	; (8004588 <inicioDados+0x15c>)
 800455e:	f7fc fb19 	bl	8000b94 <PIN_LOW>
 8004562:	2102      	movs	r1, #2
 8004564:	4808      	ldr	r0, [pc, #32]	; (8004588 <inicioDados+0x15c>)
 8004566:	f7fc fb25 	bl	8000bb4 <PIN_HIGH>
 800456a:	2102      	movs	r1, #2
 800456c:	4806      	ldr	r0, [pc, #24]	; (8004588 <inicioDados+0x15c>)
 800456e:	f7fc fb21 	bl	8000bb4 <PIN_HIGH>
 8004572:	2110      	movs	r1, #16
 8004574:	4804      	ldr	r0, [pc, #16]	; (8004588 <inicioDados+0x15c>)
 8004576:	f7fc fb1d 	bl	8000bb4 <PIN_HIGH>
}
 800457a:	bf00      	nop
 800457c:	3708      	adds	r7, #8
 800457e:	46bd      	mov	sp, r7
 8004580:	bd80      	pop	{r7, pc}
 8004582:	bf00      	nop
 8004584:	40020400 	.word	0x40020400
 8004588:	40020000 	.word	0x40020000
 800458c:	40020800 	.word	0x40020800

08004590 <fimDados>:


void fimDados(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
	CS_IDLE;
 8004594:	2101      	movs	r1, #1
 8004596:	4802      	ldr	r0, [pc, #8]	; (80045a0 <fimDados+0x10>)
 8004598:	f7fc fb0c 	bl	8000bb4 <PIN_HIGH>
}
 800459c:	bf00      	nop
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	40020400 	.word	0x40020400

080045a4 <tft_gpio_init>:


/****************** Inicialização de GPIOs **********************/
void tft_gpio_init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80045aa:	2300      	movs	r3, #0
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	4b32      	ldr	r3, [pc, #200]	; (8004678 <tft_gpio_init+0xd4>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	4a31      	ldr	r2, [pc, #196]	; (8004678 <tft_gpio_init+0xd4>)
 80045b4:	f043 0304 	orr.w	r3, r3, #4
 80045b8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ba:	4b2f      	ldr	r3, [pc, #188]	; (8004678 <tft_gpio_init+0xd4>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	f003 0304 	and.w	r3, r3, #4
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80045c6:	2300      	movs	r3, #0
 80045c8:	60bb      	str	r3, [r7, #8]
 80045ca:	4b2b      	ldr	r3, [pc, #172]	; (8004678 <tft_gpio_init+0xd4>)
 80045cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ce:	4a2a      	ldr	r2, [pc, #168]	; (8004678 <tft_gpio_init+0xd4>)
 80045d0:	f043 0301 	orr.w	r3, r3, #1
 80045d4:	6313      	str	r3, [r2, #48]	; 0x30
 80045d6:	4b28      	ldr	r3, [pc, #160]	; (8004678 <tft_gpio_init+0xd4>)
 80045d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	60bb      	str	r3, [r7, #8]
 80045e0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80045e2:	2300      	movs	r3, #0
 80045e4:	607b      	str	r3, [r7, #4]
 80045e6:	4b24      	ldr	r3, [pc, #144]	; (8004678 <tft_gpio_init+0xd4>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	4a23      	ldr	r2, [pc, #140]	; (8004678 <tft_gpio_init+0xd4>)
 80045ec:	f043 0302 	orr.w	r3, r3, #2
 80045f0:	6313      	str	r3, [r2, #48]	; 0x30
 80045f2:	4b21      	ldr	r3, [pc, #132]	; (8004678 <tft_gpio_init+0xd4>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	607b      	str	r3, [r7, #4]
 80045fc:	687b      	ldr	r3, [r7, #4]

	PIN_OUTPUT(RD_PORT, RD_PIN);
 80045fe:	2101      	movs	r1, #1
 8004600:	481e      	ldr	r0, [pc, #120]	; (800467c <tft_gpio_init+0xd8>)
 8004602:	f7fc fafd 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(WR_PORT, WR_PIN);
 8004606:	2102      	movs	r1, #2
 8004608:	481c      	ldr	r0, [pc, #112]	; (800467c <tft_gpio_init+0xd8>)
 800460a:	f7fc faf9 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(CD_PORT, CD_PIN);
 800460e:	2110      	movs	r1, #16
 8004610:	481a      	ldr	r0, [pc, #104]	; (800467c <tft_gpio_init+0xd8>)
 8004612:	f7fc faf5 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(CS_PORT, CS_PIN);
 8004616:	2101      	movs	r1, #1
 8004618:	4819      	ldr	r0, [pc, #100]	; (8004680 <tft_gpio_init+0xdc>)
 800461a:	f7fc faf1 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(RESET_PORT, RESET_PIN);
 800461e:	2102      	movs	r1, #2
 8004620:	4818      	ldr	r0, [pc, #96]	; (8004684 <tft_gpio_init+0xe0>)
 8004622:	f7fc faed 	bl	8000c00 <PIN_OUTPUT>

	PIN_OUTPUT(D0_PORT, D0_PIN);
 8004626:	f44f 7100 	mov.w	r1, #512	; 0x200
 800462a:	4814      	ldr	r0, [pc, #80]	; (800467c <tft_gpio_init+0xd8>)
 800462c:	f7fc fae8 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D1_PORT, D1_PIN);
 8004630:	2180      	movs	r1, #128	; 0x80
 8004632:	4814      	ldr	r0, [pc, #80]	; (8004684 <tft_gpio_init+0xe0>)
 8004634:	f7fc fae4 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D2_PORT, D2_PIN);
 8004638:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800463c:	480f      	ldr	r0, [pc, #60]	; (800467c <tft_gpio_init+0xd8>)
 800463e:	f7fc fadf 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D3_PORT, D3_PIN);
 8004642:	2108      	movs	r1, #8
 8004644:	480e      	ldr	r0, [pc, #56]	; (8004680 <tft_gpio_init+0xdc>)
 8004646:	f7fc fadb 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D4_PORT, D4_PIN);
 800464a:	2120      	movs	r1, #32
 800464c:	480c      	ldr	r0, [pc, #48]	; (8004680 <tft_gpio_init+0xdc>)
 800464e:	f7fc fad7 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D5_PORT, D5_PIN);
 8004652:	2110      	movs	r1, #16
 8004654:	480a      	ldr	r0, [pc, #40]	; (8004680 <tft_gpio_init+0xdc>)
 8004656:	f7fc fad3 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D6_PORT, D6_PIN);
 800465a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800465e:	4808      	ldr	r0, [pc, #32]	; (8004680 <tft_gpio_init+0xdc>)
 8004660:	f7fc face 	bl	8000c00 <PIN_OUTPUT>
	PIN_OUTPUT(D7_PORT, D7_PIN);
 8004664:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004668:	4804      	ldr	r0, [pc, #16]	; (800467c <tft_gpio_init+0xd8>)
 800466a:	f7fc fac9 	bl	8000c00 <PIN_OUTPUT>
}
 800466e:	bf00      	nop
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40023800 	.word	0x40023800
 800467c:	40020000 	.word	0x40020000
 8004680:	40020400 	.word	0x40020400
 8004684:	40020800 	.word	0x40020800

08004688 <drawRGBBitmap>:
//        h     number of pixels tall
// Output: none
// Must be less than or equal to 320 pixels wide by 240 pixels high
#define TOP_DOWN
void drawRGBBitmap(int16_t x, int16_t y, const uint16_t bitmap[], int16_t w, int16_t h)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b088      	sub	sp, #32
 800468c:	af00      	add	r7, sp, #0
 800468e:	60ba      	str	r2, [r7, #8]
 8004690:	461a      	mov	r2, r3
 8004692:	4603      	mov	r3, r0
 8004694:	81fb      	strh	r3, [r7, #14]
 8004696:	460b      	mov	r3, r1
 8004698:	81bb      	strh	r3, [r7, #12]
 800469a:	4613      	mov	r3, r2
 800469c:	80fb      	strh	r3, [r7, #6]
	int16_t skipC = 0;                      // non-zero if columns need to be skipped due to clipping
 800469e:	2300      	movs	r3, #0
 80046a0:	83fb      	strh	r3, [r7, #30]
	int16_t originalWidth = w;              // save this value; even if not all columns fit on the screen, the image is still this width in ROM
 80046a2:	88fb      	ldrh	r3, [r7, #6]
 80046a4:	82fb      	strh	r3, [r7, #22]
	int i = w*(h - 1);
 80046a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046aa:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 80046ae:	3a01      	subs	r2, #1
 80046b0:	fb02 f303 	mul.w	r3, r2, r3
 80046b4:	61bb      	str	r3, [r7, #24]

#ifdef TOP_DOWN
	i = 0;
 80046b6:	2300      	movs	r3, #0
 80046b8:	61bb      	str	r3, [r7, #24]
#endif

	if((x >= _width) || ((y - h + 1) >= _height) || ((x + w) <= 0) || (y < 0))
 80046ba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80046be:	4ab5      	ldr	r2, [pc, #724]	; (8004994 <drawRGBBitmap+0x30c>)
 80046c0:	8812      	ldrh	r2, [r2, #0]
 80046c2:	4293      	cmp	r3, r2
 80046c4:	f280 8160 	bge.w	8004988 <drawRGBBitmap+0x300>
 80046c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80046cc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	3301      	adds	r3, #1
 80046d4:	4ab0      	ldr	r2, [pc, #704]	; (8004998 <drawRGBBitmap+0x310>)
 80046d6:	8812      	ldrh	r2, [r2, #0]
 80046d8:	4293      	cmp	r3, r2
 80046da:	f280 8155 	bge.w	8004988 <drawRGBBitmap+0x300>
 80046de:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80046e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046e6:	4413      	add	r3, r2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	f340 814d 	ble.w	8004988 <drawRGBBitmap+0x300>
 80046ee:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f2c0 8148 	blt.w	8004988 <drawRGBBitmap+0x300>
	{
		return;                             // image is totally off the screen, do nothing
	}
	if((w > _width) || (h > _height))		// image is too wide for the screen, do nothing
 80046f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046fc:	4aa5      	ldr	r2, [pc, #660]	; (8004994 <drawRGBBitmap+0x30c>)
 80046fe:	8812      	ldrh	r2, [r2, #0]
 8004700:	4293      	cmp	r3, r2
 8004702:	f300 8143 	bgt.w	800498c <drawRGBBitmap+0x304>
 8004706:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800470a:	4aa3      	ldr	r2, [pc, #652]	; (8004998 <drawRGBBitmap+0x310>)
 800470c:	8812      	ldrh	r2, [r2, #0]
 800470e:	4293      	cmp	r3, r2
 8004710:	f300 813c 	bgt.w	800498c <drawRGBBitmap+0x304>
		//following logic much more complicated, since you can have
		//an image that exceeds multiple boundaries and needs to be
		//clipped on more than one side.
		return;
	}
	if((x + w - 1) >= _width)	// image exceeds right of screen
 8004714:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800471c:	4413      	add	r3, r2
 800471e:	4a9d      	ldr	r2, [pc, #628]	; (8004994 <drawRGBBitmap+0x30c>)
 8004720:	8812      	ldrh	r2, [r2, #0]
 8004722:	4293      	cmp	r3, r2
 8004724:	dd0e      	ble.n	8004744 <drawRGBBitmap+0xbc>
	{
		skipC = (x + w) - _width;           // skip cut off columns
 8004726:	89fa      	ldrh	r2, [r7, #14]
 8004728:	88fb      	ldrh	r3, [r7, #6]
 800472a:	4413      	add	r3, r2
 800472c:	b29a      	uxth	r2, r3
 800472e:	4b99      	ldr	r3, [pc, #612]	; (8004994 <drawRGBBitmap+0x30c>)
 8004730:	881b      	ldrh	r3, [r3, #0]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	b29b      	uxth	r3, r3
 8004736:	83fb      	strh	r3, [r7, #30]
		w = _width - x;
 8004738:	4b96      	ldr	r3, [pc, #600]	; (8004994 <drawRGBBitmap+0x30c>)
 800473a:	881a      	ldrh	r2, [r3, #0]
 800473c:	89fb      	ldrh	r3, [r7, #14]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	b29b      	uxth	r3, r3
 8004742:	80fb      	strh	r3, [r7, #6]
	}
	if((y - h + 1) < 0)			// image exceeds top of screen
 8004744:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004748:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	da10      	bge.n	8004776 <drawRGBBitmap+0xee>
	{
		i = i - (h - y - 1)*originalWidth;  // skip the last cut off rows
 8004754:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8004758:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	3b01      	subs	r3, #1
 8004760:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8004764:	fb02 f303 	mul.w	r3, r2, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	61bb      	str	r3, [r7, #24]
		h = y + 1;
 800476e:	89bb      	ldrh	r3, [r7, #12]
 8004770:	3301      	adds	r3, #1
 8004772:	b29b      	uxth	r3, r3
 8004774:	853b      	strh	r3, [r7, #40]	; 0x28
	}
	if(x < 0)					// image exceeds left of screen
 8004776:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800477a:	2b00      	cmp	r3, #0
 800477c:	da0f      	bge.n	800479e <drawRGBBitmap+0x116>
	{
		w = w + x;
 800477e:	88fa      	ldrh	r2, [r7, #6]
 8004780:	89fb      	ldrh	r3, [r7, #14]
 8004782:	4413      	add	r3, r2
 8004784:	b29b      	uxth	r3, r3
 8004786:	80fb      	strh	r3, [r7, #6]
		skipC = -1*x;                       // skip cut off columns
 8004788:	89fb      	ldrh	r3, [r7, #14]
 800478a:	425b      	negs	r3, r3
 800478c:	b29b      	uxth	r3, r3
 800478e:	83fb      	strh	r3, [r7, #30]
		i = i - x;                          // skip the first cut off columns
 8004790:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	61bb      	str	r3, [r7, #24]
		x = 0;
 800479a:	2300      	movs	r3, #0
 800479c:	81fb      	strh	r3, [r7, #14]
	}
	if(y >= _height)			// image exceeds bottom of screen
 800479e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047a2:	4a7d      	ldr	r2, [pc, #500]	; (8004998 <drawRGBBitmap+0x310>)
 80047a4:	8812      	ldrh	r2, [r2, #0]
 80047a6:	4293      	cmp	r3, r2
 80047a8:	db0f      	blt.n	80047ca <drawRGBBitmap+0x142>
	{
		h = h - (y - _height + 1);
 80047aa:	4b7b      	ldr	r3, [pc, #492]	; (8004998 <drawRGBBitmap+0x310>)
 80047ac:	881a      	ldrh	r2, [r3, #0]
 80047ae:	89bb      	ldrh	r3, [r7, #12]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	b29a      	uxth	r2, r3
 80047b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80047b6:	4413      	add	r3, r2
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	3b01      	subs	r3, #1
 80047bc:	b29b      	uxth	r3, r3
 80047be:	853b      	strh	r3, [r7, #40]	; 0x28
		y = _height - 1;
 80047c0:	4b75      	ldr	r3, [pc, #468]	; (8004998 <drawRGBBitmap+0x310>)
 80047c2:	881b      	ldrh	r3, [r3, #0]
 80047c4:	3b01      	subs	r3, #1
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	81bb      	strh	r3, [r7, #12]
	}

	setAddrWindow(x, y-h+1, x+w-1, y);
 80047ca:	89ba      	ldrh	r2, [r7, #12]
 80047cc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	3301      	adds	r3, #1
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	b219      	sxth	r1, r3
 80047d8:	89fa      	ldrh	r2, [r7, #14]
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	4413      	add	r3, r2
 80047de:	b29b      	uxth	r3, r3
 80047e0:	3b01      	subs	r3, #1
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	b21a      	sxth	r2, r3
 80047e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80047ea:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80047ee:	f7ff f8d7 	bl	80039a0 <setAddrWindow>

	inicioDados();
 80047f2:	f7ff fe1b 	bl	800442c <inicioDados>

#ifdef TOP_DOWN
	//Plota na ordem direta (de cima para baixo, da esquerda para direita)
	//Dessa forma, uma imagem normal fica na orientação correta
	for(y=0; y<h; y=y+1)
 80047f6:	2300      	movs	r3, #0
 80047f8:	81bb      	strh	r3, [r7, #12]
 80047fa:	e0bb      	b.n	8004974 <drawRGBBitmap+0x2ec>
	{
		for(x=0; x<w; x=x+1)
 80047fc:	2300      	movs	r3, #0
 80047fe:	81fb      	strh	r3, [r7, #14]
 8004800:	e0a8      	b.n	8004954 <drawRGBBitmap+0x2cc>
		{
			write16(bitmap[i]);
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	4413      	add	r3, r2
 800480a:	881b      	ldrh	r3, [r3, #0]
 800480c:	0a1b      	lsrs	r3, r3, #8
 800480e:	b29b      	uxth	r3, r3
 8004810:	757b      	strb	r3, [r7, #21]
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	68ba      	ldr	r2, [r7, #8]
 8004818:	4413      	add	r3, r2
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	753b      	strb	r3, [r7, #20]
 800481e:	4b5f      	ldr	r3, [pc, #380]	; (800499c <drawRGBBitmap+0x314>)
 8004820:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 8004824:	619a      	str	r2, [r3, #24]
 8004826:	4b5e      	ldr	r3, [pc, #376]	; (80049a0 <drawRGBBitmap+0x318>)
 8004828:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 800482c:	619a      	str	r2, [r3, #24]
 800482e:	4b5d      	ldr	r3, [pc, #372]	; (80049a4 <drawRGBBitmap+0x31c>)
 8004830:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004834:	619a      	str	r2, [r3, #24]
 8004836:	7d7b      	ldrb	r3, [r7, #21]
 8004838:	005b      	lsls	r3, r3, #1
 800483a:	f403 7280 	and.w	r2, r3, #256	; 0x100
 800483e:	7d7b      	ldrb	r3, [r7, #21]
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004846:	431a      	orrs	r2, r3
 8004848:	7d7b      	ldrb	r3, [r7, #21]
 800484a:	025b      	lsls	r3, r3, #9
 800484c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004850:	431a      	orrs	r2, r3
 8004852:	4b52      	ldr	r3, [pc, #328]	; (800499c <drawRGBBitmap+0x314>)
 8004854:	619a      	str	r2, [r3, #24]
 8004856:	7d7b      	ldrb	r3, [r7, #21]
 8004858:	011b      	lsls	r3, r3, #4
 800485a:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 800485e:	7d7b      	ldrb	r3, [r7, #21]
 8004860:	105b      	asrs	r3, r3, #1
 8004862:	f003 0310 	and.w	r3, r3, #16
 8004866:	431a      	orrs	r2, r3
 8004868:	7d7b      	ldrb	r3, [r7, #21]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	431a      	orrs	r2, r3
 8004872:	7d7b      	ldrb	r3, [r7, #21]
 8004874:	f003 0308 	and.w	r3, r3, #8
 8004878:	431a      	orrs	r2, r3
 800487a:	4b49      	ldr	r3, [pc, #292]	; (80049a0 <drawRGBBitmap+0x318>)
 800487c:	619a      	str	r2, [r3, #24]
 800487e:	7d7b      	ldrb	r3, [r7, #21]
 8004880:	019b      	lsls	r3, r3, #6
 8004882:	4a48      	ldr	r2, [pc, #288]	; (80049a4 <drawRGBBitmap+0x31c>)
 8004884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004888:	6193      	str	r3, [r2, #24]
 800488a:	2102      	movs	r1, #2
 800488c:	4843      	ldr	r0, [pc, #268]	; (800499c <drawRGBBitmap+0x314>)
 800488e:	f7fc f981 	bl	8000b94 <PIN_LOW>
 8004892:	2102      	movs	r1, #2
 8004894:	4841      	ldr	r0, [pc, #260]	; (800499c <drawRGBBitmap+0x314>)
 8004896:	f7fc f97d 	bl	8000b94 <PIN_LOW>
 800489a:	2102      	movs	r1, #2
 800489c:	483f      	ldr	r0, [pc, #252]	; (800499c <drawRGBBitmap+0x314>)
 800489e:	f7fc f979 	bl	8000b94 <PIN_LOW>
 80048a2:	2102      	movs	r1, #2
 80048a4:	483d      	ldr	r0, [pc, #244]	; (800499c <drawRGBBitmap+0x314>)
 80048a6:	f7fc f985 	bl	8000bb4 <PIN_HIGH>
 80048aa:	2102      	movs	r1, #2
 80048ac:	483b      	ldr	r0, [pc, #236]	; (800499c <drawRGBBitmap+0x314>)
 80048ae:	f7fc f981 	bl	8000bb4 <PIN_HIGH>
 80048b2:	4b3a      	ldr	r3, [pc, #232]	; (800499c <drawRGBBitmap+0x314>)
 80048b4:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80048b8:	619a      	str	r2, [r3, #24]
 80048ba:	4b39      	ldr	r3, [pc, #228]	; (80049a0 <drawRGBBitmap+0x318>)
 80048bc:	f04f 6287 	mov.w	r2, #70778880	; 0x4380000
 80048c0:	619a      	str	r2, [r3, #24]
 80048c2:	4b38      	ldr	r3, [pc, #224]	; (80049a4 <drawRGBBitmap+0x31c>)
 80048c4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80048c8:	619a      	str	r2, [r3, #24]
 80048ca:	7d3b      	ldrb	r3, [r7, #20]
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80048d2:	7d3b      	ldrb	r3, [r7, #20]
 80048d4:	021b      	lsls	r3, r3, #8
 80048d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048da:	431a      	orrs	r2, r3
 80048dc:	7d3b      	ldrb	r3, [r7, #20]
 80048de:	025b      	lsls	r3, r3, #9
 80048e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048e4:	431a      	orrs	r2, r3
 80048e6:	4b2d      	ldr	r3, [pc, #180]	; (800499c <drawRGBBitmap+0x314>)
 80048e8:	619a      	str	r2, [r3, #24]
 80048ea:	7d3b      	ldrb	r3, [r7, #20]
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	f403 6280 	and.w	r2, r3, #1024	; 0x400
 80048f2:	7d3b      	ldrb	r3, [r7, #20]
 80048f4:	105b      	asrs	r3, r3, #1
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	431a      	orrs	r2, r3
 80048fc:	7d3b      	ldrb	r3, [r7, #20]
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	f003 0320 	and.w	r3, r3, #32
 8004904:	431a      	orrs	r2, r3
 8004906:	7d3b      	ldrb	r3, [r7, #20]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	431a      	orrs	r2, r3
 800490e:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <drawRGBBitmap+0x318>)
 8004910:	619a      	str	r2, [r3, #24]
 8004912:	7d3b      	ldrb	r3, [r7, #20]
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	4a23      	ldr	r2, [pc, #140]	; (80049a4 <drawRGBBitmap+0x31c>)
 8004918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800491c:	6193      	str	r3, [r2, #24]
 800491e:	2102      	movs	r1, #2
 8004920:	481e      	ldr	r0, [pc, #120]	; (800499c <drawRGBBitmap+0x314>)
 8004922:	f7fc f937 	bl	8000b94 <PIN_LOW>
 8004926:	2102      	movs	r1, #2
 8004928:	481c      	ldr	r0, [pc, #112]	; (800499c <drawRGBBitmap+0x314>)
 800492a:	f7fc f933 	bl	8000b94 <PIN_LOW>
 800492e:	2102      	movs	r1, #2
 8004930:	481a      	ldr	r0, [pc, #104]	; (800499c <drawRGBBitmap+0x314>)
 8004932:	f7fc f92f 	bl	8000b94 <PIN_LOW>
 8004936:	2102      	movs	r1, #2
 8004938:	4818      	ldr	r0, [pc, #96]	; (800499c <drawRGBBitmap+0x314>)
 800493a:	f7fc f93b 	bl	8000bb4 <PIN_HIGH>
 800493e:	2102      	movs	r1, #2
 8004940:	4816      	ldr	r0, [pc, #88]	; (800499c <drawRGBBitmap+0x314>)
 8004942:	f7fc f937 	bl	8000bb4 <PIN_HIGH>

			i = i + 1;                        // go to the next pixel
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	3301      	adds	r3, #1
 800494a:	61bb      	str	r3, [r7, #24]
		for(x=0; x<w; x=x+1)
 800494c:	89fb      	ldrh	r3, [r7, #14]
 800494e:	3301      	adds	r3, #1
 8004950:	b29b      	uxth	r3, r3
 8004952:	81fb      	strh	r3, [r7, #14]
 8004954:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8004958:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800495c:	429a      	cmp	r2, r3
 800495e:	f6ff af50 	blt.w	8004802 <drawRGBBitmap+0x17a>
		}
		i = i + skipC;
 8004962:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	4413      	add	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
	for(y=0; y<h; y=y+1)
 800496c:	89bb      	ldrh	r3, [r7, #12]
 800496e:	3301      	adds	r3, #1
 8004970:	b29b      	uxth	r3, r3
 8004972:	81bb      	strh	r3, [r7, #12]
 8004974:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004978:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 800497c:	429a      	cmp	r2, r3
 800497e:	f6ff af3d 	blt.w	80047fc <drawRGBBitmap+0x174>
		i = i + skipC;
		i = i - 2*originalWidth;
	}
#endif

	fimDados();
 8004982:	f7ff fe05 	bl	8004590 <fimDados>
 8004986:	e002      	b.n	800498e <drawRGBBitmap+0x306>
		return;                             // image is totally off the screen, do nothing
 8004988:	bf00      	nop
 800498a:	e000      	b.n	800498e <drawRGBBitmap+0x306>
		return;
 800498c:	bf00      	nop
}
 800498e:	3720      	adds	r7, #32
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	20000008 	.word	0x20000008
 8004998:	2000000a 	.word	0x2000000a
 800499c:	40020000 	.word	0x40020000
 80049a0:	40020400 	.word	0x40020400
 80049a4:	40020800 	.word	0x40020800

080049a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80049a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80049e0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049ac:	480d      	ldr	r0, [pc, #52]	; (80049e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80049ae:	490e      	ldr	r1, [pc, #56]	; (80049e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80049b0:	4a0e      	ldr	r2, [pc, #56]	; (80049ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80049b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049b4:	e002      	b.n	80049bc <LoopCopyDataInit>

080049b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049ba:	3304      	adds	r3, #4

080049bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049c0:	d3f9      	bcc.n	80049b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049c2:	4a0b      	ldr	r2, [pc, #44]	; (80049f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80049c4:	4c0b      	ldr	r4, [pc, #44]	; (80049f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80049c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049c8:	e001      	b.n	80049ce <LoopFillZerobss>

080049ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049cc:	3204      	adds	r2, #4

080049ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049d0:	d3fb      	bcc.n	80049ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80049d2:	f7fc f8cd 	bl	8000b70 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049d6:	f001 fe35 	bl	8006644 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049da:	f7fb fd8f 	bl	80004fc <main>
  bx  lr    
 80049de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80049e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80049e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80049e8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80049ec:	080344f4 	.word	0x080344f4
  ldr r2, =_sbss
 80049f0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80049f4:	200000e8 	.word	0x200000e8

080049f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80049f8:	e7fe      	b.n	80049f8 <ADC_IRQHandler>
	...

080049fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a00:	4b0e      	ldr	r3, [pc, #56]	; (8004a3c <HAL_Init+0x40>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a0d      	ldr	r2, [pc, #52]	; (8004a3c <HAL_Init+0x40>)
 8004a06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <HAL_Init+0x40>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <HAL_Init+0x40>)
 8004a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a18:	4b08      	ldr	r3, [pc, #32]	; (8004a3c <HAL_Init+0x40>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <HAL_Init+0x40>)
 8004a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a24:	2003      	movs	r0, #3
 8004a26:	f000 f94f 	bl	8004cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a2a:	2000      	movs	r0, #0
 8004a2c:	f000 f808 	bl	8004a40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a30:	f7fb ffd4 	bl	80009dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023c00 	.word	0x40023c00

08004a40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a48:	4b12      	ldr	r3, [pc, #72]	; (8004a94 <HAL_InitTick+0x54>)
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	4b12      	ldr	r3, [pc, #72]	; (8004a98 <HAL_InitTick+0x58>)
 8004a4e:	781b      	ldrb	r3, [r3, #0]
 8004a50:	4619      	mov	r1, r3
 8004a52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 f967 	bl	8004d32 <HAL_SYSTICK_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d001      	beq.n	8004a6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e00e      	b.n	8004a8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b0f      	cmp	r3, #15
 8004a72:	d80a      	bhi.n	8004a8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a74:	2200      	movs	r2, #0
 8004a76:	6879      	ldr	r1, [r7, #4]
 8004a78:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7c:	f000 f92f 	bl	8004cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a80:	4a06      	ldr	r2, [pc, #24]	; (8004a9c <HAL_InitTick+0x5c>)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004a86:	2300      	movs	r3, #0
 8004a88:	e000      	b.n	8004a8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	20000004 	.word	0x20000004
 8004a98:	20000010 	.word	0x20000010
 8004a9c:	2000000c 	.word	0x2000000c

08004aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <HAL_IncTick+0x20>)
 8004aa6:	781b      	ldrb	r3, [r3, #0]
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	4b06      	ldr	r3, [pc, #24]	; (8004ac4 <HAL_IncTick+0x24>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4413      	add	r3, r2
 8004ab0:	4a04      	ldr	r2, [pc, #16]	; (8004ac4 <HAL_IncTick+0x24>)
 8004ab2:	6013      	str	r3, [r2, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	20000010 	.word	0x20000010
 8004ac4:	200000e4 	.word	0x200000e4

08004ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	af00      	add	r7, sp, #0
  return uwTick;
 8004acc:	4b03      	ldr	r3, [pc, #12]	; (8004adc <HAL_GetTick+0x14>)
 8004ace:	681b      	ldr	r3, [r3, #0]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	200000e4 	.word	0x200000e4

08004ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004ae8:	f7ff ffee 	bl	8004ac8 <HAL_GetTick>
 8004aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d005      	beq.n	8004b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004afa:	4b0a      	ldr	r3, [pc, #40]	; (8004b24 <HAL_Delay+0x44>)
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b06:	bf00      	nop
 8004b08:	f7ff ffde 	bl	8004ac8 <HAL_GetTick>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d8f7      	bhi.n	8004b08 <HAL_Delay+0x28>
  {
  }
}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}
 8004b22:	bf00      	nop
 8004b24:	20000010 	.word	0x20000010

08004b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	f003 0307 	and.w	r3, r3, #7
 8004b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <__NVIC_SetPriorityGrouping+0x44>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b44:	4013      	ands	r3, r2
 8004b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b5a:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <__NVIC_SetPriorityGrouping+0x44>)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	60d3      	str	r3, [r2, #12]
}
 8004b60:	bf00      	nop
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	e000ed00 	.word	0xe000ed00

08004b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b70:	b480      	push	{r7}
 8004b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b74:	4b04      	ldr	r3, [pc, #16]	; (8004b88 <__NVIC_GetPriorityGrouping+0x18>)
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	0a1b      	lsrs	r3, r3, #8
 8004b7a:	f003 0307 	and.w	r3, r3, #7
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	db0b      	blt.n	8004bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b9e:	79fb      	ldrb	r3, [r7, #7]
 8004ba0:	f003 021f 	and.w	r2, r3, #31
 8004ba4:	4907      	ldr	r1, [pc, #28]	; (8004bc4 <__NVIC_EnableIRQ+0x38>)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	2001      	movs	r0, #1
 8004bae:	fa00 f202 	lsl.w	r2, r0, r2
 8004bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bb6:	bf00      	nop
 8004bb8:	370c      	adds	r7, #12
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	e000e100 	.word	0xe000e100

08004bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	4603      	mov	r3, r0
 8004bd0:	6039      	str	r1, [r7, #0]
 8004bd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	db0a      	blt.n	8004bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	b2da      	uxtb	r2, r3
 8004be0:	490c      	ldr	r1, [pc, #48]	; (8004c14 <__NVIC_SetPriority+0x4c>)
 8004be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004be6:	0112      	lsls	r2, r2, #4
 8004be8:	b2d2      	uxtb	r2, r2
 8004bea:	440b      	add	r3, r1
 8004bec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bf0:	e00a      	b.n	8004c08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	4908      	ldr	r1, [pc, #32]	; (8004c18 <__NVIC_SetPriority+0x50>)
 8004bf8:	79fb      	ldrb	r3, [r7, #7]
 8004bfa:	f003 030f 	and.w	r3, r3, #15
 8004bfe:	3b04      	subs	r3, #4
 8004c00:	0112      	lsls	r2, r2, #4
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	440b      	add	r3, r1
 8004c06:	761a      	strb	r2, [r3, #24]
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr
 8004c14:	e000e100 	.word	0xe000e100
 8004c18:	e000ed00 	.word	0xe000ed00

08004c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b089      	sub	sp, #36	; 0x24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 0307 	and.w	r3, r3, #7
 8004c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	f1c3 0307 	rsb	r3, r3, #7
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	bf28      	it	cs
 8004c3a:	2304      	movcs	r3, #4
 8004c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3304      	adds	r3, #4
 8004c42:	2b06      	cmp	r3, #6
 8004c44:	d902      	bls.n	8004c4c <NVIC_EncodePriority+0x30>
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	3b03      	subs	r3, #3
 8004c4a:	e000      	b.n	8004c4e <NVIC_EncodePriority+0x32>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c50:	f04f 32ff 	mov.w	r2, #4294967295
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5a:	43da      	mvns	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	401a      	ands	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c64:	f04f 31ff 	mov.w	r1, #4294967295
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c6e:	43d9      	mvns	r1, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c74:	4313      	orrs	r3, r2
         );
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3724      	adds	r7, #36	; 0x24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b082      	sub	sp, #8
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	3b01      	subs	r3, #1
 8004c90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c94:	d301      	bcc.n	8004c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c96:	2301      	movs	r3, #1
 8004c98:	e00f      	b.n	8004cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c9a:	4a0a      	ldr	r2, [pc, #40]	; (8004cc4 <SysTick_Config+0x40>)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ca2:	210f      	movs	r1, #15
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	f7ff ff8e 	bl	8004bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <SysTick_Config+0x40>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cb2:	4b04      	ldr	r3, [pc, #16]	; (8004cc4 <SysTick_Config+0x40>)
 8004cb4:	2207      	movs	r2, #7
 8004cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	e000e010 	.word	0xe000e010

08004cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f7ff ff29 	bl	8004b28 <__NVIC_SetPriorityGrouping>
}
 8004cd6:	bf00      	nop
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b086      	sub	sp, #24
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	60b9      	str	r1, [r7, #8]
 8004ce8:	607a      	str	r2, [r7, #4]
 8004cea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cec:	2300      	movs	r3, #0
 8004cee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004cf0:	f7ff ff3e 	bl	8004b70 <__NVIC_GetPriorityGrouping>
 8004cf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	68b9      	ldr	r1, [r7, #8]
 8004cfa:	6978      	ldr	r0, [r7, #20]
 8004cfc:	f7ff ff8e 	bl	8004c1c <NVIC_EncodePriority>
 8004d00:	4602      	mov	r2, r0
 8004d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d06:	4611      	mov	r1, r2
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f7ff ff5d 	bl	8004bc8 <__NVIC_SetPriority>
}
 8004d0e:	bf00      	nop
 8004d10:	3718      	adds	r7, #24
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}

08004d16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d16:	b580      	push	{r7, lr}
 8004d18:	b082      	sub	sp, #8
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7ff ff31 	bl	8004b8c <__NVIC_EnableIRQ>
}
 8004d2a:	bf00      	nop
 8004d2c:	3708      	adds	r7, #8
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}

08004d32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d32:	b580      	push	{r7, lr}
 8004d34:	b082      	sub	sp, #8
 8004d36:	af00      	add	r7, sp, #0
 8004d38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff ffa2 	bl	8004c84 <SysTick_Config>
 8004d40:	4603      	mov	r3, r0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
	...

08004d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b089      	sub	sp, #36	; 0x24
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	61fb      	str	r3, [r7, #28]
 8004d66:	e165      	b.n	8005034 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d68:	2201      	movs	r2, #1
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	f040 8154 	bne.w	800502e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f003 0303 	and.w	r3, r3, #3
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d005      	beq.n	8004d9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d130      	bne.n	8004e00 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	005b      	lsls	r3, r3, #1
 8004da8:	2203      	movs	r2, #3
 8004daa:	fa02 f303 	lsl.w	r3, r2, r3
 8004dae:	43db      	mvns	r3, r3
 8004db0:	69ba      	ldr	r2, [r7, #24]
 8004db2:	4013      	ands	r3, r2
 8004db4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	68da      	ldr	r2, [r3, #12]
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	005b      	lsls	r3, r3, #1
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	69ba      	ldr	r2, [r7, #24]
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	f003 0201 	and.w	r2, r3, #1
 8004dee:	69fb      	ldr	r3, [r7, #28]
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	2b03      	cmp	r3, #3
 8004e0a:	d017      	beq.n	8004e3c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	005b      	lsls	r3, r3, #1
 8004e16:	2203      	movs	r2, #3
 8004e18:	fa02 f303 	lsl.w	r3, r2, r3
 8004e1c:	43db      	mvns	r3, r3
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	4013      	ands	r3, r2
 8004e22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	689a      	ldr	r2, [r3, #8]
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	005b      	lsls	r3, r3, #1
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	69ba      	ldr	r2, [r7, #24]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f003 0303 	and.w	r3, r3, #3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d123      	bne.n	8004e90 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	08da      	lsrs	r2, r3, #3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	3208      	adds	r2, #8
 8004e50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e54:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f003 0307 	and.w	r3, r3, #7
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	220f      	movs	r2, #15
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	f003 0307 	and.w	r3, r3, #7
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	08da      	lsrs	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	3208      	adds	r2, #8
 8004e8a:	69b9      	ldr	r1, [r7, #24]
 8004e8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	005b      	lsls	r3, r3, #1
 8004e9a:	2203      	movs	r2, #3
 8004e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea0:	43db      	mvns	r3, r3
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f003 0203 	and.w	r2, r3, #3
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	f000 80ae 	beq.w	800502e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	4b5d      	ldr	r3, [pc, #372]	; (800504c <HAL_GPIO_Init+0x300>)
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	4a5c      	ldr	r2, [pc, #368]	; (800504c <HAL_GPIO_Init+0x300>)
 8004edc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ee2:	4b5a      	ldr	r3, [pc, #360]	; (800504c <HAL_GPIO_Init+0x300>)
 8004ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eee:	4a58      	ldr	r2, [pc, #352]	; (8005050 <HAL_GPIO_Init+0x304>)
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	089b      	lsrs	r3, r3, #2
 8004ef4:	3302      	adds	r3, #2
 8004ef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f003 0303 	and.w	r3, r3, #3
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	220f      	movs	r2, #15
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a4f      	ldr	r2, [pc, #316]	; (8005054 <HAL_GPIO_Init+0x308>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d025      	beq.n	8004f66 <HAL_GPIO_Init+0x21a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a4e      	ldr	r2, [pc, #312]	; (8005058 <HAL_GPIO_Init+0x30c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d01f      	beq.n	8004f62 <HAL_GPIO_Init+0x216>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a4d      	ldr	r2, [pc, #308]	; (800505c <HAL_GPIO_Init+0x310>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d019      	beq.n	8004f5e <HAL_GPIO_Init+0x212>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a4c      	ldr	r2, [pc, #304]	; (8005060 <HAL_GPIO_Init+0x314>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <HAL_GPIO_Init+0x20e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a4b      	ldr	r2, [pc, #300]	; (8005064 <HAL_GPIO_Init+0x318>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00d      	beq.n	8004f56 <HAL_GPIO_Init+0x20a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a4a      	ldr	r2, [pc, #296]	; (8005068 <HAL_GPIO_Init+0x31c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d007      	beq.n	8004f52 <HAL_GPIO_Init+0x206>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a49      	ldr	r2, [pc, #292]	; (800506c <HAL_GPIO_Init+0x320>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d101      	bne.n	8004f4e <HAL_GPIO_Init+0x202>
 8004f4a:	2306      	movs	r3, #6
 8004f4c:	e00c      	b.n	8004f68 <HAL_GPIO_Init+0x21c>
 8004f4e:	2307      	movs	r3, #7
 8004f50:	e00a      	b.n	8004f68 <HAL_GPIO_Init+0x21c>
 8004f52:	2305      	movs	r3, #5
 8004f54:	e008      	b.n	8004f68 <HAL_GPIO_Init+0x21c>
 8004f56:	2304      	movs	r3, #4
 8004f58:	e006      	b.n	8004f68 <HAL_GPIO_Init+0x21c>
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e004      	b.n	8004f68 <HAL_GPIO_Init+0x21c>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e002      	b.n	8004f68 <HAL_GPIO_Init+0x21c>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_GPIO_Init+0x21c>
 8004f66:	2300      	movs	r3, #0
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	f002 0203 	and.w	r2, r2, #3
 8004f6e:	0092      	lsls	r2, r2, #2
 8004f70:	4093      	lsls	r3, r2
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f78:	4935      	ldr	r1, [pc, #212]	; (8005050 <HAL_GPIO_Init+0x304>)
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	089b      	lsrs	r3, r3, #2
 8004f7e:	3302      	adds	r3, #2
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f86:	4b3a      	ldr	r3, [pc, #232]	; (8005070 <HAL_GPIO_Init+0x324>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	43db      	mvns	r3, r3
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	4013      	ands	r3, r2
 8004f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d003      	beq.n	8004faa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004fa2:	69ba      	ldr	r2, [r7, #24]
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004faa:	4a31      	ldr	r2, [pc, #196]	; (8005070 <HAL_GPIO_Init+0x324>)
 8004fac:	69bb      	ldr	r3, [r7, #24]
 8004fae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fb0:	4b2f      	ldr	r3, [pc, #188]	; (8005070 <HAL_GPIO_Init+0x324>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fd4:	4a26      	ldr	r2, [pc, #152]	; (8005070 <HAL_GPIO_Init+0x324>)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fda:	4b25      	ldr	r3, [pc, #148]	; (8005070 <HAL_GPIO_Init+0x324>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	43db      	mvns	r3, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004ffe:	4a1c      	ldr	r2, [pc, #112]	; (8005070 <HAL_GPIO_Init+0x324>)
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005004:	4b1a      	ldr	r3, [pc, #104]	; (8005070 <HAL_GPIO_Init+0x324>)
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	43db      	mvns	r3, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4013      	ands	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	4313      	orrs	r3, r2
 8005026:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005028:	4a11      	ldr	r2, [pc, #68]	; (8005070 <HAL_GPIO_Init+0x324>)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	3301      	adds	r3, #1
 8005032:	61fb      	str	r3, [r7, #28]
 8005034:	69fb      	ldr	r3, [r7, #28]
 8005036:	2b0f      	cmp	r3, #15
 8005038:	f67f ae96 	bls.w	8004d68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800503c:	bf00      	nop
 800503e:	bf00      	nop
 8005040:	3724      	adds	r7, #36	; 0x24
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	40023800 	.word	0x40023800
 8005050:	40013800 	.word	0x40013800
 8005054:	40020000 	.word	0x40020000
 8005058:	40020400 	.word	0x40020400
 800505c:	40020800 	.word	0x40020800
 8005060:	40020c00 	.word	0x40020c00
 8005064:	40021000 	.word	0x40021000
 8005068:	40021400 	.word	0x40021400
 800506c:	40021800 	.word	0x40021800
 8005070:	40013c00 	.word	0x40013c00

08005074 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005074:	b480      	push	{r7}
 8005076:	b083      	sub	sp, #12
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	460b      	mov	r3, r1
 800507e:	807b      	strh	r3, [r7, #2]
 8005080:	4613      	mov	r3, r2
 8005082:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005084:	787b      	ldrb	r3, [r7, #1]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d003      	beq.n	8005092 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800508a:	887a      	ldrh	r2, [r7, #2]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005090:	e003      	b.n	800509a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005092:	887b      	ldrh	r3, [r7, #2]
 8005094:	041a      	lsls	r2, r3, #16
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	619a      	str	r2, [r3, #24]
}
 800509a:	bf00      	nop
 800509c:	370c      	adds	r7, #12
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
	...

080050a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b082      	sub	sp, #8
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	4603      	mov	r3, r0
 80050b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050b2:	4b08      	ldr	r3, [pc, #32]	; (80050d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050b4:	695a      	ldr	r2, [r3, #20]
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	4013      	ands	r3, r2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d006      	beq.n	80050cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050be:	4a05      	ldr	r2, [pc, #20]	; (80050d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050c0:	88fb      	ldrh	r3, [r7, #6]
 80050c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050c4:	88fb      	ldrh	r3, [r7, #6]
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fb fc68 	bl	800099c <HAL_GPIO_EXTI_Callback>
  }
}
 80050cc:	bf00      	nop
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	40013c00 	.word	0x40013c00

080050d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e0cc      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050ec:	4b68      	ldr	r3, [pc, #416]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	683a      	ldr	r2, [r7, #0]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d90c      	bls.n	8005114 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fa:	4b65      	ldr	r3, [pc, #404]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	b2d2      	uxtb	r2, r2
 8005100:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005102:	4b63      	ldr	r3, [pc, #396]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	683a      	ldr	r2, [r7, #0]
 800510c:	429a      	cmp	r2, r3
 800510e:	d001      	beq.n	8005114 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e0b8      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b00      	cmp	r3, #0
 800511e:	d020      	beq.n	8005162 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0304 	and.w	r3, r3, #4
 8005128:	2b00      	cmp	r3, #0
 800512a:	d005      	beq.n	8005138 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800512c:	4b59      	ldr	r3, [pc, #356]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	4a58      	ldr	r2, [pc, #352]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005136:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 0308 	and.w	r3, r3, #8
 8005140:	2b00      	cmp	r3, #0
 8005142:	d005      	beq.n	8005150 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005144:	4b53      	ldr	r3, [pc, #332]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	4a52      	ldr	r2, [pc, #328]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800514e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005150:	4b50      	ldr	r3, [pc, #320]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	494d      	ldr	r1, [pc, #308]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	4313      	orrs	r3, r2
 8005160:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d044      	beq.n	80051f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	2b01      	cmp	r3, #1
 8005174:	d107      	bne.n	8005186 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005176:	4b47      	ldr	r3, [pc, #284]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d119      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	e07f      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	2b02      	cmp	r3, #2
 800518c:	d003      	beq.n	8005196 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005192:	2b03      	cmp	r3, #3
 8005194:	d107      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005196:	4b3f      	ldr	r3, [pc, #252]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d109      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e06f      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051a6:	4b3b      	ldr	r3, [pc, #236]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e067      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051b6:	4b37      	ldr	r3, [pc, #220]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f023 0203 	bic.w	r2, r3, #3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	4934      	ldr	r1, [pc, #208]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 80051c4:	4313      	orrs	r3, r2
 80051c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051c8:	f7ff fc7e 	bl	8004ac8 <HAL_GetTick>
 80051cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ce:	e00a      	b.n	80051e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051d0:	f7ff fc7a 	bl	8004ac8 <HAL_GetTick>
 80051d4:	4602      	mov	r2, r0
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	f241 3288 	movw	r2, #5000	; 0x1388
 80051de:	4293      	cmp	r3, r2
 80051e0:	d901      	bls.n	80051e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	e04f      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051e6:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 020c 	and.w	r2, r3, #12
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d1eb      	bne.n	80051d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051f8:	4b25      	ldr	r3, [pc, #148]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d20c      	bcs.n	8005220 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005206:	4b22      	ldr	r3, [pc, #136]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800520e:	4b20      	ldr	r3, [pc, #128]	; (8005290 <HAL_RCC_ClockConfig+0x1b8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d001      	beq.n	8005220 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e032      	b.n	8005286 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0304 	and.w	r3, r3, #4
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	4916      	ldr	r1, [pc, #88]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0308 	and.w	r3, r3, #8
 8005246:	2b00      	cmp	r3, #0
 8005248:	d009      	beq.n	800525e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800524a:	4b12      	ldr	r3, [pc, #72]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	00db      	lsls	r3, r3, #3
 8005258:	490e      	ldr	r1, [pc, #56]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	4313      	orrs	r3, r2
 800525c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800525e:	f000 f855 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8005262:	4602      	mov	r2, r0
 8005264:	4b0b      	ldr	r3, [pc, #44]	; (8005294 <HAL_RCC_ClockConfig+0x1bc>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	091b      	lsrs	r3, r3, #4
 800526a:	f003 030f 	and.w	r3, r3, #15
 800526e:	490a      	ldr	r1, [pc, #40]	; (8005298 <HAL_RCC_ClockConfig+0x1c0>)
 8005270:	5ccb      	ldrb	r3, [r1, r3]
 8005272:	fa22 f303 	lsr.w	r3, r2, r3
 8005276:	4a09      	ldr	r2, [pc, #36]	; (800529c <HAL_RCC_ClockConfig+0x1c4>)
 8005278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800527a:	4b09      	ldr	r3, [pc, #36]	; (80052a0 <HAL_RCC_ClockConfig+0x1c8>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff fbde 	bl	8004a40 <HAL_InitTick>

  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40023c00 	.word	0x40023c00
 8005294:	40023800 	.word	0x40023800
 8005298:	080066b8 	.word	0x080066b8
 800529c:	20000004 	.word	0x20000004
 80052a0:	2000000c 	.word	0x2000000c

080052a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a8:	4b03      	ldr	r3, [pc, #12]	; (80052b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052aa:	681b      	ldr	r3, [r3, #0]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000004 	.word	0x20000004

080052bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052c0:	f7ff fff0 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b05      	ldr	r3, [pc, #20]	; (80052dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	0a9b      	lsrs	r3, r3, #10
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4903      	ldr	r1, [pc, #12]	; (80052e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40023800 	.word	0x40023800
 80052e0:	080066c8 	.word	0x080066c8

080052e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80052e8:	f7ff ffdc 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052ec:	4602      	mov	r2, r0
 80052ee:	4b05      	ldr	r3, [pc, #20]	; (8005304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	0b5b      	lsrs	r3, r3, #13
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	4903      	ldr	r1, [pc, #12]	; (8005308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052fa:	5ccb      	ldrb	r3, [r1, r3]
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40023800 	.word	0x40023800
 8005308:	080066c8 	.word	0x080066c8

0800530c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800530c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005310:	b088      	sub	sp, #32
 8005312:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005314:	2300      	movs	r3, #0
 8005316:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800531c:	2300      	movs	r3, #0
 800531e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8005324:	2300      	movs	r3, #0
 8005326:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005328:	4bce      	ldr	r3, [pc, #824]	; (8005664 <HAL_RCC_GetSysClockFreq+0x358>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 030c 	and.w	r3, r3, #12
 8005330:	2b0c      	cmp	r3, #12
 8005332:	f200 818d 	bhi.w	8005650 <HAL_RCC_GetSysClockFreq+0x344>
 8005336:	a201      	add	r2, pc, #4	; (adr r2, 800533c <HAL_RCC_GetSysClockFreq+0x30>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005371 	.word	0x08005371
 8005340:	08005651 	.word	0x08005651
 8005344:	08005651 	.word	0x08005651
 8005348:	08005651 	.word	0x08005651
 800534c:	08005377 	.word	0x08005377
 8005350:	08005651 	.word	0x08005651
 8005354:	08005651 	.word	0x08005651
 8005358:	08005651 	.word	0x08005651
 800535c:	0800537d 	.word	0x0800537d
 8005360:	08005651 	.word	0x08005651
 8005364:	08005651 	.word	0x08005651
 8005368:	08005651 	.word	0x08005651
 800536c:	080054f1 	.word	0x080054f1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005370:	4bbd      	ldr	r3, [pc, #756]	; (8005668 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005372:	61bb      	str	r3, [r7, #24]
       break;
 8005374:	e16f      	b.n	8005656 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005376:	4bbd      	ldr	r3, [pc, #756]	; (800566c <HAL_RCC_GetSysClockFreq+0x360>)
 8005378:	61bb      	str	r3, [r7, #24]
      break;
 800537a:	e16c      	b.n	8005656 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800537c:	4bb9      	ldr	r3, [pc, #740]	; (8005664 <HAL_RCC_GetSysClockFreq+0x358>)
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005384:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005386:	4bb7      	ldr	r3, [pc, #732]	; (8005664 <HAL_RCC_GetSysClockFreq+0x358>)
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d053      	beq.n	800543a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005392:	4bb4      	ldr	r3, [pc, #720]	; (8005664 <HAL_RCC_GetSysClockFreq+0x358>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	099b      	lsrs	r3, r3, #6
 8005398:	461a      	mov	r2, r3
 800539a:	f04f 0300 	mov.w	r3, #0
 800539e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80053a2:	f04f 0100 	mov.w	r1, #0
 80053a6:	ea02 0400 	and.w	r4, r2, r0
 80053aa:	603c      	str	r4, [r7, #0]
 80053ac:	400b      	ands	r3, r1
 80053ae:	607b      	str	r3, [r7, #4]
 80053b0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053b4:	4620      	mov	r0, r4
 80053b6:	4629      	mov	r1, r5
 80053b8:	f04f 0200 	mov.w	r2, #0
 80053bc:	f04f 0300 	mov.w	r3, #0
 80053c0:	014b      	lsls	r3, r1, #5
 80053c2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80053c6:	0142      	lsls	r2, r0, #5
 80053c8:	4610      	mov	r0, r2
 80053ca:	4619      	mov	r1, r3
 80053cc:	4623      	mov	r3, r4
 80053ce:	1ac0      	subs	r0, r0, r3
 80053d0:	462b      	mov	r3, r5
 80053d2:	eb61 0103 	sbc.w	r1, r1, r3
 80053d6:	f04f 0200 	mov.w	r2, #0
 80053da:	f04f 0300 	mov.w	r3, #0
 80053de:	018b      	lsls	r3, r1, #6
 80053e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80053e4:	0182      	lsls	r2, r0, #6
 80053e6:	1a12      	subs	r2, r2, r0
 80053e8:	eb63 0301 	sbc.w	r3, r3, r1
 80053ec:	f04f 0000 	mov.w	r0, #0
 80053f0:	f04f 0100 	mov.w	r1, #0
 80053f4:	00d9      	lsls	r1, r3, #3
 80053f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80053fa:	00d0      	lsls	r0, r2, #3
 80053fc:	4602      	mov	r2, r0
 80053fe:	460b      	mov	r3, r1
 8005400:	4621      	mov	r1, r4
 8005402:	1852      	adds	r2, r2, r1
 8005404:	4629      	mov	r1, r5
 8005406:	eb43 0101 	adc.w	r1, r3, r1
 800540a:	460b      	mov	r3, r1
 800540c:	f04f 0000 	mov.w	r0, #0
 8005410:	f04f 0100 	mov.w	r1, #0
 8005414:	0259      	lsls	r1, r3, #9
 8005416:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800541a:	0250      	lsls	r0, r2, #9
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4610      	mov	r0, r2
 8005422:	4619      	mov	r1, r3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	461a      	mov	r2, r3
 8005428:	f04f 0300 	mov.w	r3, #0
 800542c:	f7fa feea 	bl	8000204 <__aeabi_uldivmod>
 8005430:	4602      	mov	r2, r0
 8005432:	460b      	mov	r3, r1
 8005434:	4613      	mov	r3, r2
 8005436:	61fb      	str	r3, [r7, #28]
 8005438:	e04c      	b.n	80054d4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800543a:	4b8a      	ldr	r3, [pc, #552]	; (8005664 <HAL_RCC_GetSysClockFreq+0x358>)
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	099b      	lsrs	r3, r3, #6
 8005440:	461a      	mov	r2, r3
 8005442:	f04f 0300 	mov.w	r3, #0
 8005446:	f240 10ff 	movw	r0, #511	; 0x1ff
 800544a:	f04f 0100 	mov.w	r1, #0
 800544e:	ea02 0a00 	and.w	sl, r2, r0
 8005452:	ea03 0b01 	and.w	fp, r3, r1
 8005456:	4650      	mov	r0, sl
 8005458:	4659      	mov	r1, fp
 800545a:	f04f 0200 	mov.w	r2, #0
 800545e:	f04f 0300 	mov.w	r3, #0
 8005462:	014b      	lsls	r3, r1, #5
 8005464:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005468:	0142      	lsls	r2, r0, #5
 800546a:	4610      	mov	r0, r2
 800546c:	4619      	mov	r1, r3
 800546e:	ebb0 000a 	subs.w	r0, r0, sl
 8005472:	eb61 010b 	sbc.w	r1, r1, fp
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	018b      	lsls	r3, r1, #6
 8005480:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005484:	0182      	lsls	r2, r0, #6
 8005486:	1a12      	subs	r2, r2, r0
 8005488:	eb63 0301 	sbc.w	r3, r3, r1
 800548c:	f04f 0000 	mov.w	r0, #0
 8005490:	f04f 0100 	mov.w	r1, #0
 8005494:	00d9      	lsls	r1, r3, #3
 8005496:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800549a:	00d0      	lsls	r0, r2, #3
 800549c:	4602      	mov	r2, r0
 800549e:	460b      	mov	r3, r1
 80054a0:	eb12 020a 	adds.w	r2, r2, sl
 80054a4:	eb43 030b 	adc.w	r3, r3, fp
 80054a8:	f04f 0000 	mov.w	r0, #0
 80054ac:	f04f 0100 	mov.w	r1, #0
 80054b0:	0299      	lsls	r1, r3, #10
 80054b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80054b6:	0290      	lsls	r0, r2, #10
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	4610      	mov	r0, r2
 80054be:	4619      	mov	r1, r3
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	f7fa fe9c 	bl	8000204 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4613      	mov	r3, r2
 80054d2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80054d4:	4b63      	ldr	r3, [pc, #396]	; (8005664 <HAL_RCC_GetSysClockFreq+0x358>)
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	0c1b      	lsrs	r3, r3, #16
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	3301      	adds	r3, #1
 80054e0:	005b      	lsls	r3, r3, #1
 80054e2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	61bb      	str	r3, [r7, #24]
      break;
 80054ee:	e0b2      	b.n	8005656 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054f0:	4b5c      	ldr	r3, [pc, #368]	; (8005664 <HAL_RCC_GetSysClockFreq+0x358>)
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054f8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054fa:	4b5a      	ldr	r3, [pc, #360]	; (8005664 <HAL_RCC_GetSysClockFreq+0x358>)
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d04d      	beq.n	80055a2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005506:	4b57      	ldr	r3, [pc, #348]	; (8005664 <HAL_RCC_GetSysClockFreq+0x358>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	099b      	lsrs	r3, r3, #6
 800550c:	461a      	mov	r2, r3
 800550e:	f04f 0300 	mov.w	r3, #0
 8005512:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005516:	f04f 0100 	mov.w	r1, #0
 800551a:	ea02 0800 	and.w	r8, r2, r0
 800551e:	ea03 0901 	and.w	r9, r3, r1
 8005522:	4640      	mov	r0, r8
 8005524:	4649      	mov	r1, r9
 8005526:	f04f 0200 	mov.w	r2, #0
 800552a:	f04f 0300 	mov.w	r3, #0
 800552e:	014b      	lsls	r3, r1, #5
 8005530:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005534:	0142      	lsls	r2, r0, #5
 8005536:	4610      	mov	r0, r2
 8005538:	4619      	mov	r1, r3
 800553a:	ebb0 0008 	subs.w	r0, r0, r8
 800553e:	eb61 0109 	sbc.w	r1, r1, r9
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	018b      	lsls	r3, r1, #6
 800554c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005550:	0182      	lsls	r2, r0, #6
 8005552:	1a12      	subs	r2, r2, r0
 8005554:	eb63 0301 	sbc.w	r3, r3, r1
 8005558:	f04f 0000 	mov.w	r0, #0
 800555c:	f04f 0100 	mov.w	r1, #0
 8005560:	00d9      	lsls	r1, r3, #3
 8005562:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005566:	00d0      	lsls	r0, r2, #3
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	eb12 0208 	adds.w	r2, r2, r8
 8005570:	eb43 0309 	adc.w	r3, r3, r9
 8005574:	f04f 0000 	mov.w	r0, #0
 8005578:	f04f 0100 	mov.w	r1, #0
 800557c:	0259      	lsls	r1, r3, #9
 800557e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005582:	0250      	lsls	r0, r2, #9
 8005584:	4602      	mov	r2, r0
 8005586:	460b      	mov	r3, r1
 8005588:	4610      	mov	r0, r2
 800558a:	4619      	mov	r1, r3
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	461a      	mov	r2, r3
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	f7fa fe36 	bl	8000204 <__aeabi_uldivmod>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4613      	mov	r3, r2
 800559e:	61fb      	str	r3, [r7, #28]
 80055a0:	e04a      	b.n	8005638 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055a2:	4b30      	ldr	r3, [pc, #192]	; (8005664 <HAL_RCC_GetSysClockFreq+0x358>)
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	099b      	lsrs	r3, r3, #6
 80055a8:	461a      	mov	r2, r3
 80055aa:	f04f 0300 	mov.w	r3, #0
 80055ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80055b2:	f04f 0100 	mov.w	r1, #0
 80055b6:	ea02 0400 	and.w	r4, r2, r0
 80055ba:	ea03 0501 	and.w	r5, r3, r1
 80055be:	4620      	mov	r0, r4
 80055c0:	4629      	mov	r1, r5
 80055c2:	f04f 0200 	mov.w	r2, #0
 80055c6:	f04f 0300 	mov.w	r3, #0
 80055ca:	014b      	lsls	r3, r1, #5
 80055cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80055d0:	0142      	lsls	r2, r0, #5
 80055d2:	4610      	mov	r0, r2
 80055d4:	4619      	mov	r1, r3
 80055d6:	1b00      	subs	r0, r0, r4
 80055d8:	eb61 0105 	sbc.w	r1, r1, r5
 80055dc:	f04f 0200 	mov.w	r2, #0
 80055e0:	f04f 0300 	mov.w	r3, #0
 80055e4:	018b      	lsls	r3, r1, #6
 80055e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055ea:	0182      	lsls	r2, r0, #6
 80055ec:	1a12      	subs	r2, r2, r0
 80055ee:	eb63 0301 	sbc.w	r3, r3, r1
 80055f2:	f04f 0000 	mov.w	r0, #0
 80055f6:	f04f 0100 	mov.w	r1, #0
 80055fa:	00d9      	lsls	r1, r3, #3
 80055fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005600:	00d0      	lsls	r0, r2, #3
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	1912      	adds	r2, r2, r4
 8005608:	eb45 0303 	adc.w	r3, r5, r3
 800560c:	f04f 0000 	mov.w	r0, #0
 8005610:	f04f 0100 	mov.w	r1, #0
 8005614:	0299      	lsls	r1, r3, #10
 8005616:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800561a:	0290      	lsls	r0, r2, #10
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4610      	mov	r0, r2
 8005622:	4619      	mov	r1, r3
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	461a      	mov	r2, r3
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	f7fa fdea 	bl	8000204 <__aeabi_uldivmod>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4613      	mov	r3, r2
 8005636:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8005638:	4b0a      	ldr	r3, [pc, #40]	; (8005664 <HAL_RCC_GetSysClockFreq+0x358>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	0f1b      	lsrs	r3, r3, #28
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8005644:	69fa      	ldr	r2, [r7, #28]
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	fbb2 f3f3 	udiv	r3, r2, r3
 800564c:	61bb      	str	r3, [r7, #24]
      break;
 800564e:	e002      	b.n	8005656 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <HAL_RCC_GetSysClockFreq+0x35c>)
 8005652:	61bb      	str	r3, [r7, #24]
      break;
 8005654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005656:	69bb      	ldr	r3, [r7, #24]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3720      	adds	r7, #32
 800565c:	46bd      	mov	sp, r7
 800565e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005662:	bf00      	nop
 8005664:	40023800 	.word	0x40023800
 8005668:	00f42400 	.word	0x00f42400
 800566c:	007a1200 	.word	0x007a1200

08005670 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b086      	sub	sp, #24
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e28d      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	f000 8083 	beq.w	8005796 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8005690:	4b94      	ldr	r3, [pc, #592]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f003 030c 	and.w	r3, r3, #12
 8005698:	2b04      	cmp	r3, #4
 800569a:	d019      	beq.n	80056d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800569c:	4b91      	ldr	r3, [pc, #580]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 800569e:	689b      	ldr	r3, [r3, #8]
 80056a0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80056a4:	2b08      	cmp	r3, #8
 80056a6:	d106      	bne.n	80056b6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056a8:	4b8e      	ldr	r3, [pc, #568]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056b4:	d00c      	beq.n	80056d0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056b6:	4b8b      	ldr	r3, [pc, #556]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80056be:	2b0c      	cmp	r3, #12
 80056c0:	d112      	bne.n	80056e8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80056c2:	4b88      	ldr	r3, [pc, #544]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80056ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056ce:	d10b      	bne.n	80056e8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d0:	4b84      	ldr	r3, [pc, #528]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d05b      	beq.n	8005794 <HAL_RCC_OscConfig+0x124>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d157      	bne.n	8005794 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e25a      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f0:	d106      	bne.n	8005700 <HAL_RCC_OscConfig+0x90>
 80056f2:	4b7c      	ldr	r3, [pc, #496]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a7b      	ldr	r2, [pc, #492]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80056f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056fc:	6013      	str	r3, [r2, #0]
 80056fe:	e01d      	b.n	800573c <HAL_RCC_OscConfig+0xcc>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005708:	d10c      	bne.n	8005724 <HAL_RCC_OscConfig+0xb4>
 800570a:	4b76      	ldr	r3, [pc, #472]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a75      	ldr	r2, [pc, #468]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005710:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005714:	6013      	str	r3, [r2, #0]
 8005716:	4b73      	ldr	r3, [pc, #460]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a72      	ldr	r2, [pc, #456]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 800571c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	e00b      	b.n	800573c <HAL_RCC_OscConfig+0xcc>
 8005724:	4b6f      	ldr	r3, [pc, #444]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a6e      	ldr	r2, [pc, #440]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 800572a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800572e:	6013      	str	r3, [r2, #0]
 8005730:	4b6c      	ldr	r3, [pc, #432]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a6b      	ldr	r2, [pc, #428]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800573a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d013      	beq.n	800576c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005744:	f7ff f9c0 	bl	8004ac8 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800574c:	f7ff f9bc 	bl	8004ac8 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b64      	cmp	r3, #100	; 0x64
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e21f      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800575e:	4b61      	ldr	r3, [pc, #388]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005766:	2b00      	cmp	r3, #0
 8005768:	d0f0      	beq.n	800574c <HAL_RCC_OscConfig+0xdc>
 800576a:	e014      	b.n	8005796 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7ff f9ac 	bl	8004ac8 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005774:	f7ff f9a8 	bl	8004ac8 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b64      	cmp	r3, #100	; 0x64
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e20b      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005786:	4b57      	ldr	r3, [pc, #348]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x104>
 8005792:	e000      	b.n	8005796 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d06f      	beq.n	8005882 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057a2:	4b50      	ldr	r3, [pc, #320]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	f003 030c 	and.w	r3, r3, #12
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d017      	beq.n	80057de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057ae:	4b4d      	ldr	r3, [pc, #308]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80057b6:	2b08      	cmp	r3, #8
 80057b8:	d105      	bne.n	80057c6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057ba:	4b4a      	ldr	r3, [pc, #296]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d00b      	beq.n	80057de <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057c6:	4b47      	ldr	r3, [pc, #284]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80057ce:	2b0c      	cmp	r3, #12
 80057d0:	d11c      	bne.n	800580c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80057d2:	4b44      	ldr	r3, [pc, #272]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d116      	bne.n	800580c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80057de:	4b41      	ldr	r3, [pc, #260]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d005      	beq.n	80057f6 <HAL_RCC_OscConfig+0x186>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	d001      	beq.n	80057f6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e1d3      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057f6:	4b3b      	ldr	r3, [pc, #236]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	4937      	ldr	r1, [pc, #220]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005806:	4313      	orrs	r3, r2
 8005808:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800580a:	e03a      	b.n	8005882 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d020      	beq.n	8005856 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005814:	4b34      	ldr	r3, [pc, #208]	; (80058e8 <HAL_RCC_OscConfig+0x278>)
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800581a:	f7ff f955 	bl	8004ac8 <HAL_GetTick>
 800581e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005820:	e008      	b.n	8005834 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005822:	f7ff f951 	bl	8004ac8 <HAL_GetTick>
 8005826:	4602      	mov	r2, r0
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	1ad3      	subs	r3, r2, r3
 800582c:	2b02      	cmp	r3, #2
 800582e:	d901      	bls.n	8005834 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e1b4      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005834:	4b2b      	ldr	r3, [pc, #172]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0302 	and.w	r3, r3, #2
 800583c:	2b00      	cmp	r3, #0
 800583e:	d0f0      	beq.n	8005822 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005840:	4b28      	ldr	r3, [pc, #160]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	691b      	ldr	r3, [r3, #16]
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4925      	ldr	r1, [pc, #148]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005850:	4313      	orrs	r3, r2
 8005852:	600b      	str	r3, [r1, #0]
 8005854:	e015      	b.n	8005882 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005856:	4b24      	ldr	r3, [pc, #144]	; (80058e8 <HAL_RCC_OscConfig+0x278>)
 8005858:	2200      	movs	r2, #0
 800585a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800585c:	f7ff f934 	bl	8004ac8 <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005862:	e008      	b.n	8005876 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005864:	f7ff f930 	bl	8004ac8 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	2b02      	cmp	r3, #2
 8005870:	d901      	bls.n	8005876 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005872:	2303      	movs	r3, #3
 8005874:	e193      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005876:	4b1b      	ldr	r3, [pc, #108]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1f0      	bne.n	8005864 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b00      	cmp	r3, #0
 800588c:	d036      	beq.n	80058fc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d016      	beq.n	80058c4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005896:	4b15      	ldr	r3, [pc, #84]	; (80058ec <HAL_RCC_OscConfig+0x27c>)
 8005898:	2201      	movs	r2, #1
 800589a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589c:	f7ff f914 	bl	8004ac8 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058a4:	f7ff f910 	bl	8004ac8 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e173      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80058b6:	4b0b      	ldr	r3, [pc, #44]	; (80058e4 <HAL_RCC_OscConfig+0x274>)
 80058b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d0f0      	beq.n	80058a4 <HAL_RCC_OscConfig+0x234>
 80058c2:	e01b      	b.n	80058fc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058c4:	4b09      	ldr	r3, [pc, #36]	; (80058ec <HAL_RCC_OscConfig+0x27c>)
 80058c6:	2200      	movs	r2, #0
 80058c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ca:	f7ff f8fd 	bl	8004ac8 <HAL_GetTick>
 80058ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058d0:	e00e      	b.n	80058f0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80058d2:	f7ff f8f9 	bl	8004ac8 <HAL_GetTick>
 80058d6:	4602      	mov	r2, r0
 80058d8:	693b      	ldr	r3, [r7, #16]
 80058da:	1ad3      	subs	r3, r2, r3
 80058dc:	2b02      	cmp	r3, #2
 80058de:	d907      	bls.n	80058f0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80058e0:	2303      	movs	r3, #3
 80058e2:	e15c      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
 80058e4:	40023800 	.word	0x40023800
 80058e8:	42470000 	.word	0x42470000
 80058ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80058f0:	4b8a      	ldr	r3, [pc, #552]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 80058f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d1ea      	bne.n	80058d2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	f000 8097 	beq.w	8005a38 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800590a:	2300      	movs	r3, #0
 800590c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800590e:	4b83      	ldr	r3, [pc, #524]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10f      	bne.n	800593a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800591a:	2300      	movs	r3, #0
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	4b7f      	ldr	r3, [pc, #508]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	4a7e      	ldr	r2, [pc, #504]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005928:	6413      	str	r3, [r2, #64]	; 0x40
 800592a:	4b7c      	ldr	r3, [pc, #496]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005932:	60bb      	str	r3, [r7, #8]
 8005934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005936:	2301      	movs	r3, #1
 8005938:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800593a:	4b79      	ldr	r3, [pc, #484]	; (8005b20 <HAL_RCC_OscConfig+0x4b0>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005942:	2b00      	cmp	r3, #0
 8005944:	d118      	bne.n	8005978 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005946:	4b76      	ldr	r3, [pc, #472]	; (8005b20 <HAL_RCC_OscConfig+0x4b0>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a75      	ldr	r2, [pc, #468]	; (8005b20 <HAL_RCC_OscConfig+0x4b0>)
 800594c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005952:	f7ff f8b9 	bl	8004ac8 <HAL_GetTick>
 8005956:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005958:	e008      	b.n	800596c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800595a:	f7ff f8b5 	bl	8004ac8 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	2b02      	cmp	r3, #2
 8005966:	d901      	bls.n	800596c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005968:	2303      	movs	r3, #3
 800596a:	e118      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800596c:	4b6c      	ldr	r3, [pc, #432]	; (8005b20 <HAL_RCC_OscConfig+0x4b0>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005974:	2b00      	cmp	r3, #0
 8005976:	d0f0      	beq.n	800595a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d106      	bne.n	800598e <HAL_RCC_OscConfig+0x31e>
 8005980:	4b66      	ldr	r3, [pc, #408]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005984:	4a65      	ldr	r2, [pc, #404]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	6713      	str	r3, [r2, #112]	; 0x70
 800598c:	e01c      	b.n	80059c8 <HAL_RCC_OscConfig+0x358>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	2b05      	cmp	r3, #5
 8005994:	d10c      	bne.n	80059b0 <HAL_RCC_OscConfig+0x340>
 8005996:	4b61      	ldr	r3, [pc, #388]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800599a:	4a60      	ldr	r2, [pc, #384]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 800599c:	f043 0304 	orr.w	r3, r3, #4
 80059a0:	6713      	str	r3, [r2, #112]	; 0x70
 80059a2:	4b5e      	ldr	r3, [pc, #376]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 80059a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059a6:	4a5d      	ldr	r2, [pc, #372]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 80059a8:	f043 0301 	orr.w	r3, r3, #1
 80059ac:	6713      	str	r3, [r2, #112]	; 0x70
 80059ae:	e00b      	b.n	80059c8 <HAL_RCC_OscConfig+0x358>
 80059b0:	4b5a      	ldr	r3, [pc, #360]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 80059b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b4:	4a59      	ldr	r2, [pc, #356]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 80059b6:	f023 0301 	bic.w	r3, r3, #1
 80059ba:	6713      	str	r3, [r2, #112]	; 0x70
 80059bc:	4b57      	ldr	r3, [pc, #348]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 80059be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059c0:	4a56      	ldr	r2, [pc, #344]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 80059c2:	f023 0304 	bic.w	r3, r3, #4
 80059c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d015      	beq.n	80059fc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059d0:	f7ff f87a 	bl	8004ac8 <HAL_GetTick>
 80059d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059d6:	e00a      	b.n	80059ee <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80059d8:	f7ff f876 	bl	8004ac8 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e0d7      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80059ee:	4b4b      	ldr	r3, [pc, #300]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 80059f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059f2:	f003 0302 	and.w	r3, r3, #2
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d0ee      	beq.n	80059d8 <HAL_RCC_OscConfig+0x368>
 80059fa:	e014      	b.n	8005a26 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059fc:	f7ff f864 	bl	8004ac8 <HAL_GetTick>
 8005a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a02:	e00a      	b.n	8005a1a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a04:	f7ff f860 	bl	8004ac8 <HAL_GetTick>
 8005a08:	4602      	mov	r2, r0
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d901      	bls.n	8005a1a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8005a16:	2303      	movs	r3, #3
 8005a18:	e0c1      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005a1a:	4b40      	ldr	r3, [pc, #256]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a1e:	f003 0302 	and.w	r3, r3, #2
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1ee      	bne.n	8005a04 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a26:	7dfb      	ldrb	r3, [r7, #23]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d105      	bne.n	8005a38 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a2c:	4b3b      	ldr	r3, [pc, #236]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a30:	4a3a      	ldr	r2, [pc, #232]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005a32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a36:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	699b      	ldr	r3, [r3, #24]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 80ad 	beq.w	8005b9c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a42:	4b36      	ldr	r3, [pc, #216]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005a44:	689b      	ldr	r3, [r3, #8]
 8005a46:	f003 030c 	and.w	r3, r3, #12
 8005a4a:	2b08      	cmp	r3, #8
 8005a4c:	d060      	beq.n	8005b10 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d145      	bne.n	8005ae2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a56:	4b33      	ldr	r3, [pc, #204]	; (8005b24 <HAL_RCC_OscConfig+0x4b4>)
 8005a58:	2200      	movs	r2, #0
 8005a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a5c:	f7ff f834 	bl	8004ac8 <HAL_GetTick>
 8005a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a62:	e008      	b.n	8005a76 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a64:	f7ff f830 	bl	8004ac8 <HAL_GetTick>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	1ad3      	subs	r3, r2, r3
 8005a6e:	2b02      	cmp	r3, #2
 8005a70:	d901      	bls.n	8005a76 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e093      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005a76:	4b29      	ldr	r3, [pc, #164]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d1f0      	bne.n	8005a64 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	69da      	ldr	r2, [r3, #28]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6a1b      	ldr	r3, [r3, #32]
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	019b      	lsls	r3, r3, #6
 8005a92:	431a      	orrs	r2, r3
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a98:	085b      	lsrs	r3, r3, #1
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	041b      	lsls	r3, r3, #16
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa4:	061b      	lsls	r3, r3, #24
 8005aa6:	431a      	orrs	r2, r3
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aac:	071b      	lsls	r3, r3, #28
 8005aae:	491b      	ldr	r1, [pc, #108]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005ab4:	4b1b      	ldr	r3, [pc, #108]	; (8005b24 <HAL_RCC_OscConfig+0x4b4>)
 8005ab6:	2201      	movs	r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aba:	f7ff f805 	bl	8004ac8 <HAL_GetTick>
 8005abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ac0:	e008      	b.n	8005ad4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac2:	f7ff f801 	bl	8004ac8 <HAL_GetTick>
 8005ac6:	4602      	mov	r2, r0
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	1ad3      	subs	r3, r2, r3
 8005acc:	2b02      	cmp	r3, #2
 8005ace:	d901      	bls.n	8005ad4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e064      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ad4:	4b11      	ldr	r3, [pc, #68]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d0f0      	beq.n	8005ac2 <HAL_RCC_OscConfig+0x452>
 8005ae0:	e05c      	b.n	8005b9c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ae2:	4b10      	ldr	r3, [pc, #64]	; (8005b24 <HAL_RCC_OscConfig+0x4b4>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fe ffee 	bl	8004ac8 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005af0:	f7fe ffea 	bl	8004ac8 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e04d      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b02:	4b06      	ldr	r3, [pc, #24]	; (8005b1c <HAL_RCC_OscConfig+0x4ac>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f0      	bne.n	8005af0 <HAL_RCC_OscConfig+0x480>
 8005b0e:	e045      	b.n	8005b9c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	d107      	bne.n	8005b28 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e040      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
 8005b1c:	40023800 	.word	0x40023800
 8005b20:	40007000 	.word	0x40007000
 8005b24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005b28:	4b1f      	ldr	r3, [pc, #124]	; (8005ba8 <HAL_RCC_OscConfig+0x538>)
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	2b01      	cmp	r3, #1
 8005b34:	d030      	beq.n	8005b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d129      	bne.n	8005b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d122      	bne.n	8005b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005b58:	4013      	ands	r3, r2
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005b5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d119      	bne.n	8005b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b6e:	085b      	lsrs	r3, r3, #1
 8005b70:	3b01      	subs	r3, #1
 8005b72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005b74:	429a      	cmp	r2, r3
 8005b76:	d10f      	bne.n	8005b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d107      	bne.n	8005b98 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b92:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d001      	beq.n	8005b9c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e000      	b.n	8005b9e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005b9c:	2300      	movs	r3, #0
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	3718      	adds	r7, #24
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40023800 	.word	0x40023800

08005bac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e041      	b.n	8005c42 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d106      	bne.n	8005bd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2200      	movs	r2, #0
 8005bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fa ff2a 	bl	8000a2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2202      	movs	r2, #2
 8005bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f000 f95e 	bl	8005eac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2201      	movs	r2, #1
 8005bf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	2201      	movs	r2, #1
 8005bfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2201      	movs	r2, #1
 8005c34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3708      	adds	r7, #8
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
	...

08005c4c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d001      	beq.n	8005c64 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e046      	b.n	8005cf2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2202      	movs	r2, #2
 8005c68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4a23      	ldr	r2, [pc, #140]	; (8005d00 <HAL_TIM_Base_Start+0xb4>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d022      	beq.n	8005cbc <HAL_TIM_Base_Start+0x70>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c7e:	d01d      	beq.n	8005cbc <HAL_TIM_Base_Start+0x70>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	4a1f      	ldr	r2, [pc, #124]	; (8005d04 <HAL_TIM_Base_Start+0xb8>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d018      	beq.n	8005cbc <HAL_TIM_Base_Start+0x70>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a1e      	ldr	r2, [pc, #120]	; (8005d08 <HAL_TIM_Base_Start+0xbc>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d013      	beq.n	8005cbc <HAL_TIM_Base_Start+0x70>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a1c      	ldr	r2, [pc, #112]	; (8005d0c <HAL_TIM_Base_Start+0xc0>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d00e      	beq.n	8005cbc <HAL_TIM_Base_Start+0x70>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <HAL_TIM_Base_Start+0xc4>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d009      	beq.n	8005cbc <HAL_TIM_Base_Start+0x70>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a19      	ldr	r2, [pc, #100]	; (8005d14 <HAL_TIM_Base_Start+0xc8>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d004      	beq.n	8005cbc <HAL_TIM_Base_Start+0x70>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a18      	ldr	r2, [pc, #96]	; (8005d18 <HAL_TIM_Base_Start+0xcc>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d111      	bne.n	8005ce0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f003 0307 	and.w	r3, r3, #7
 8005cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b06      	cmp	r3, #6
 8005ccc:	d010      	beq.n	8005cf0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f042 0201 	orr.w	r2, r2, #1
 8005cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cde:	e007      	b.n	8005cf0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f042 0201 	orr.w	r2, r2, #1
 8005cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40010000 	.word	0x40010000
 8005d04:	40000400 	.word	0x40000400
 8005d08:	40000800 	.word	0x40000800
 8005d0c:	40000c00 	.word	0x40000c00
 8005d10:	40010400 	.word	0x40010400
 8005d14:	40014000 	.word	0x40014000
 8005d18:	40001800 	.word	0x40001800

08005d1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d101      	bne.n	8005d38 <HAL_TIM_ConfigClockSource+0x1c>
 8005d34:	2302      	movs	r3, #2
 8005d36:	e0b4      	b.n	8005ea2 <HAL_TIM_ConfigClockSource+0x186>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68ba      	ldr	r2, [r7, #8]
 8005d66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d70:	d03e      	beq.n	8005df0 <HAL_TIM_ConfigClockSource+0xd4>
 8005d72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d76:	f200 8087 	bhi.w	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7e:	f000 8086 	beq.w	8005e8e <HAL_TIM_ConfigClockSource+0x172>
 8005d82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d86:	d87f      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d88:	2b70      	cmp	r3, #112	; 0x70
 8005d8a:	d01a      	beq.n	8005dc2 <HAL_TIM_ConfigClockSource+0xa6>
 8005d8c:	2b70      	cmp	r3, #112	; 0x70
 8005d8e:	d87b      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d90:	2b60      	cmp	r3, #96	; 0x60
 8005d92:	d050      	beq.n	8005e36 <HAL_TIM_ConfigClockSource+0x11a>
 8005d94:	2b60      	cmp	r3, #96	; 0x60
 8005d96:	d877      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005d98:	2b50      	cmp	r3, #80	; 0x50
 8005d9a:	d03c      	beq.n	8005e16 <HAL_TIM_ConfigClockSource+0xfa>
 8005d9c:	2b50      	cmp	r3, #80	; 0x50
 8005d9e:	d873      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005da0:	2b40      	cmp	r3, #64	; 0x40
 8005da2:	d058      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0x13a>
 8005da4:	2b40      	cmp	r3, #64	; 0x40
 8005da6:	d86f      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005da8:	2b30      	cmp	r3, #48	; 0x30
 8005daa:	d064      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005dac:	2b30      	cmp	r3, #48	; 0x30
 8005dae:	d86b      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d060      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d867      	bhi.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d05c      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d05a      	beq.n	8005e76 <HAL_TIM_ConfigClockSource+0x15a>
 8005dc0:	e062      	b.n	8005e88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	6899      	ldr	r1, [r3, #8]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	f000 f985 	bl	80060e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005dde:	68bb      	ldr	r3, [r7, #8]
 8005de0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005de4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	68ba      	ldr	r2, [r7, #8]
 8005dec:	609a      	str	r2, [r3, #8]
      break;
 8005dee:	e04f      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6818      	ldr	r0, [r3, #0]
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	6899      	ldr	r1, [r3, #8]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f000 f96e 	bl	80060e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e12:	609a      	str	r2, [r3, #8]
      break;
 8005e14:	e03c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6818      	ldr	r0, [r3, #0]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	6859      	ldr	r1, [r3, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	68db      	ldr	r3, [r3, #12]
 8005e22:	461a      	mov	r2, r3
 8005e24:	f000 f8e2 	bl	8005fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2150      	movs	r1, #80	; 0x50
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f000 f93b 	bl	80060aa <TIM_ITRx_SetConfig>
      break;
 8005e34:	e02c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	6859      	ldr	r1, [r3, #4]
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	461a      	mov	r2, r3
 8005e44:	f000 f901 	bl	800604a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2160      	movs	r1, #96	; 0x60
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 f92b 	bl	80060aa <TIM_ITRx_SetConfig>
      break;
 8005e54:	e01c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6818      	ldr	r0, [r3, #0]
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6859      	ldr	r1, [r3, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f000 f8c2 	bl	8005fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	2140      	movs	r1, #64	; 0x40
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 f91b 	bl	80060aa <TIM_ITRx_SetConfig>
      break;
 8005e74:	e00c      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4619      	mov	r1, r3
 8005e80:	4610      	mov	r0, r2
 8005e82:	f000 f912 	bl	80060aa <TIM_ITRx_SetConfig>
      break;
 8005e86:	e003      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e8c:	e000      	b.n	8005e90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
	...

08005eac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a40      	ldr	r2, [pc, #256]	; (8005fc0 <TIM_Base_SetConfig+0x114>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d013      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eca:	d00f      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a3d      	ldr	r2, [pc, #244]	; (8005fc4 <TIM_Base_SetConfig+0x118>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d00b      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a3c      	ldr	r2, [pc, #240]	; (8005fc8 <TIM_Base_SetConfig+0x11c>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d007      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4a3b      	ldr	r2, [pc, #236]	; (8005fcc <TIM_Base_SetConfig+0x120>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d003      	beq.n	8005eec <TIM_Base_SetConfig+0x40>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	4a3a      	ldr	r2, [pc, #232]	; (8005fd0 <TIM_Base_SetConfig+0x124>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d108      	bne.n	8005efe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	685b      	ldr	r3, [r3, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	4a2f      	ldr	r2, [pc, #188]	; (8005fc0 <TIM_Base_SetConfig+0x114>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d02b      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f0c:	d027      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a2c      	ldr	r2, [pc, #176]	; (8005fc4 <TIM_Base_SetConfig+0x118>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d023      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	4a2b      	ldr	r2, [pc, #172]	; (8005fc8 <TIM_Base_SetConfig+0x11c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d01f      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	4a2a      	ldr	r2, [pc, #168]	; (8005fcc <TIM_Base_SetConfig+0x120>)
 8005f22:	4293      	cmp	r3, r2
 8005f24:	d01b      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a29      	ldr	r2, [pc, #164]	; (8005fd0 <TIM_Base_SetConfig+0x124>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d017      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a28      	ldr	r2, [pc, #160]	; (8005fd4 <TIM_Base_SetConfig+0x128>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d013      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a27      	ldr	r2, [pc, #156]	; (8005fd8 <TIM_Base_SetConfig+0x12c>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d00f      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a26      	ldr	r2, [pc, #152]	; (8005fdc <TIM_Base_SetConfig+0x130>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d00b      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a25      	ldr	r2, [pc, #148]	; (8005fe0 <TIM_Base_SetConfig+0x134>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d007      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a24      	ldr	r2, [pc, #144]	; (8005fe4 <TIM_Base_SetConfig+0x138>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d003      	beq.n	8005f5e <TIM_Base_SetConfig+0xb2>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a23      	ldr	r2, [pc, #140]	; (8005fe8 <TIM_Base_SetConfig+0x13c>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d108      	bne.n	8005f70 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	68fa      	ldr	r2, [r7, #12]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	4313      	orrs	r3, r2
 8005f7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689a      	ldr	r2, [r3, #8]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a0a      	ldr	r2, [pc, #40]	; (8005fc0 <TIM_Base_SetConfig+0x114>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_Base_SetConfig+0xf8>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a0c      	ldr	r2, [pc, #48]	; (8005fd0 <TIM_Base_SetConfig+0x124>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d103      	bne.n	8005fac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	691a      	ldr	r2, [r3, #16]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	615a      	str	r2, [r3, #20]
}
 8005fb2:	bf00      	nop
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	40010000 	.word	0x40010000
 8005fc4:	40000400 	.word	0x40000400
 8005fc8:	40000800 	.word	0x40000800
 8005fcc:	40000c00 	.word	0x40000c00
 8005fd0:	40010400 	.word	0x40010400
 8005fd4:	40014000 	.word	0x40014000
 8005fd8:	40014400 	.word	0x40014400
 8005fdc:	40014800 	.word	0x40014800
 8005fe0:	40001800 	.word	0x40001800
 8005fe4:	40001c00 	.word	0x40001c00
 8005fe8:	40002000 	.word	0x40002000

08005fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f023 0201 	bic.w	r2, r3, #1
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 030a 	bic.w	r3, r3, #10
 8006028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800604a:	b480      	push	{r7}
 800604c:	b087      	sub	sp, #28
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f023 0210 	bic.w	r2, r3, #16
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	031b      	lsls	r3, r3, #12
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f043 0307 	orr.w	r3, r3, #7
 80060cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	609a      	str	r2, [r3, #8]
}
 80060d4:	bf00      	nop
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	021a      	lsls	r2, r3, #8
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	431a      	orrs	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4313      	orrs	r3, r2
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	609a      	str	r2, [r3, #8]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006134:	2302      	movs	r3, #2
 8006136:	e05a      	b.n	80061ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	4313      	orrs	r3, r2
 8006168:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a21      	ldr	r2, [pc, #132]	; (80061fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d022      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006184:	d01d      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a1d      	ldr	r2, [pc, #116]	; (8006200 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d018      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a1b      	ldr	r2, [pc, #108]	; (8006204 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d013      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a1a      	ldr	r2, [pc, #104]	; (8006208 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00e      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	4a18      	ldr	r2, [pc, #96]	; (800620c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d009      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a17      	ldr	r2, [pc, #92]	; (8006210 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d004      	beq.n	80061c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a15      	ldr	r2, [pc, #84]	; (8006214 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d10c      	bne.n	80061dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	68ba      	ldr	r2, [r7, #8]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68ba      	ldr	r2, [r7, #8]
 80061da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40010000 	.word	0x40010000
 8006200:	40000400 	.word	0x40000400
 8006204:	40000800 	.word	0x40000800
 8006208:	40000c00 	.word	0x40000c00
 800620c:	40010400 	.word	0x40010400
 8006210:	40014000 	.word	0x40014000
 8006214:	40001800 	.word	0x40001800

08006218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b082      	sub	sp, #8
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d101      	bne.n	800622a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006226:	2301      	movs	r3, #1
 8006228:	e03f      	b.n	80062aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d106      	bne.n	8006244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2200      	movs	r2, #0
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7fa fc16 	bl	8000a70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2224      	movs	r2, #36	; 0x24
 8006248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800625a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 f829 	bl	80062b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	691a      	ldr	r2, [r3, #16]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	695a      	ldr	r2, [r3, #20]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68da      	ldr	r2, [r3, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80062a8:	2300      	movs	r3, #0
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3708      	adds	r7, #8
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
	...

080062b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062b8:	b09f      	sub	sp, #124	; 0x7c
 80062ba:	af00      	add	r7, sp, #0
 80062bc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ca:	68d9      	ldr	r1, [r3, #12]
 80062cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	ea40 0301 	orr.w	r3, r0, r1
 80062d4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	431a      	orrs	r2, r3
 80062e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	431a      	orrs	r2, r3
 80062e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80062ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68db      	ldr	r3, [r3, #12]
 80062f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062f8:	f021 010c 	bic.w	r1, r1, #12
 80062fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006302:	430b      	orrs	r3, r1
 8006304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006306:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	695b      	ldr	r3, [r3, #20]
 800630c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006310:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006312:	6999      	ldr	r1, [r3, #24]
 8006314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	ea40 0301 	orr.w	r3, r0, r1
 800631c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800631e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	4bc5      	ldr	r3, [pc, #788]	; (8006638 <UART_SetConfig+0x384>)
 8006324:	429a      	cmp	r2, r3
 8006326:	d004      	beq.n	8006332 <UART_SetConfig+0x7e>
 8006328:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	4bc3      	ldr	r3, [pc, #780]	; (800663c <UART_SetConfig+0x388>)
 800632e:	429a      	cmp	r2, r3
 8006330:	d103      	bne.n	800633a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006332:	f7fe ffd7 	bl	80052e4 <HAL_RCC_GetPCLK2Freq>
 8006336:	6778      	str	r0, [r7, #116]	; 0x74
 8006338:	e002      	b.n	8006340 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800633a:	f7fe ffbf 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 800633e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006340:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006348:	f040 80b6 	bne.w	80064b8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800634c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800634e:	461c      	mov	r4, r3
 8006350:	f04f 0500 	mov.w	r5, #0
 8006354:	4622      	mov	r2, r4
 8006356:	462b      	mov	r3, r5
 8006358:	1891      	adds	r1, r2, r2
 800635a:	6439      	str	r1, [r7, #64]	; 0x40
 800635c:	415b      	adcs	r3, r3
 800635e:	647b      	str	r3, [r7, #68]	; 0x44
 8006360:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006364:	1912      	adds	r2, r2, r4
 8006366:	eb45 0303 	adc.w	r3, r5, r3
 800636a:	f04f 0000 	mov.w	r0, #0
 800636e:	f04f 0100 	mov.w	r1, #0
 8006372:	00d9      	lsls	r1, r3, #3
 8006374:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006378:	00d0      	lsls	r0, r2, #3
 800637a:	4602      	mov	r2, r0
 800637c:	460b      	mov	r3, r1
 800637e:	1911      	adds	r1, r2, r4
 8006380:	6639      	str	r1, [r7, #96]	; 0x60
 8006382:	416b      	adcs	r3, r5
 8006384:	667b      	str	r3, [r7, #100]	; 0x64
 8006386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	461a      	mov	r2, r3
 800638c:	f04f 0300 	mov.w	r3, #0
 8006390:	1891      	adds	r1, r2, r2
 8006392:	63b9      	str	r1, [r7, #56]	; 0x38
 8006394:	415b      	adcs	r3, r3
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006398:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800639c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80063a0:	f7f9 ff30 	bl	8000204 <__aeabi_uldivmod>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	4ba5      	ldr	r3, [pc, #660]	; (8006640 <UART_SetConfig+0x38c>)
 80063aa:	fba3 2302 	umull	r2, r3, r3, r2
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	011e      	lsls	r6, r3, #4
 80063b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063b4:	461c      	mov	r4, r3
 80063b6:	f04f 0500 	mov.w	r5, #0
 80063ba:	4622      	mov	r2, r4
 80063bc:	462b      	mov	r3, r5
 80063be:	1891      	adds	r1, r2, r2
 80063c0:	6339      	str	r1, [r7, #48]	; 0x30
 80063c2:	415b      	adcs	r3, r3
 80063c4:	637b      	str	r3, [r7, #52]	; 0x34
 80063c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80063ca:	1912      	adds	r2, r2, r4
 80063cc:	eb45 0303 	adc.w	r3, r5, r3
 80063d0:	f04f 0000 	mov.w	r0, #0
 80063d4:	f04f 0100 	mov.w	r1, #0
 80063d8:	00d9      	lsls	r1, r3, #3
 80063da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063de:	00d0      	lsls	r0, r2, #3
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	1911      	adds	r1, r2, r4
 80063e6:	65b9      	str	r1, [r7, #88]	; 0x58
 80063e8:	416b      	adcs	r3, r5
 80063ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	461a      	mov	r2, r3
 80063f2:	f04f 0300 	mov.w	r3, #0
 80063f6:	1891      	adds	r1, r2, r2
 80063f8:	62b9      	str	r1, [r7, #40]	; 0x28
 80063fa:	415b      	adcs	r3, r3
 80063fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80063fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006402:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006406:	f7f9 fefd 	bl	8000204 <__aeabi_uldivmod>
 800640a:	4602      	mov	r2, r0
 800640c:	460b      	mov	r3, r1
 800640e:	4b8c      	ldr	r3, [pc, #560]	; (8006640 <UART_SetConfig+0x38c>)
 8006410:	fba3 1302 	umull	r1, r3, r3, r2
 8006414:	095b      	lsrs	r3, r3, #5
 8006416:	2164      	movs	r1, #100	; 0x64
 8006418:	fb01 f303 	mul.w	r3, r1, r3
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	3332      	adds	r3, #50	; 0x32
 8006422:	4a87      	ldr	r2, [pc, #540]	; (8006640 <UART_SetConfig+0x38c>)
 8006424:	fba2 2303 	umull	r2, r3, r2, r3
 8006428:	095b      	lsrs	r3, r3, #5
 800642a:	005b      	lsls	r3, r3, #1
 800642c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006430:	441e      	add	r6, r3
 8006432:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006434:	4618      	mov	r0, r3
 8006436:	f04f 0100 	mov.w	r1, #0
 800643a:	4602      	mov	r2, r0
 800643c:	460b      	mov	r3, r1
 800643e:	1894      	adds	r4, r2, r2
 8006440:	623c      	str	r4, [r7, #32]
 8006442:	415b      	adcs	r3, r3
 8006444:	627b      	str	r3, [r7, #36]	; 0x24
 8006446:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800644a:	1812      	adds	r2, r2, r0
 800644c:	eb41 0303 	adc.w	r3, r1, r3
 8006450:	f04f 0400 	mov.w	r4, #0
 8006454:	f04f 0500 	mov.w	r5, #0
 8006458:	00dd      	lsls	r5, r3, #3
 800645a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800645e:	00d4      	lsls	r4, r2, #3
 8006460:	4622      	mov	r2, r4
 8006462:	462b      	mov	r3, r5
 8006464:	1814      	adds	r4, r2, r0
 8006466:	653c      	str	r4, [r7, #80]	; 0x50
 8006468:	414b      	adcs	r3, r1
 800646a:	657b      	str	r3, [r7, #84]	; 0x54
 800646c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	461a      	mov	r2, r3
 8006472:	f04f 0300 	mov.w	r3, #0
 8006476:	1891      	adds	r1, r2, r2
 8006478:	61b9      	str	r1, [r7, #24]
 800647a:	415b      	adcs	r3, r3
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006482:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006486:	f7f9 febd 	bl	8000204 <__aeabi_uldivmod>
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	4b6c      	ldr	r3, [pc, #432]	; (8006640 <UART_SetConfig+0x38c>)
 8006490:	fba3 1302 	umull	r1, r3, r3, r2
 8006494:	095b      	lsrs	r3, r3, #5
 8006496:	2164      	movs	r1, #100	; 0x64
 8006498:	fb01 f303 	mul.w	r3, r1, r3
 800649c:	1ad3      	subs	r3, r2, r3
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	3332      	adds	r3, #50	; 0x32
 80064a2:	4a67      	ldr	r2, [pc, #412]	; (8006640 <UART_SetConfig+0x38c>)
 80064a4:	fba2 2303 	umull	r2, r3, r2, r3
 80064a8:	095b      	lsrs	r3, r3, #5
 80064aa:	f003 0207 	and.w	r2, r3, #7
 80064ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4432      	add	r2, r6
 80064b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80064b6:	e0b9      	b.n	800662c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80064b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064ba:	461c      	mov	r4, r3
 80064bc:	f04f 0500 	mov.w	r5, #0
 80064c0:	4622      	mov	r2, r4
 80064c2:	462b      	mov	r3, r5
 80064c4:	1891      	adds	r1, r2, r2
 80064c6:	6139      	str	r1, [r7, #16]
 80064c8:	415b      	adcs	r3, r3
 80064ca:	617b      	str	r3, [r7, #20]
 80064cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80064d0:	1912      	adds	r2, r2, r4
 80064d2:	eb45 0303 	adc.w	r3, r5, r3
 80064d6:	f04f 0000 	mov.w	r0, #0
 80064da:	f04f 0100 	mov.w	r1, #0
 80064de:	00d9      	lsls	r1, r3, #3
 80064e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064e4:	00d0      	lsls	r0, r2, #3
 80064e6:	4602      	mov	r2, r0
 80064e8:	460b      	mov	r3, r1
 80064ea:	eb12 0804 	adds.w	r8, r2, r4
 80064ee:	eb43 0905 	adc.w	r9, r3, r5
 80064f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	4618      	mov	r0, r3
 80064f8:	f04f 0100 	mov.w	r1, #0
 80064fc:	f04f 0200 	mov.w	r2, #0
 8006500:	f04f 0300 	mov.w	r3, #0
 8006504:	008b      	lsls	r3, r1, #2
 8006506:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800650a:	0082      	lsls	r2, r0, #2
 800650c:	4640      	mov	r0, r8
 800650e:	4649      	mov	r1, r9
 8006510:	f7f9 fe78 	bl	8000204 <__aeabi_uldivmod>
 8006514:	4602      	mov	r2, r0
 8006516:	460b      	mov	r3, r1
 8006518:	4b49      	ldr	r3, [pc, #292]	; (8006640 <UART_SetConfig+0x38c>)
 800651a:	fba3 2302 	umull	r2, r3, r3, r2
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	011e      	lsls	r6, r3, #4
 8006522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006524:	4618      	mov	r0, r3
 8006526:	f04f 0100 	mov.w	r1, #0
 800652a:	4602      	mov	r2, r0
 800652c:	460b      	mov	r3, r1
 800652e:	1894      	adds	r4, r2, r2
 8006530:	60bc      	str	r4, [r7, #8]
 8006532:	415b      	adcs	r3, r3
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800653a:	1812      	adds	r2, r2, r0
 800653c:	eb41 0303 	adc.w	r3, r1, r3
 8006540:	f04f 0400 	mov.w	r4, #0
 8006544:	f04f 0500 	mov.w	r5, #0
 8006548:	00dd      	lsls	r5, r3, #3
 800654a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800654e:	00d4      	lsls	r4, r2, #3
 8006550:	4622      	mov	r2, r4
 8006552:	462b      	mov	r3, r5
 8006554:	1814      	adds	r4, r2, r0
 8006556:	64bc      	str	r4, [r7, #72]	; 0x48
 8006558:	414b      	adcs	r3, r1
 800655a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800655c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4618      	mov	r0, r3
 8006562:	f04f 0100 	mov.w	r1, #0
 8006566:	f04f 0200 	mov.w	r2, #0
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	008b      	lsls	r3, r1, #2
 8006570:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006574:	0082      	lsls	r2, r0, #2
 8006576:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800657a:	f7f9 fe43 	bl	8000204 <__aeabi_uldivmod>
 800657e:	4602      	mov	r2, r0
 8006580:	460b      	mov	r3, r1
 8006582:	4b2f      	ldr	r3, [pc, #188]	; (8006640 <UART_SetConfig+0x38c>)
 8006584:	fba3 1302 	umull	r1, r3, r3, r2
 8006588:	095b      	lsrs	r3, r3, #5
 800658a:	2164      	movs	r1, #100	; 0x64
 800658c:	fb01 f303 	mul.w	r3, r1, r3
 8006590:	1ad3      	subs	r3, r2, r3
 8006592:	011b      	lsls	r3, r3, #4
 8006594:	3332      	adds	r3, #50	; 0x32
 8006596:	4a2a      	ldr	r2, [pc, #168]	; (8006640 <UART_SetConfig+0x38c>)
 8006598:	fba2 2303 	umull	r2, r3, r2, r3
 800659c:	095b      	lsrs	r3, r3, #5
 800659e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80065a2:	441e      	add	r6, r3
 80065a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065a6:	4618      	mov	r0, r3
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	4602      	mov	r2, r0
 80065ae:	460b      	mov	r3, r1
 80065b0:	1894      	adds	r4, r2, r2
 80065b2:	603c      	str	r4, [r7, #0]
 80065b4:	415b      	adcs	r3, r3
 80065b6:	607b      	str	r3, [r7, #4]
 80065b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065bc:	1812      	adds	r2, r2, r0
 80065be:	eb41 0303 	adc.w	r3, r1, r3
 80065c2:	f04f 0400 	mov.w	r4, #0
 80065c6:	f04f 0500 	mov.w	r5, #0
 80065ca:	00dd      	lsls	r5, r3, #3
 80065cc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065d0:	00d4      	lsls	r4, r2, #3
 80065d2:	4622      	mov	r2, r4
 80065d4:	462b      	mov	r3, r5
 80065d6:	eb12 0a00 	adds.w	sl, r2, r0
 80065da:	eb43 0b01 	adc.w	fp, r3, r1
 80065de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f04f 0100 	mov.w	r1, #0
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	008b      	lsls	r3, r1, #2
 80065f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065f6:	0082      	lsls	r2, r0, #2
 80065f8:	4650      	mov	r0, sl
 80065fa:	4659      	mov	r1, fp
 80065fc:	f7f9 fe02 	bl	8000204 <__aeabi_uldivmod>
 8006600:	4602      	mov	r2, r0
 8006602:	460b      	mov	r3, r1
 8006604:	4b0e      	ldr	r3, [pc, #56]	; (8006640 <UART_SetConfig+0x38c>)
 8006606:	fba3 1302 	umull	r1, r3, r3, r2
 800660a:	095b      	lsrs	r3, r3, #5
 800660c:	2164      	movs	r1, #100	; 0x64
 800660e:	fb01 f303 	mul.w	r3, r1, r3
 8006612:	1ad3      	subs	r3, r2, r3
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	3332      	adds	r3, #50	; 0x32
 8006618:	4a09      	ldr	r2, [pc, #36]	; (8006640 <UART_SetConfig+0x38c>)
 800661a:	fba2 2303 	umull	r2, r3, r2, r3
 800661e:	095b      	lsrs	r3, r3, #5
 8006620:	f003 020f 	and.w	r2, r3, #15
 8006624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4432      	add	r2, r6
 800662a:	609a      	str	r2, [r3, #8]
}
 800662c:	bf00      	nop
 800662e:	377c      	adds	r7, #124	; 0x7c
 8006630:	46bd      	mov	sp, r7
 8006632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006636:	bf00      	nop
 8006638:	40011000 	.word	0x40011000
 800663c:	40011400 	.word	0x40011400
 8006640:	51eb851f 	.word	0x51eb851f

08006644 <__libc_init_array>:
 8006644:	b570      	push	{r4, r5, r6, lr}
 8006646:	4d0d      	ldr	r5, [pc, #52]	; (800667c <__libc_init_array+0x38>)
 8006648:	4c0d      	ldr	r4, [pc, #52]	; (8006680 <__libc_init_array+0x3c>)
 800664a:	1b64      	subs	r4, r4, r5
 800664c:	10a4      	asrs	r4, r4, #2
 800664e:	2600      	movs	r6, #0
 8006650:	42a6      	cmp	r6, r4
 8006652:	d109      	bne.n	8006668 <__libc_init_array+0x24>
 8006654:	4d0b      	ldr	r5, [pc, #44]	; (8006684 <__libc_init_array+0x40>)
 8006656:	4c0c      	ldr	r4, [pc, #48]	; (8006688 <__libc_init_array+0x44>)
 8006658:	f000 f820 	bl	800669c <_init>
 800665c:	1b64      	subs	r4, r4, r5
 800665e:	10a4      	asrs	r4, r4, #2
 8006660:	2600      	movs	r6, #0
 8006662:	42a6      	cmp	r6, r4
 8006664:	d105      	bne.n	8006672 <__libc_init_array+0x2e>
 8006666:	bd70      	pop	{r4, r5, r6, pc}
 8006668:	f855 3b04 	ldr.w	r3, [r5], #4
 800666c:	4798      	blx	r3
 800666e:	3601      	adds	r6, #1
 8006670:	e7ee      	b.n	8006650 <__libc_init_array+0xc>
 8006672:	f855 3b04 	ldr.w	r3, [r5], #4
 8006676:	4798      	blx	r3
 8006678:	3601      	adds	r6, #1
 800667a:	e7f2      	b.n	8006662 <__libc_init_array+0x1e>
 800667c:	080344ec 	.word	0x080344ec
 8006680:	080344ec 	.word	0x080344ec
 8006684:	080344ec 	.word	0x080344ec
 8006688:	080344f0 	.word	0x080344f0

0800668c <memset>:
 800668c:	4402      	add	r2, r0
 800668e:	4603      	mov	r3, r0
 8006690:	4293      	cmp	r3, r2
 8006692:	d100      	bne.n	8006696 <memset+0xa>
 8006694:	4770      	bx	lr
 8006696:	f803 1b01 	strb.w	r1, [r3], #1
 800669a:	e7f9      	b.n	8006690 <memset+0x4>

0800669c <_init>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr

080066a8 <_fini>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	bf00      	nop
 80066ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ae:	bc08      	pop	{r3}
 80066b0:	469e      	mov	lr, r3
 80066b2:	4770      	bx	lr
